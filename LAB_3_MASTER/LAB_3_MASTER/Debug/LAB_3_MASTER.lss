
LAB_3_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000f3c  00000fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800206  00800206  000010d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013cf  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e1  00000000  00000000  000025e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e61  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00003e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000575  00000000  00000000  00003f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  00004509  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000047c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 98 00 	jmp	0x130	; 0x130 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
   c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  48:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_18>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  68:	8b 01       	movw	r16, r22
  6a:	91 01       	movw	r18, r2
  6c:	97 01       	movw	r18, r14
  6e:	9d 01       	movw	r18, r26
  70:	a3 01       	movw	r20, r6
  72:	a9 01       	movw	r20, r18
  74:	af 01       	movw	r20, r30
  76:	b5 01       	movw	r22, r10
  78:	bb 01       	movw	r22, r22
  7a:	c1 01       	movw	r24, r2
  7c:	d2 01       	movw	r26, r4
  7e:	d8 01       	movw	r26, r16
  80:	de 01       	movw	r26, r28
  82:	e4 01       	movw	r28, r8
  84:	ea 01       	movw	r28, r20
  86:	f0 01       	movw	r30, r0
  88:	f6 01       	movw	r30, r12
  8a:	fc 01       	movw	r30, r24
  8c:	02 02       	muls	r16, r18
  8e:	08 02       	muls	r16, r24
  90:	19 02       	muls	r17, r25
  92:	1f 02       	muls	r17, r31
  94:	25 02       	muls	r18, r21
  96:	2b 02       	muls	r18, r27
  98:	31 02       	muls	r19, r17
  9a:	37 02       	muls	r19, r23
  9c:	3d 02       	muls	r19, r29
  9e:	43 02       	muls	r20, r19
  a0:	49 02       	muls	r20, r25
  a2:	4f 02       	muls	r20, r31
  a4:	c8 02       	muls	r28, r24
  a6:	ce 02       	muls	r28, r30
  a8:	d4 02       	muls	r29, r20
  aa:	da 02       	muls	r29, r26
  ac:	e0 02       	muls	r30, r16
  ae:	e6 02       	muls	r30, r22
  b0:	ec 02       	muls	r30, r28
  b2:	f2 02       	muls	r31, r18
  b4:	f8 02       	muls	r31, r24
  b6:	fe 02       	muls	r31, r30
  b8:	0f 03       	fmul	r16, r23
  ba:	15 03       	mulsu	r17, r21
  bc:	1b 03       	fmul	r17, r19
  be:	21 03       	mulsu	r18, r17
  c0:	27 03       	mulsu	r18, r23
  c2:	2d 03       	fmul	r18, r21
  c4:	33 03       	mulsu	r19, r19
  c6:	39 03       	fmul	r19, r17
  c8:	3f 03       	fmul	r19, r23
  ca:	45 03       	mulsu	r20, r21
  cc:	56 03       	mulsu	r21, r22
  ce:	5c 03       	fmul	r21, r20
  d0:	62 03       	mulsu	r22, r18
  d2:	68 03       	fmul	r22, r16
  d4:	6e 03       	fmul	r22, r22
  d6:	74 03       	mulsu	r23, r20
  d8:	7a 03       	fmul	r23, r18
  da:	80 03       	fmuls	r16, r16
  dc:	86 03       	fmuls	r16, r22
  de:	8c 03       	fmulsu	r16, r20
  e0:	fb 03       	fmulsu	r23, r19
  e2:	01 04       	cpc	r0, r1
  e4:	07 04       	cpc	r0, r7
  e6:	0d 04       	cpc	r0, r13
  e8:	13 04       	cpc	r1, r3
  ea:	19 04       	cpc	r1, r9
  ec:	1f 04       	cpc	r1, r15
  ee:	25 04       	cpc	r2, r5
  f0:	2b 04       	cpc	r2, r11
  f2:	31 04       	cpc	r3, r1
  f4:	42 04       	cpc	r4, r2
  f6:	48 04       	cpc	r4, r8
  f8:	4e 04       	cpc	r4, r14
  fa:	54 04       	cpc	r5, r4
  fc:	5a 04       	cpc	r5, r10
  fe:	60 04       	cpc	r6, r0
 100:	66 04       	cpc	r6, r6
 102:	6c 04       	cpc	r6, r12
 104:	72 04       	cpc	r7, r2
 106:	78 04       	cpc	r7, r8
 108:	89 04       	cpc	r8, r9
 10a:	8f 04       	cpc	r8, r15
 10c:	95 04       	cpc	r9, r5
 10e:	9b 04       	cpc	r9, r11
 110:	a1 04       	cpc	r10, r1
 112:	a7 04       	cpc	r10, r7
 114:	ad 04       	cpc	r10, r13
 116:	b3 04       	cpc	r11, r3
 118:	b9 04       	cpc	r11, r9
 11a:	bf 04       	cpc	r11, r15
 11c:	9c 05       	cpc	r25, r12
 11e:	a7 05       	cpc	r26, r7
 120:	b4 05       	cpc	r27, r4
 122:	c1 05       	cpc	r28, r1
 124:	ce 05       	cpc	r28, r14
 126:	db 05       	cpc	r29, r11
 128:	e8 05       	cpc	r30, r8
 12a:	f5 05       	cpc	r31, r5
 12c:	02 06       	cpc	r0, r18
 12e:	0f 06       	cpc	r0, r31

00000130 <__ctors_end>:
 130:	11 24       	eor	r1, r1
 132:	1f be       	out	0x3f, r1	; 63
 134:	cf ef       	ldi	r28, 0xFF	; 255
 136:	d8 e0       	ldi	r29, 0x08	; 8
 138:	de bf       	out	0x3e, r29	; 62
 13a:	cd bf       	out	0x3d, r28	; 61

0000013c <__do_copy_data>:
 13c:	12 e0       	ldi	r17, 0x02	; 2
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	ec e3       	ldi	r30, 0x3C	; 60
 144:	ff e0       	ldi	r31, 0x0F	; 15
 146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x10>
 148:	05 90       	lpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a6 30       	cpi	r26, 0x06	; 6
 14e:	b1 07       	cpc	r27, r17
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0xc>

00000152 <__do_clear_bss>:
 152:	22 e0       	ldi	r18, 0x02	; 2
 154:	a6 e0       	ldi	r26, 0x06	; 6
 156:	b2 e0       	ldi	r27, 0x02	; 2
 158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
 15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
 15c:	a1 32       	cpi	r26, 0x21	; 33
 15e:	b2 07       	cpc	r27, r18
 160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
 162:	0e 94 3d 05 	call	0xa7a	; 0xa7a <main>
 166:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <_exit>

0000016a <__bad_interrupt>:
 16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <USANDOPYTHON>:

char lista[10] = {'0','1','2','3','4','5','6','7','8','9'}; //Lista de numeros a mostrar
	
	
void USANDOPYTHON(uint8_t activar){    //Si se requiere ver los potenciómeros usando la interfaz gráfica de python
	if (activar == 1)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	39 f4       	brne	.+14     	; 0x180 <USANDOPYTHON+0x12>
	{
		python = 1;    //Activar que se pueda ver en la interfaz gráfica
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <python+0x1>
 17a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <python>
 17e:	08 95       	ret
		
	}  
	
	else{
		python = 0;   //Desactivar que se pueda ver en la interfaz gráfica
 180:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <python+0x1>
 184:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <python>
 188:	08 95       	ret

0000018a <POT>:
	}
	
	}

void POT(uint8_t VA1, uint8_t VA2){
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	c8 2f       	mov	r28, r24
	
	if (python == 1 && enclava == 0)
 194:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <python>
 198:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <python+0x1>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	91 f4       	brne	.+36     	; 0x1c6 <POT+0x3c>
 1a2:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 1a6:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 1aa:	23 2b       	or	r18, r19
 1ac:	61 f4       	brne	.+24     	; 0x1c6 <POT+0x3c>
	{
		cambios = 2;
 1ae:	22 e0       	ldi	r18, 0x02	; 2
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <cambios+0x1>
 1b6:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <cambios>
		enclava = 1;
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 1c2:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
	}
	
	if (python == 1 && cambios == 2)
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	91 05       	cpc	r25, r1
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <POT+0x5e>
 1cc:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <cambios>
 1d0:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <cambios+0x1>
 1d4:	22 30       	cpi	r18, 0x02	; 2
 1d6:	31 05       	cpc	r19, r1
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <POT+0x5e>
	{
		cambios = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <cambios+0x1>
 1e2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <cambios>
 1e6:	0e c0       	rjmp	.+28     	; 0x204 <POT+0x7a>
	}
	
	else if (python == 1 && cambios == 1)
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	61 f4       	brne	.+24     	; 0x204 <POT+0x7a>
 1ec:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <cambios>
 1f0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <cambios+0x1>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	31 f4       	brne	.+12     	; 0x204 <POT+0x7a>
	{
		cambios = 2;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <cambios+0x1>
 200:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <cambios>
	}
	
	
	millares = VA2/1000;
 204:	26 2f       	mov	r18, r22
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	e8 ee       	ldi	r30, 0xE8	; 232
 20a:	f3 e0       	ldi	r31, 0x03	; 3
 20c:	c9 01       	movw	r24, r18
 20e:	bf 01       	movw	r22, r30
 210:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 214:	8b 01       	movw	r16, r22
 216:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <millares+0x1>
 21a:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <millares>
	centenas = (VA2-(millares*1000))/100;
 21e:	48 e1       	ldi	r20, 0x18	; 24
 220:	5c ef       	ldi	r21, 0xFC	; 252
 222:	64 9f       	mul	r22, r20
 224:	c0 01       	movw	r24, r0
 226:	65 9f       	mul	r22, r21
 228:	90 0d       	add	r25, r0
 22a:	74 9f       	mul	r23, r20
 22c:	90 0d       	add	r25, r0
 22e:	11 24       	eor	r1, r1
 230:	82 0f       	add	r24, r18
 232:	93 1f       	adc	r25, r19
 234:	64 e6       	ldi	r22, 0x64	; 100
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 23c:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <centenas+0x1>
 240:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <centenas>
	decenas = (VA2- (millares*1000 + centenas*100))/10;
 244:	0e 9f       	mul	r16, r30
 246:	a0 01       	movw	r20, r0
 248:	0f 9f       	mul	r16, r31
 24a:	50 0d       	add	r21, r0
 24c:	1e 9f       	mul	r17, r30
 24e:	50 0d       	add	r21, r0
 250:	11 24       	eor	r1, r1
 252:	e4 e6       	ldi	r30, 0x64	; 100
 254:	e6 9f       	mul	r30, r22
 256:	c0 01       	movw	r24, r0
 258:	e7 9f       	mul	r30, r23
 25a:	90 0d       	add	r25, r0
 25c:	11 24       	eor	r1, r1
 25e:	fa 01       	movw	r30, r20
 260:	e8 0f       	add	r30, r24
 262:	f9 1f       	adc	r31, r25
 264:	c9 01       	movw	r24, r18
 266:	8e 1b       	sub	r24, r30
 268:	9f 0b       	sbc	r25, r31
 26a:	6a e0       	ldi	r22, 0x0A	; 10
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 272:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <decenas+0x1>
 276:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <decenas>
	unidades = VA2-(millares*1000 + centenas*100 + decenas*10);
 27a:	cb 01       	movw	r24, r22
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	68 0f       	add	r22, r24
 28e:	79 1f       	adc	r23, r25
 290:	6e 0f       	add	r22, r30
 292:	7f 1f       	adc	r23, r31
 294:	26 1b       	sub	r18, r22
 296:	37 0b       	sbc	r19, r23
 298:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <unidades+0x1>
 29c:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <unidades>
	writeUART(10);  //Enviar un enter
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
	if (python == 0)
 2a8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <python>
 2ac:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <python+0x1>
 2b0:	89 2b       	or	r24, r25
 2b2:	f1 f4       	brne	.+60     	; 0x2f0 <POT+0x166>
	{
		writeUART(10);  //Enviar un enter
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		writeUART(10);  //Enviar un enter
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		writeUART(10);  //Enviar un enter
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		writeUART(10);  //Enviar un enter
 2cc:	8a e0       	ldi	r24, 0x0A	; 10
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		writeTextUART("Valor potenciometro 1: ");
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 19 05 	call	0xa32	; 0xa32 <writeTextUART>
		cambios = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <cambios+0x1>
 2e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <cambios>
		enclava = 0;
 2e8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 2ec:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
		
	}
	
	if (cambios == 1)
 2f0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <cambios>
 2f4:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <cambios+0x1>
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <POT+0x174>
 2fc:	d5 c0       	rjmp	.+426    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
	{
		
	
	
	switch(centenas){   //Mostrar centenas
 2fe:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <centenas>
 302:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <centenas+0x1>
 306:	ea 30       	cpi	r30, 0x0A	; 10
 308:	f1 05       	cpc	r31, r1
 30a:	08 f0       	brcs	.+2      	; 0x30e <POT+0x184>
 30c:	3f c0       	rjmp	.+126    	; 0x38c <POT+0x202>
 30e:	ec 5c       	subi	r30, 0xCC	; 204
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 320:	35 c0       	rjmp	.+106    	; 0x38c <POT+0x202>
		
		
		case 1:
		writeUART(lista[1]);
 322:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 32c:	2f c0       	rjmp	.+94     	; 0x38c <POT+0x202>
		
		case 2:
		writeUART(lista[2]);
 32e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 338:	29 c0       	rjmp	.+82     	; 0x38c <POT+0x202>
		
		
		case 3:
		writeUART(lista[3]);
 33a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 344:	23 c0       	rjmp	.+70     	; 0x38c <POT+0x202>
		
		case 4:
		writeUART(lista[4]);
 346:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 350:	1d c0       	rjmp	.+58     	; 0x38c <POT+0x202>
		
		
		case 5:
		writeUART(lista[5]);
 352:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 35c:	17 c0       	rjmp	.+46     	; 0x38c <POT+0x202>
		
		
		case 6:
		writeUART(lista[6]);
 35e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 368:	11 c0       	rjmp	.+34     	; 0x38c <POT+0x202>
		
		
		case 7:
		writeUART(lista[7]);
 36a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 374:	0b c0       	rjmp	.+22     	; 0x38c <POT+0x202>
		
		case 8:
		writeUART(lista[8]);
 376:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 380:	05 c0       	rjmp	.+10     	; 0x38c <POT+0x202>
		
		
		case 9:
		writeUART(lista[9]);
 382:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
		
	}
	
	
	switch(decenas){   //Mostrar decenas
 38c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <decenas>
 390:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <decenas+0x1>
 394:	ea 30       	cpi	r30, 0x0A	; 10
 396:	f1 05       	cpc	r31, r1
 398:	08 f0       	brcs	.+2      	; 0x39c <POT+0x212>
 39a:	3f c0       	rjmp	.+126    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 39c:	e2 5c       	subi	r30, 0xC2	; 194
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 3a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 3ae:	35 c0       	rjmp	.+106    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		
		case 1:
		writeUART(lista[1]);
 3b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 3ba:	2f c0       	rjmp	.+94     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		case 2:
		writeUART(lista[2]);
 3bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 3c6:	29 c0       	rjmp	.+82     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		
		case 3:
		writeUART(lista[3]);
 3c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 3d2:	23 c0       	rjmp	.+70     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		case 4:
		writeUART(lista[4]);
 3d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 3de:	1d c0       	rjmp	.+58     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		
		case 5:
		writeUART(lista[5]);
 3e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 3ea:	17 c0       	rjmp	.+46     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		
		case 6:
		writeUART(lista[6]);
 3ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 3f6:	11 c0       	rjmp	.+34     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		
		case 7:
		writeUART(lista[7]);
 3f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 402:	0b c0       	rjmp	.+22     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		case 8:
		writeUART(lista[8]);
 404:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		
		
		case 9:
		writeUART(lista[9]);
 410:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
		
	}
	
	switch(unidades){   //Mostrar unidades
 41a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <unidades>
 41e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <unidades+0x1>
 422:	ea 30       	cpi	r30, 0x0A	; 10
 424:	f1 05       	cpc	r31, r1
 426:	08 f0       	brcs	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	3f c0       	rjmp	.+126    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 42a:	e8 5b       	subi	r30, 0xB8	; 184
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 432:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 43c:	35 c0       	rjmp	.+106    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		
		case 1:
		writeUART(lista[1]);
 43e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 448:	2f c0       	rjmp	.+94     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		case 2:
		writeUART(lista[2]);
 44a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 454:	29 c0       	rjmp	.+82     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		
		case 3:
		writeUART(lista[3]);
 456:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 460:	23 c0       	rjmp	.+70     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		case 4:
		writeUART(lista[4]);
 462:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 46c:	1d c0       	rjmp	.+58     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		
		case 5:
		writeUART(lista[5]);
 46e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 478:	17 c0       	rjmp	.+46     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		
		case 6:
		writeUART(lista[6]);
 47a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 484:	11 c0       	rjmp	.+34     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		
		case 7:
		writeUART(lista[7]);
 486:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 490:	0b c0       	rjmp	.+22     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		case 8:
		writeUART(lista[8]);
 492:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		
		case 9:
		writeUART(lista[9]);
 49e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
	}
	}
	
	
	//Obtener el dato del potenciometro descompuesto
	millares = VA1/1000;
 4a8:	2c 2f       	mov	r18, r28
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	c8 ee       	ldi	r28, 0xE8	; 232
 4ae:	d3 e0       	ldi	r29, 0x03	; 3
 4b0:	c9 01       	movw	r24, r18
 4b2:	be 01       	movw	r22, r28
 4b4:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 4b8:	8b 01       	movw	r16, r22
 4ba:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <millares+0x1>
 4be:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <millares>
	centenas = (VA1-(millares*1000))/100;
 4c2:	48 e1       	ldi	r20, 0x18	; 24
 4c4:	5c ef       	ldi	r21, 0xFC	; 252
 4c6:	64 9f       	mul	r22, r20
 4c8:	c0 01       	movw	r24, r0
 4ca:	65 9f       	mul	r22, r21
 4cc:	90 0d       	add	r25, r0
 4ce:	74 9f       	mul	r23, r20
 4d0:	90 0d       	add	r25, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	82 0f       	add	r24, r18
 4d6:	93 1f       	adc	r25, r19
 4d8:	64 e6       	ldi	r22, 0x64	; 100
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 4e0:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <centenas+0x1>
 4e4:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <centenas>
	decenas = (VA1- (millares*1000 + centenas*100))/10;
 4e8:	0c 9f       	mul	r16, r28
 4ea:	f0 01       	movw	r30, r0
 4ec:	0d 9f       	mul	r16, r29
 4ee:	f0 0d       	add	r31, r0
 4f0:	1c 9f       	mul	r17, r28
 4f2:	f0 0d       	add	r31, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	44 e6       	ldi	r20, 0x64	; 100
 4f8:	46 9f       	mul	r20, r22
 4fa:	c0 01       	movw	r24, r0
 4fc:	47 9f       	mul	r20, r23
 4fe:	90 0d       	add	r25, r0
 500:	11 24       	eor	r1, r1
 502:	e8 0f       	add	r30, r24
 504:	f9 1f       	adc	r31, r25
 506:	c9 01       	movw	r24, r18
 508:	8e 1b       	sub	r24, r30
 50a:	9f 0b       	sbc	r25, r31
 50c:	6a e0       	ldi	r22, 0x0A	; 10
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 514:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <decenas+0x1>
 518:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <decenas>
	unidades = VA1-(millares*1000 + centenas*100 + decenas*10);
 51c:	cb 01       	movw	r24, r22
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	66 0f       	add	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	68 0f       	add	r22, r24
 530:	79 1f       	adc	r23, r25
 532:	6e 0f       	add	r22, r30
 534:	7f 1f       	adc	r23, r31
 536:	26 1b       	sub	r18, r22
 538:	37 0b       	sbc	r19, r23
 53a:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <unidades+0x1>
 53e:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <unidades>
	
	if (python == 0)
 542:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <python>
 546:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <python+0x1>
 54a:	89 2b       	or	r24, r25
 54c:	41 f4       	brne	.+16     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
	{
		writeUART(10);  //Enviar un enter
 54e:	8a e0       	ldi	r24, 0x0A	; 10
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		writeTextUART("Valor potenciometro 2: ");
 556:	88 e2       	ldi	r24, 0x28	; 40
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	0e 94 19 05 	call	0xa32	; 0xa32 <writeTextUART>
	}
	
	if (cambios == 2 || python == 0)
 55e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <cambios>
 562:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <cambios+0x1>
 566:	02 97       	sbiw	r24, 0x02	; 2
 568:	39 f0       	breq	.+14     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 56a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <python>
 56e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <python+0x1>
 572:	89 2b       	or	r24, r25
 574:	09 f0       	breq	.+2      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 576:	d5 c0       	rjmp	.+426    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
	{
		
	
	
	switch(centenas){   //Mostrar centenas
 578:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <centenas>
 57c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <centenas+0x1>
 580:	ea 30       	cpi	r30, 0x0A	; 10
 582:	f1 05       	cpc	r31, r1
 584:	08 f0       	brcs	.+2      	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 586:	3f c0       	rjmp	.+126    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 588:	ee 5a       	subi	r30, 0xAE	; 174
 58a:	ff 4f       	sbci	r31, 0xFF	; 255
 58c:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 590:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 59a:	35 c0       	rjmp	.+106    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		
		case 1:
		writeUART(lista[1]);
 59c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5a6:	2f c0       	rjmp	.+94     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		case 2:
		writeUART(lista[2]);
 5a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5b2:	29 c0       	rjmp	.+82     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		
		case 3:
		writeUART(lista[3]);
 5b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5be:	23 c0       	rjmp	.+70     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		case 4:
		writeUART(lista[4]);
 5c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5ca:	1d c0       	rjmp	.+58     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		
		case 5:
		writeUART(lista[5]);
 5cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5d6:	17 c0       	rjmp	.+46     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		
		case 6:
		writeUART(lista[6]);
 5d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5e2:	11 c0       	rjmp	.+34     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		
		case 7:
		writeUART(lista[7]);
 5e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5ee:	0b c0       	rjmp	.+22     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		case 8:
		writeUART(lista[8]);
 5f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		
		
		case 9:
		writeUART(lista[9]);
 5fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
		
	}
	
	
	switch(decenas){   //Mostrar decenas
 606:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <decenas>
 60a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <decenas+0x1>
 60e:	ea 30       	cpi	r30, 0x0A	; 10
 610:	f1 05       	cpc	r31, r1
 612:	08 f0       	brcs	.+2      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 614:	3f c0       	rjmp	.+126    	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
 616:	e4 5a       	subi	r30, 0xA4	; 164
 618:	ff 4f       	sbci	r31, 0xFF	; 255
 61a:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 61e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 628:	35 c0       	rjmp	.+106    	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		
		case 1:
		writeUART(lista[1]);
 62a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 634:	2f c0       	rjmp	.+94     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		case 2:
		writeUART(lista[2]);
 636:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 640:	29 c0       	rjmp	.+82     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		
		case 3:
		writeUART(lista[3]);
 642:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 64c:	23 c0       	rjmp	.+70     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		case 4:
		writeUART(lista[4]);
 64e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 658:	1d c0       	rjmp	.+58     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		
		case 5:
		writeUART(lista[5]);
 65a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 664:	17 c0       	rjmp	.+46     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		
		case 6:
		writeUART(lista[6]);
 666:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 670:	11 c0       	rjmp	.+34     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		
		case 7:
		writeUART(lista[7]);
 672:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 67c:	0b c0       	rjmp	.+22     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		case 8:
		writeUART(lista[8]);
 67e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 688:	05 c0       	rjmp	.+10     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
		
		
		case 9:
		writeUART(lista[9]);
 68a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
		
	}
	
	switch(unidades){   //Mostrar unidades
 694:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <unidades>
 698:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <unidades+0x1>
 69c:	ea 30       	cpi	r30, 0x0A	; 10
 69e:	f1 05       	cpc	r31, r1
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
 6a2:	3f c0       	rjmp	.+126    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 6a4:	ea 59       	subi	r30, 0x9A	; 154
 6a6:	ff 4f       	sbci	r31, 0xFF	; 255
 6a8:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 6ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 6b6:	35 c0       	rjmp	.+106    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		
		case 1:
		writeUART(lista[1]);
 6b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 6c2:	2f c0       	rjmp	.+94     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		case 2:
		writeUART(lista[2]);
 6c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 6ce:	29 c0       	rjmp	.+82     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		
		case 3:
		writeUART(lista[3]);
 6d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 6da:	23 c0       	rjmp	.+70     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		case 4:
		writeUART(lista[4]);
 6dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 6e6:	1d c0       	rjmp	.+58     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		
		case 5:
		writeUART(lista[5]);
 6e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 6f2:	17 c0       	rjmp	.+46     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		
		case 6:
		writeUART(lista[6]);
 6f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 6fe:	11 c0       	rjmp	.+34     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		
		case 7:
		writeUART(lista[7]);
 700:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 70a:	0b c0       	rjmp	.+22     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		case 8:
		writeUART(lista[8]);
 70c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 716:	05 c0       	rjmp	.+10     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		
		
		case 9:
		writeUART(lista[9]);
 718:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		
	}
	
	
}
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	08 95       	ret

0000072c <CONTA>:

void CONTA(uint8_t cambi){
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
	
	 millares = cambi/1000;
 734:	28 2f       	mov	r18, r24
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	08 ee       	ldi	r16, 0xE8	; 232
 73a:	13 e0       	ldi	r17, 0x03	; 3
 73c:	c9 01       	movw	r24, r18
 73e:	b8 01       	movw	r22, r16
 740:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 744:	eb 01       	movw	r28, r22
 746:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <millares+0x1>
 74a:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <millares>
	 centenas = (cambi-(millares*1000))/100;
 74e:	48 e1       	ldi	r20, 0x18	; 24
 750:	5c ef       	ldi	r21, 0xFC	; 252
 752:	64 9f       	mul	r22, r20
 754:	c0 01       	movw	r24, r0
 756:	65 9f       	mul	r22, r21
 758:	90 0d       	add	r25, r0
 75a:	74 9f       	mul	r23, r20
 75c:	90 0d       	add	r25, r0
 75e:	11 24       	eor	r1, r1
 760:	82 0f       	add	r24, r18
 762:	93 1f       	adc	r25, r19
 764:	64 e6       	ldi	r22, 0x64	; 100
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 76c:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <centenas+0x1>
 770:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <centenas>
	 decenas = (cambi- (millares*1000 + centenas*100))/10;
 774:	c0 9f       	mul	r28, r16
 776:	f0 01       	movw	r30, r0
 778:	c1 9f       	mul	r28, r17
 77a:	f0 0d       	add	r31, r0
 77c:	d0 9f       	mul	r29, r16
 77e:	f0 0d       	add	r31, r0
 780:	11 24       	eor	r1, r1
 782:	44 e6       	ldi	r20, 0x64	; 100
 784:	46 9f       	mul	r20, r22
 786:	c0 01       	movw	r24, r0
 788:	47 9f       	mul	r20, r23
 78a:	90 0d       	add	r25, r0
 78c:	11 24       	eor	r1, r1
 78e:	e8 0f       	add	r30, r24
 790:	f9 1f       	adc	r31, r25
 792:	c9 01       	movw	r24, r18
 794:	8e 1b       	sub	r24, r30
 796:	9f 0b       	sbc	r25, r31
 798:	6a e0       	ldi	r22, 0x0A	; 10
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodhi4>
 7a0:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <decenas+0x1>
 7a4:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <decenas>
	unidades = cambi-(millares*1000 + centenas*100 + decenas*10);
 7a8:	cb 01       	movw	r24, r22
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	66 0f       	add	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	66 0f       	add	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	68 0f       	add	r22, r24
 7bc:	79 1f       	adc	r23, r25
 7be:	6e 0f       	add	r22, r30
 7c0:	7f 1f       	adc	r23, r31
 7c2:	26 1b       	sub	r18, r22
 7c4:	37 0b       	sbc	r19, r23
 7c6:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <unidades+0x1>
 7ca:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <unidades>
	
	writeUART(10);  //Enviar un enter
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
	writeTextUART("Valor Del contador: ");
 7d6:	80 e4       	ldi	r24, 0x40	; 64
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	0e 94 19 05 	call	0xa32	; 0xa32 <writeTextUART>
	switch(centenas){   //Mostrar centenas
 7de:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <centenas>
 7e2:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <centenas+0x1>
 7e6:	ea 30       	cpi	r30, 0x0A	; 10
 7e8:	f1 05       	cpc	r31, r1
 7ea:	08 f0       	brcs	.+2      	; 0x7ee <CONTA+0xc2>
 7ec:	3f c0       	rjmp	.+126    	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 7ee:	e0 59       	subi	r30, 0x90	; 144
 7f0:	ff 4f       	sbci	r31, 0xFF	; 255
 7f2:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 7f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 800:	35 c0       	rjmp	.+106    	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		
		case 1:
		writeUART(lista[1]);
 802:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 80c:	2f c0       	rjmp	.+94     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		case 2:
		writeUART(lista[2]);
 80e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 818:	29 c0       	rjmp	.+82     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		
		case 3:
		writeUART(lista[3]);
 81a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 824:	23 c0       	rjmp	.+70     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		case 4:
		writeUART(lista[4]);
 826:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 830:	1d c0       	rjmp	.+58     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		
		case 5:
		writeUART(lista[5]);
 832:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 83c:	17 c0       	rjmp	.+46     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		
		case 6:
		writeUART(lista[6]);
 83e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 848:	11 c0       	rjmp	.+34     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		
		case 7:
		writeUART(lista[7]);
 84a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 854:	0b c0       	rjmp	.+22     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		case 8:
		writeUART(lista[8]);
 856:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 860:	05 c0       	rjmp	.+10     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		
		
		case 9:
		writeUART(lista[9]);
 862:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
		
	}
	
	
	switch(decenas){   //Mostrar decenas
 86c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <decenas>
 870:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <decenas+0x1>
 874:	ea 30       	cpi	r30, 0x0A	; 10
 876:	f1 05       	cpc	r31, r1
 878:	08 f0       	brcs	.+2      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 87a:	3f c0       	rjmp	.+126    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 87c:	e6 58       	subi	r30, 0x86	; 134
 87e:	ff 4f       	sbci	r31, 0xFF	; 255
 880:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 884:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 88e:	35 c0       	rjmp	.+106    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		
		case 1:
		writeUART(lista[1]);
 890:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 89a:	2f c0       	rjmp	.+94     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		case 2:
		writeUART(lista[2]);
 89c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 8a6:	29 c0       	rjmp	.+82     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		
		case 3:
		writeUART(lista[3]);
 8a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 8b2:	23 c0       	rjmp	.+70     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		case 4:
		writeUART(lista[4]);
 8b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 8be:	1d c0       	rjmp	.+58     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		
		case 5:
		writeUART(lista[5]);
 8c0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 8ca:	17 c0       	rjmp	.+46     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		
		case 6:
		writeUART(lista[6]);
 8cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		
		case 7:
		writeUART(lista[7]);
 8d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 8e2:	0b c0       	rjmp	.+22     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		case 8:
		writeUART(lista[8]);
 8e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 8ee:	05 c0       	rjmp	.+10     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		
		case 9:
		writeUART(lista[9]);
 8f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
		
	}
	
	switch(unidades){   //Mostrar unidades
 8fa:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <unidades>
 8fe:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <unidades+0x1>
 902:	ea 30       	cpi	r30, 0x0A	; 10
 904:	f1 05       	cpc	r31, r1
 906:	08 f0       	brcs	.+2      	; 0x90a <__stack+0xb>
 908:	3f c0       	rjmp	.+126    	; 0x988 <__stack+0x89>
 90a:	ec 57       	subi	r30, 0x7C	; 124
 90c:	ff 4f       	sbci	r31, 0xFF	; 255
 90e:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
		case 0:
		writeUART(lista[0]);
 912:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 91c:	35 c0       	rjmp	.+106    	; 0x988 <__stack+0x89>
		
		
		case 1:
		writeUART(lista[1]);
 91e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 928:	2f c0       	rjmp	.+94     	; 0x988 <__stack+0x89>
		
		case 2:
		writeUART(lista[2]);
 92a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 934:	29 c0       	rjmp	.+82     	; 0x988 <__stack+0x89>
		
		
		case 3:
		writeUART(lista[3]);
 936:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 940:	23 c0       	rjmp	.+70     	; 0x988 <__stack+0x89>
		
		case 4:
		writeUART(lista[4]);
 942:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 94c:	1d c0       	rjmp	.+58     	; 0x988 <__stack+0x89>
		
		
		case 5:
		writeUART(lista[5]);
 94e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 958:	17 c0       	rjmp	.+46     	; 0x988 <__stack+0x89>
		
		
		case 6:
		writeUART(lista[6]);
 95a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 964:	11 c0       	rjmp	.+34     	; 0x988 <__stack+0x89>
		
		
		case 7:
		writeUART(lista[7]);
 966:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 970:	0b c0       	rjmp	.+22     	; 0x988 <__stack+0x89>
		
		case 8:
		writeUART(lista[8]);
 972:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
 97c:	05 c0       	rjmp	.+10     	; 0x988 <__stack+0x89>
		
		
		case 9:
		writeUART(lista[9]);
 97e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
		break;
		
	}
}
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	08 95       	ret

00000992 <SPI_init>:
	/*	Pines de control para esclavos
		PB2: Esclavo 1
	*/
	
	
	DDRB |= (1<<DDB2) | (1<<DDB3) | (1<<DDB5);   //SS, MOSI, and SCK OUTPUT in master mode
 992:	84 b1       	in	r24, 0x04	; 4
 994:	8c 62       	ori	r24, 0x2C	; 44
 996:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB4);  //MISO como entrada
 998:	84 b1       	in	r24, 0x04	; 4
 99a:	8f 7e       	andi	r24, 0xEF	; 239
 99c:	84 b9       	out	0x04, r24	; 4

	/*	Orden de salida de los datos 
		DORD = 0, El bit más significativo (MSB) es enviado primero
		DORD = 1, El bit menos significativo (LSB) es enviado primero
	*/
	SPCR &=~ (1<<DORD);
 99e:	8c b5       	in	r24, 0x2c	; 44
 9a0:	8f 7d       	andi	r24, 0xDF	; 223
 9a2:	8c bd       	out	0x2c, r24	; 44
		  0	  |   0    |  Clock inactivo en bajo, detección de bits en flanco de subida
		  0	  |   1    |  Clock inactivo en bajo, detección de bits en flanco de bajada
		  1	  |   0    |  Clock inactivo en alto, detección de bits en flanco de bajada
		  1	  |   1    |  Clock inactivo en alto, detección de bits en flanco de subida			
	*/
	SPCR &=~ (1<<CPOL);
 9a4:	8c b5       	in	r24, 0x2c	; 44
 9a6:	87 7f       	andi	r24, 0xF7	; 247
 9a8:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<CPHA);
 9aa:	8c b5       	in	r24, 0x2c	; 44
 9ac:	8b 7f       	andi	r24, 0xFB	; 251
 9ae:	8c bd       	out	0x2c, r24	; 44
		1	  | 1	 |	0	|	32
		1	  | 1	 |	1	|	64
		
		F_CPU=16MHz -> F_SPI= F_CPU/16= 1MHz		 
	*/
	SPCR |=  (1<<SPR0);
 9b0:	8c b5       	in	r24, 0x2c	; 44
 9b2:	81 60       	ori	r24, 0x01	; 1
 9b4:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR1);
 9b6:	8c b5       	in	r24, 0x2c	; 44
 9b8:	8d 7f       	andi	r24, 0xFD	; 253
 9ba:	8c bd       	out	0x2c, r24	; 44
	SPSR &=~ (1<<SPI2X);
 9bc:	8d b5       	in	r24, 0x2d	; 45
 9be:	8e 7f       	andi	r24, 0xFE	; 254
 9c0:	8d bd       	out	0x2d, r24	; 45

	/*	Modo de funcionamiento 
		MSTR = 0, SPI como esclavo
		MSTR = 1; SPI como maestro
	*/
	SPCR |= (1<<MSTR);
 9c2:	8c b5       	in	r24, 0x2c	; 44
 9c4:	80 61       	ori	r24, 0x10	; 16
 9c6:	8c bd       	out	0x2c, r24	; 44

	/* Activar SPI 
		SPE = 0, SPI desactivado
		SPE = |, SPI activado
	*/
	SPCR |= (1<<SPE);
 9c8:	8c b5       	in	r24, 0x2c	; 44
 9ca:	80 64       	ori	r24, 0x40	; 64
 9cc:	8c bd       	out	0x2c, r24	; 44
 9ce:	08 95       	ret

000009d0 <SPI_slaveON>:
}

void SPI_slaveON(uint8_t slave)
{
	switch (slave)
 9d0:	82 30       	cpi	r24, 0x02	; 2
 9d2:	19 f4       	brne	.+6      	; 0x9da <SPI_slaveON+0xa>
	{
		case 1:
		//	PORTB &=~ (1<<PORTB1);  //Ejemplo por si se tiene otro o mas esclavos
		break;
		case 2:
			PORTB &=~ (1<<PORTB2);
 9d4:	85 b1       	in	r24, 0x05	; 5
 9d6:	8b 7f       	andi	r24, 0xFB	; 251
 9d8:	85 b9       	out	0x05, r24	; 5
 9da:	08 95       	ret

000009dc <SPI_slaveOFF>:
	}
}

void SPI_slaveOFF(uint8_t slave)
{
	switch (slave)
 9dc:	82 30       	cpi	r24, 0x02	; 2
 9de:	19 f4       	brne	.+6      	; 0x9e6 <SPI_slaveOFF+0xa>
	{
		case 1:
			//PORTB |= (1<<PORTB1);
		break;
		case 2:
			PORTB |= (1<<PORTB2);
 9e0:	85 b1       	in	r24, 0x05	; 5
 9e2:	84 60       	ori	r24, 0x04	; 4
 9e4:	85 b9       	out	0x05, r24	; 5
 9e6:	08 95       	ret

000009e8 <SPI_tx>:
}

void SPI_tx(uint8_t data)
{
	/* Cargar dato al registro */
	SPDR = data;
 9e8:	8e bd       	out	0x2e, r24	; 46
	/* Esperar a que la transmisión se realice */
	while(!(SPSR & (1<<SPIF)));
 9ea:	0d b4       	in	r0, 0x2d	; 45
 9ec:	07 fe       	sbrs	r0, 7
 9ee:	fd cf       	rjmp	.-6      	; 0x9ea <SPI_tx+0x2>
}
 9f0:	08 95       	ret

000009f2 <SPI_rx>:

uint8_t SPI_rx()
{
	/* Esperar a la recepción del dato */
	while(!(SPSR & (1<<SPIF)));
 9f2:	0d b4       	in	r0, 0x2d	; 45
 9f4:	07 fe       	sbrs	r0, 7
 9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <SPI_rx>
	/* Retorna el dato recibido */
	return SPDR;
 9f8:	8e b5       	in	r24, 0x2e	; 46
}
 9fa:	08 95       	ret

000009fc <initUART9600>:
#include "UART.h"

void initUART9600()
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 9fc:	8a b1       	in	r24, 0x0a	; 10
 9fe:	8e 7f       	andi	r24, 0xFE	; 254
 a00:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 a02:	8a b1       	in	r24, 0x0a	; 10
 a04:	82 60       	ori	r24, 0x02	; 2
 a06:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 a08:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 a0c:	e1 ec       	ldi	r30, 0xC1	; 193
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 a12:	80 81       	ld	r24, Z
 a14:	88 69       	ori	r24, 0x98	; 152
 a16:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 a18:	e2 ec       	ldi	r30, 0xC2	; 194
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 a1e:	80 81       	ld	r24, Z
 a20:	86 60       	ori	r24, 0x06	; 6
 a22:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de baudrate a 9600
	UBRR0 = 103;
 a24:	87 e6       	ldi	r24, 0x67	; 103
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 a2c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 a30:	08 95       	ret

00000a32 <writeTextUART>:
	
}


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
 a32:	ac 01       	movw	r20, r24
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 a34:	20 e0       	ldi	r18, 0x00	; 0
 a36:	07 c0       	rjmp	.+14     	; 0xa46 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 a38:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a3c:	95 ff       	sbrs	r25, 5
 a3e:	fc cf       	rjmp	.-8      	; 0xa38 <writeTextUART+0x6>
		UDR0 = Texto[o];
 a40:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 a44:	2f 5f       	subi	r18, 0xFF	; 255
 a46:	fa 01       	movw	r30, r20
 a48:	e2 0f       	add	r30, r18
 a4a:	f1 1d       	adc	r31, r1
 a4c:	30 81       	ld	r19, Z
 a4e:	31 11       	cpse	r19, r1
 a50:	f3 cf       	rjmp	.-26     	; 0xa38 <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 a52:	08 95       	ret

00000a54 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 a54:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a58:	95 ff       	sbrs	r25, 5
 a5a:	fc cf       	rjmp	.-8      	; 0xa54 <writeUART>
	UDR0 = Caracter;
 a5c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a60:	08 95       	ret

00000a62 <setup>:
/////////////////////////////////////////////
//Sub_rutinas
/////////////////////////////////////////////
void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 a62:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;  //Puerto C como salida
 a68:	83 e0       	ldi	r24, 0x03	; 3
 a6a:	84 b9       	out	0x04, r24	; 4
	
	initUART9600();  //Iniciar UART
 a6c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <initUART9600>
	SPI_init();
 a70:	0e 94 c9 04 	call	0x992	; 0x992 <SPI_init>
	

	PORTD = 0x00;
 a74:	1b b8       	out	0x0b, r1	; 11
	sei(); //Activar interrupciones
 a76:	78 94       	sei
 a78:	08 95       	ret

00000a7a <main>:
/////////////////////////////////////////////
//Programa Principal
/////////////////////////////////////////////
int main(void)
{
	setup();
 a7a:	0e 94 31 05 	call	0xa62	; 0xa62 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a7e:	8f e1       	ldi	r24, 0x1F	; 31
 a80:	9e e4       	ldi	r25, 0x4E	; 78
 a82:	01 97       	sbiw	r24, 0x01	; 1
 a84:	f1 f7       	brne	.-4      	; 0xa82 <main+0x8>
 a86:	00 c0       	rjmp	.+0      	; 0xa88 <main+0xe>
 a88:	00 00       	nop
	
	while (1)
	{
		_delay_ms(5);
		if (receivedChar == 'R') //si se desea usar python, bloquear el acceso a UART normal
 a8a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 a8e:	82 35       	cpi	r24, 0x52	; 82
 a90:	31 f4       	brne	.+12     	; 0xa9e <main+0x24>
		{
			activa = 1;
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <activa+0x1>
 a9a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <activa>
		}
		
		if(activa == 0 && menu2 == 0){
 a9e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <activa>
 aa2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <activa+0x1>
 aa6:	89 2b       	or	r24, r25
 aa8:	69 f5       	brne	.+90     	; 0xb04 <main+0x8a>
 aaa:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <menu2>
 aae:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <menu2+0x1>
 ab2:	89 2b       	or	r24, r25
 ab4:	39 f5       	brne	.+78     	; 0xb04 <main+0x8a>
			writeTextUART("\n\r     **************MENU****************");   //Mostrar inicio
 ab6:	85 e5       	ldi	r24, 0x55	; 85
 ab8:	91 e0       	ldi	r25, 0x01	; 1
 aba:	0e 94 19 05 	call	0xa32	; 0xa32 <writeTextUART>
			writeUART(10);
 abe:	8a e0       	ldi	r24, 0x0A	; 10
 ac0:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
			writeUART(13);
 ac4:	8d e0       	ldi	r24, 0x0D	; 13
 ac6:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
			writeUART(10);
 aca:	8a e0       	ldi	r24, 0x0A	; 10
 acc:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
			writeTextUART("          Potenciometro ADC6");   //Mostrar inicio
 ad0:	8f e7       	ldi	r24, 0x7F	; 127
 ad2:	91 e0       	ldi	r25, 0x01	; 1
 ad4:	0e 94 19 05 	call	0xa32	; 0xa32 <writeTextUART>
			writeUART(10);
 ad8:	8a e0       	ldi	r24, 0x0A	; 10
 ada:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
			writeUART(13);
 ade:	8d e0       	ldi	r24, 0x0D	; 13
 ae0:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
			writeTextUART("          Potenciometro ADC7\n\r");   //Mostrar inicio
 ae4:	8c e9       	ldi	r24, 0x9C	; 156
 ae6:	91 e0       	ldi	r25, 0x01	; 1
 ae8:	0e 94 19 05 	call	0xa32	; 0xa32 <writeTextUART>
			writeUART(10);
 aec:	8a e0       	ldi	r24, 0x0A	; 10
 aee:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
			writeUART(13);
 af2:	8d e0       	ldi	r24, 0x0D	; 13
 af4:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
			activa = 1;   //Salir del menu
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <activa+0x1>
 b00:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <activa>
		}
		
		
		
		if (receivedChar !='c' && activa3 == 1)
 b04:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 b08:	83 36       	cpi	r24, 0x63	; 99
 b0a:	09 f4       	brne	.+2      	; 0xb0e <main+0x94>
 b0c:	da c0       	rjmp	.+436    	; 0xcc2 <main+0x248>
 b0e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <activa3>
 b12:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <activa3+0x1>
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	09 f0       	breq	.+2      	; 0xb1c <main+0xa2>
 b1a:	d3 c0       	rjmp	.+422    	; 0xcc2 <main+0x248>
		{
			
			
			switch(receivedChar){
 b1c:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <receivedChar>
 b20:	8e 2f       	mov	r24, r30
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	fc 01       	movw	r30, r24
 b26:	f0 97       	sbiw	r30, 0x30	; 48
 b28:	ea 30       	cpi	r30, 0x0A	; 10
 b2a:	f1 05       	cpc	r31, r1
 b2c:	08 f0       	brcs	.+2      	; 0xb30 <main+0xb6>
 b2e:	83 c0       	rjmp	.+262    	; 0xc36 <main+0x1bc>
 b30:	e2 57       	subi	r30, 0x72	; 114
 b32:	ff 4f       	sbci	r31, 0xFF	; 255
 b34:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__tablejump2__>
				case '0':
				lista1[i] = 0;
 b38:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 b3c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 b40:	ee 0f       	add	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	e6 5f       	subi	r30, 0xF6	; 246
 b46:	fe 4f       	sbci	r31, 0xFE	; 254
 b48:	11 82       	std	Z+1, r1	; 0x01
 b4a:	10 82       	st	Z, r1
				break;
 b4c:	74 c0       	rjmp	.+232    	; 0xc36 <main+0x1bc>
				case '1':
				lista1[i] = 1;
 b4e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 b52:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 b56:	ee 0f       	add	r30, r30
 b58:	ff 1f       	adc	r31, r31
 b5a:	e6 5f       	subi	r30, 0xF6	; 246
 b5c:	fe 4f       	sbci	r31, 0xFE	; 254
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	91 83       	std	Z+1, r25	; 0x01
 b64:	80 83       	st	Z, r24
				break;
 b66:	67 c0       	rjmp	.+206    	; 0xc36 <main+0x1bc>
				case '2':
				lista1[i] = 2;
 b68:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 b6c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 b70:	ee 0f       	add	r30, r30
 b72:	ff 1f       	adc	r31, r31
 b74:	e6 5f       	subi	r30, 0xF6	; 246
 b76:	fe 4f       	sbci	r31, 0xFE	; 254
 b78:	82 e0       	ldi	r24, 0x02	; 2
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	91 83       	std	Z+1, r25	; 0x01
 b7e:	80 83       	st	Z, r24
				break;
 b80:	5a c0       	rjmp	.+180    	; 0xc36 <main+0x1bc>
				case '3':
				lista1[i] = 3;
 b82:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 b86:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 b8a:	ee 0f       	add	r30, r30
 b8c:	ff 1f       	adc	r31, r31
 b8e:	e6 5f       	subi	r30, 0xF6	; 246
 b90:	fe 4f       	sbci	r31, 0xFE	; 254
 b92:	83 e0       	ldi	r24, 0x03	; 3
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	91 83       	std	Z+1, r25	; 0x01
 b98:	80 83       	st	Z, r24
				break;
 b9a:	4d c0       	rjmp	.+154    	; 0xc36 <main+0x1bc>
				case '4':
				lista1[i] = 4;
 b9c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 ba0:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 ba4:	ee 0f       	add	r30, r30
 ba6:	ff 1f       	adc	r31, r31
 ba8:	e6 5f       	subi	r30, 0xF6	; 246
 baa:	fe 4f       	sbci	r31, 0xFE	; 254
 bac:	84 e0       	ldi	r24, 0x04	; 4
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	91 83       	std	Z+1, r25	; 0x01
 bb2:	80 83       	st	Z, r24
				break;
 bb4:	40 c0       	rjmp	.+128    	; 0xc36 <main+0x1bc>
				case '5':
				lista1[i] = 5;
 bb6:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 bba:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 bbe:	ee 0f       	add	r30, r30
 bc0:	ff 1f       	adc	r31, r31
 bc2:	e6 5f       	subi	r30, 0xF6	; 246
 bc4:	fe 4f       	sbci	r31, 0xFE	; 254
 bc6:	85 e0       	ldi	r24, 0x05	; 5
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	91 83       	std	Z+1, r25	; 0x01
 bcc:	80 83       	st	Z, r24
				break;
 bce:	33 c0       	rjmp	.+102    	; 0xc36 <main+0x1bc>
				case '6':
				lista1[i] = 6;
 bd0:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 bd4:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 bd8:	ee 0f       	add	r30, r30
 bda:	ff 1f       	adc	r31, r31
 bdc:	e6 5f       	subi	r30, 0xF6	; 246
 bde:	fe 4f       	sbci	r31, 0xFE	; 254
 be0:	86 e0       	ldi	r24, 0x06	; 6
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	91 83       	std	Z+1, r25	; 0x01
 be6:	80 83       	st	Z, r24
				break;
 be8:	26 c0       	rjmp	.+76     	; 0xc36 <main+0x1bc>
				case '7':
				lista1[i] = 7;
 bea:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 bee:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 bf2:	ee 0f       	add	r30, r30
 bf4:	ff 1f       	adc	r31, r31
 bf6:	e6 5f       	subi	r30, 0xF6	; 246
 bf8:	fe 4f       	sbci	r31, 0xFE	; 254
 bfa:	87 e0       	ldi	r24, 0x07	; 7
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	91 83       	std	Z+1, r25	; 0x01
 c00:	80 83       	st	Z, r24
				break;
 c02:	19 c0       	rjmp	.+50     	; 0xc36 <main+0x1bc>
				case '8':
				lista1[i] = 8;
 c04:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 c08:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 c0c:	ee 0f       	add	r30, r30
 c0e:	ff 1f       	adc	r31, r31
 c10:	e6 5f       	subi	r30, 0xF6	; 246
 c12:	fe 4f       	sbci	r31, 0xFE	; 254
 c14:	88 e0       	ldi	r24, 0x08	; 8
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	91 83       	std	Z+1, r25	; 0x01
 c1a:	80 83       	st	Z, r24
				break;
 c1c:	0c c0       	rjmp	.+24     	; 0xc36 <main+0x1bc>
				case '9':
				lista1[i] = 9;
 c1e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <i>
 c22:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <i+0x1>
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	e6 5f       	subi	r30, 0xF6	; 246
 c2c:	fe 4f       	sbci	r31, 0xFE	; 254
 c2e:	89 e0       	ldi	r24, 0x09	; 9
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	91 83       	std	Z+1, r25	; 0x01
 c34:	80 83       	st	Z, r24
				break;
				
			}
			
			
			if (i >= 2)
 c36:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <i>
 c3a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <i+0x1>
 c3e:	02 97       	sbiw	r24, 0x02	; 2
 c40:	c4 f4       	brge	.+48     	; 0xc72 <main+0x1f8>
 c42:	33 c0       	rjmp	.+102    	; 0xcaa <main+0x230>
			{
				int result = 0;

				for (int P = 0; P < 3; P++) {
					result = result * 10 + lista1[P];  // Construir el n?mero
 c44:	ac 01       	movw	r20, r24
 c46:	44 0f       	add	r20, r20
 c48:	55 1f       	adc	r21, r21
 c4a:	88 0f       	add	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	88 0f       	add	r24, r24
 c50:	99 1f       	adc	r25, r25
 c52:	88 0f       	add	r24, r24
 c54:	99 1f       	adc	r25, r25
 c56:	84 0f       	add	r24, r20
 c58:	95 1f       	adc	r25, r21
 c5a:	f9 01       	movw	r30, r18
 c5c:	ee 0f       	add	r30, r30
 c5e:	ff 1f       	adc	r31, r31
 c60:	e6 5f       	subi	r30, 0xF6	; 246
 c62:	fe 4f       	sbci	r31, 0xFE	; 254
 c64:	40 81       	ld	r20, Z
 c66:	51 81       	ldd	r21, Z+1	; 0x01
 c68:	84 0f       	add	r24, r20
 c6a:	95 1f       	adc	r25, r21
			
			if (i >= 2)
			{
				int result = 0;

				for (int P = 0; P < 3; P++) {
 c6c:	2f 5f       	subi	r18, 0xFF	; 255
 c6e:	3f 4f       	sbci	r19, 0xFF	; 255
 c70:	04 c0       	rjmp	.+8      	; 0xc7a <main+0x200>
 c72:	20 e0       	ldi	r18, 0x00	; 0
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	80 e0       	ldi	r24, 0x00	; 0
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	23 30       	cpi	r18, 0x03	; 3
 c7c:	31 05       	cpc	r19, r1
 c7e:	14 f3       	brlt	.-60     	; 0xc44 <main+0x1ca>
					result = result * 10 + lista1[P];  // Construir el n?mero
				}
				
				PORTD = result << 2;  //Mostrar el valor del contador, con corrimiento hacia la derecha, de dos bits, muestra los primeros 6 bits
 c80:	28 2f       	mov	r18, r24
 c82:	22 0f       	add	r18, r18
 c84:	22 0f       	add	r18, r18
 c86:	2b b9       	out	0x0b, r18	; 11
				PORTC = result >> 6;   //Mostrar el valor del contador, con corrimiento hacia la izquierda, muestra los ultimos 2 bits
 c88:	08 2e       	mov	r0, r24
 c8a:	89 2f       	mov	r24, r25
 c8c:	00 0c       	add	r0, r0
 c8e:	88 1f       	adc	r24, r24
 c90:	99 0b       	sbc	r25, r25
 c92:	00 0c       	add	r0, r0
 c94:	88 1f       	adc	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	88 b9       	out	0x08, r24	; 8
				i = 0;
 c9a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <i+0x1>
 c9e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <i>
				activa3 = 0;
 ca2:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <activa3+0x1>
 ca6:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <activa3>
			}
			

			i++;
 caa:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <i>
 cae:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <i+0x1>
 cb2:	01 96       	adiw	r24, 0x01	; 1
 cb4:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <i+0x1>
 cb8:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <i>
			receivedChar = 'c';
 cbc:	83 e6       	ldi	r24, 0x63	; 99
 cbe:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <receivedChar>
			
		}
		
		
		if(receivedChar != 0 && activa3 == 0){      //Si la variable que hay en USART es diferente de cero
 cc2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 cc6:	88 23       	and	r24, r24
 cc8:	09 f4       	brne	.+2      	; 0xccc <main+0x252>
 cca:	d9 ce       	rjmp	.-590    	; 0xa7e <main+0x4>
 ccc:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <activa3>
 cd0:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <activa3+0x1>
 cd4:	89 2b       	or	r24, r25
 cd6:	09 f0       	breq	.+2      	; 0xcda <main+0x260>
 cd8:	d2 ce       	rjmp	.-604    	; 0xa7e <main+0x4>
			
			if (receivedChar == 'A') //Si se quiere enviar un valor directo al contador por python
 cda:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 cde:	81 34       	cpi	r24, 0x41	; 65
 ce0:	69 f4       	brne	.+26     	; 0xcfc <main+0x282>
			{
				activa3 = 1;
 ce2:	81 e0       	ldi	r24, 0x01	; 1
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <activa3+0x1>
 cea:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <activa3>
				receivedChar = 'c';
 cee:	83 e6       	ldi	r24, 0x63	; 99
 cf0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <receivedChar>
				i = 0;
 cf4:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <i+0x1>
 cf8:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <i>
			}
			
			
			
			if ((receivedChar == '1' && menu2 == 0) || receivedChar == 'Q')   //Si se quiere ver los potenciometros, Q es para usar la interfaz de python
 cfc:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 d00:	81 33       	cpi	r24, 0x31	; 49
 d02:	31 f4       	brne	.+12     	; 0xd10 <main+0x296>
 d04:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <menu2>
 d08:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <menu2+0x1>
 d0c:	89 2b       	or	r24, r25
 d0e:	21 f0       	breq	.+8      	; 0xd18 <main+0x29e>
 d10:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 d14:	81 35       	cpi	r24, 0x51	; 81
 d16:	69 f5       	brne	.+90     	; 0xd72 <main+0x2f8>
			{
				if (receivedChar == 'Q')
 d18:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 d1c:	81 35       	cpi	r24, 0x51	; 81
 d1e:	21 f4       	brne	.+8      	; 0xd28 <main+0x2ae>
				{
					USANDOPYTHON(1);
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	0e 94 b7 00 	call	0x16e	; 0x16e <USANDOPYTHON>
 d26:	03 c0       	rjmp	.+6      	; 0xd2e <main+0x2b4>
				}
				else{
					USANDOPYTHON(0);
 d28:	80 e0       	ldi	r24, 0x00	; 0
 d2a:	0e 94 b7 00 	call	0x16e	; 0x16e <USANDOPYTHON>
				}
				
				SPI_slaveON(2);
 d2e:	82 e0       	ldi	r24, 0x02	; 2
 d30:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <SPI_slaveON>
				SPI_tx(1);
 d34:	81 e0       	ldi	r24, 0x01	; 1
 d36:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SPI_tx>
				datoRecibido1 = SPI_rx();
 d3a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <SPI_rx>
 d3e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <datoRecibido1>
				SPI_slaveOFF(2);
 d42:	82 e0       	ldi	r24, 0x02	; 2
 d44:	0e 94 ee 04 	call	0x9dc	; 0x9dc <SPI_slaveOFF>
				
				
				SPI_slaveON(2);
 d48:	82 e0       	ldi	r24, 0x02	; 2
 d4a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <SPI_slaveON>
				SPI_tx(2);
 d4e:	82 e0       	ldi	r24, 0x02	; 2
 d50:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SPI_tx>
				datoRecibido2 = SPI_rx();
 d54:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <SPI_rx>
 d58:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <datoRecibido2>
				SPI_slaveOFF(2);
 d5c:	82 e0       	ldi	r24, 0x02	; 2
 d5e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <SPI_slaveOFF>
				
				POT(datoRecibido1, datoRecibido2);
 d62:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <datoRecibido2>
 d66:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <datoRecibido1>
 d6a:	0e 94 c5 00 	call	0x18a	; 0x18a <POT>
				
				receivedChar = 0;
 d6e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <receivedChar>
			}
			
			
			if (receivedChar == '2' ){   //Si se elige modificar el valor del contador
 d72:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 d76:	82 33       	cpi	r24, 0x32	; 50
 d78:	c1 f4       	brne	.+48     	; 0xdaa <main+0x330>
				menu2 = 1;
 d7a:	81 e0       	ldi	r24, 0x01	; 1
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <menu2+0x1>
 d82:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <menu2>
				writeTextUART("Presione + para incrementar, - para decrementar, e para menu principal \n\r");
 d86:	8b eb       	ldi	r24, 0xBB	; 187
 d88:	91 e0       	ldi	r25, 0x01	; 1
 d8a:	0e 94 19 05 	call	0xa32	; 0xa32 <writeTextUART>
				writeUART(10);
 d8e:	8a e0       	ldi	r24, 0x0A	; 10
 d90:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				writeUART(13);
 d94:	8d e0       	ldi	r24, 0x0D	; 13
 d96:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				writeUART(10);
 d9a:	8a e0       	ldi	r24, 0x0A	; 10
 d9c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				writeUART(13);
 da0:	8d e0       	ldi	r24, 0x0D	; 13
 da2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				
				receivedChar = 0;
 da6:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <receivedChar>
			}
			
			if (receivedChar == '+' && menu2 == 1){
 daa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 dae:	8b 32       	cpi	r24, 0x2B	; 43
 db0:	81 f5       	brne	.+96     	; 0xe12 <main+0x398>
 db2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <menu2>
 db6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <menu2+0x1>
 dba:	01 97       	sbiw	r24, 0x01	; 1
 dbc:	51 f5       	brne	.+84     	; 0xe12 <main+0x398>
				cambio ++;
 dbe:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <cambio>
 dc2:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <cambio+0x1>
 dc6:	01 96       	adiw	r24, 0x01	; 1
 dc8:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <cambio+0x1>
 dcc:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <cambio>
				if (cambio >= 255)    //si el contador es mayor de 255, dejarlo en 255
 dd0:	8f 3f       	cpi	r24, 0xFF	; 255
 dd2:	91 05       	cpc	r25, r1
 dd4:	34 f0       	brlt	.+12     	; 0xde2 <main+0x368>
				{
					cambio = 255;
 dd6:	8f ef       	ldi	r24, 0xFF	; 255
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <cambio+0x1>
 dde:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <cambio>
				}
				CONTA(cambio);
 de2:	c7 e1       	ldi	r28, 0x17	; 23
 de4:	d2 e0       	ldi	r29, 0x02	; 2
 de6:	88 81       	ld	r24, Y
 de8:	0e 94 96 03 	call	0x72c	; 0x72c <CONTA>
				
				
				PORTD = cambio << 2;  //Mostrar el valor del contador, con corrimiento hacia la derecha, de dos bits, muestra los primeros 6 bits
 dec:	88 81       	ld	r24, Y
 dee:	88 0f       	add	r24, r24
 df0:	88 0f       	add	r24, r24
 df2:	8b b9       	out	0x0b, r24	; 11
				PORTC = cambio >>6;   //Mostrar el valor del contador, con corrimiento hacia la izquierda, muestra los ultimos 2 bits
 df4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <cambio>
 df8:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <cambio+0x1>
 dfc:	08 2e       	mov	r0, r24
 dfe:	89 2f       	mov	r24, r25
 e00:	00 0c       	add	r0, r0
 e02:	88 1f       	adc	r24, r24
 e04:	99 0b       	sbc	r25, r25
 e06:	00 0c       	add	r0, r0
 e08:	88 1f       	adc	r24, r24
 e0a:	99 1f       	adc	r25, r25
 e0c:	88 b9       	out	0x08, r24	; 8
				receivedChar = 0;
 e0e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <receivedChar>
				
			}
			
			if (receivedChar == '-' && menu2 == 1){
 e12:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 e16:	8d 32       	cpi	r24, 0x2D	; 45
 e18:	71 f5       	brne	.+92     	; 0xe76 <main+0x3fc>
 e1a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <menu2>
 e1e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <menu2+0x1>
 e22:	01 97       	sbiw	r24, 0x01	; 1
 e24:	41 f5       	brne	.+80     	; 0xe76 <main+0x3fc>
				cambio --;
 e26:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <cambio>
 e2a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <cambio+0x1>
 e2e:	01 97       	sbiw	r24, 0x01	; 1
 e30:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <cambio+0x1>
 e34:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <cambio>
				
				if (cambio <= 0)    //si el contador es mayor de 255, dejarlo en 255
 e38:	18 16       	cp	r1, r24
 e3a:	19 06       	cpc	r1, r25
 e3c:	24 f0       	brlt	.+8      	; 0xe46 <main+0x3cc>
				{
					cambio = 0;
 e3e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <cambio+0x1>
 e42:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <cambio>
				}
				CONTA(cambio);
 e46:	c7 e1       	ldi	r28, 0x17	; 23
 e48:	d2 e0       	ldi	r29, 0x02	; 2
 e4a:	88 81       	ld	r24, Y
 e4c:	0e 94 96 03 	call	0x72c	; 0x72c <CONTA>
				PORTD = cambio << 2;  //Mostrar el valor del contador, con corrimiento hacia la derecha, de dos bits, muestra los primeros 6 bits
 e50:	88 81       	ld	r24, Y
 e52:	88 0f       	add	r24, r24
 e54:	88 0f       	add	r24, r24
 e56:	8b b9       	out	0x0b, r24	; 11
				PORTB = cambio >>6;   //Mostrar el valor del contador, con corrimiento hacia la izquierda, muestra los ultimos 2 bits
 e58:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <cambio>
 e5c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <cambio+0x1>
 e60:	08 2e       	mov	r0, r24
 e62:	89 2f       	mov	r24, r25
 e64:	00 0c       	add	r0, r0
 e66:	88 1f       	adc	r24, r24
 e68:	99 0b       	sbc	r25, r25
 e6a:	00 0c       	add	r0, r0
 e6c:	88 1f       	adc	r24, r24
 e6e:	99 1f       	adc	r25, r25
 e70:	85 b9       	out	0x05, r24	; 5
				receivedChar = 0;
 e72:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <receivedChar>
				
			}
			
			if (receivedChar == 'e')
 e76:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receivedChar>
 e7a:	85 36       	cpi	r24, 0x65	; 101
 e7c:	09 f0       	breq	.+2      	; 0xe80 <main+0x406>
 e7e:	ff cd       	rjmp	.-1026   	; 0xa7e <main+0x4>
			{
				receivedChar = 0;
 e80:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <receivedChar>
				menu2 = 0;
 e84:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <menu2+0x1>
 e88:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <menu2>
				activa = 0;
 e8c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <activa+0x1>
 e90:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <activa>
				writeUART(10);  //Enviar un enter
 e94:	8a e0       	ldi	r24, 0x0A	; 10
 e96:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				writeUART(10);  //Enviar un enter
 e9a:	8a e0       	ldi	r24, 0x0A	; 10
 e9c:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				writeUART(10);  //Enviar un enter
 ea0:	8a e0       	ldi	r24, 0x0A	; 10
 ea2:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				writeUART(10);  //Enviar un enter
 ea6:	8a e0       	ldi	r24, 0x0A	; 10
 ea8:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
				writeUART(10);  //Enviar un enter
 eac:	8a e0       	ldi	r24, 0x0A	; 10
 eae:	0e 94 2a 05 	call	0xa54	; 0xa54 <writeUART>
 eb2:	e5 cd       	rjmp	.-1078   	; 0xa7e <main+0x4>

00000eb4 <__vector_18>:

/////////////////////////////////////////////
//Vector USART
/////////////////////////////////////////////
ISR(USART_RX_vect)
{
 eb4:	1f 92       	push	r1
 eb6:	0f 92       	push	r0
 eb8:	0f b6       	in	r0, 0x3f	; 63
 eba:	0f 92       	push	r0
 ebc:	11 24       	eor	r1, r1
 ebe:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el car?cter recibido
 ec0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 ec4:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <receivedChar>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 ec8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 ecc:	85 ff       	sbrs	r24, 5
 ece:	fc cf       	rjmp	.-8      	; 0xec8 <__vector_18+0x14>
	
}
 ed0:	8f 91       	pop	r24
 ed2:	0f 90       	pop	r0
 ed4:	0f be       	out	0x3f, r0	; 63
 ed6:	0f 90       	pop	r0
 ed8:	1f 90       	pop	r1
 eda:	18 95       	reti

00000edc <__divmodhi4>:
 edc:	97 fb       	bst	r25, 7
 ede:	07 2e       	mov	r0, r23
 ee0:	16 f4       	brtc	.+4      	; 0xee6 <__divmodhi4+0xa>
 ee2:	00 94       	com	r0
 ee4:	07 d0       	rcall	.+14     	; 0xef4 <__divmodhi4_neg1>
 ee6:	77 fd       	sbrc	r23, 7
 ee8:	09 d0       	rcall	.+18     	; 0xefc <__divmodhi4_neg2>
 eea:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 eee:	07 fc       	sbrc	r0, 7
 ef0:	05 d0       	rcall	.+10     	; 0xefc <__divmodhi4_neg2>
 ef2:	3e f4       	brtc	.+14     	; 0xf02 <__divmodhi4_exit>

00000ef4 <__divmodhi4_neg1>:
 ef4:	90 95       	com	r25
 ef6:	81 95       	neg	r24
 ef8:	9f 4f       	sbci	r25, 0xFF	; 255
 efa:	08 95       	ret

00000efc <__divmodhi4_neg2>:
 efc:	70 95       	com	r23
 efe:	61 95       	neg	r22
 f00:	7f 4f       	sbci	r23, 0xFF	; 255

00000f02 <__divmodhi4_exit>:
 f02:	08 95       	ret

00000f04 <__tablejump2__>:
 f04:	ee 0f       	add	r30, r30
 f06:	ff 1f       	adc	r31, r31
 f08:	05 90       	lpm	r0, Z+
 f0a:	f4 91       	lpm	r31, Z
 f0c:	e0 2d       	mov	r30, r0
 f0e:	09 94       	ijmp

00000f10 <__udivmodhi4>:
 f10:	aa 1b       	sub	r26, r26
 f12:	bb 1b       	sub	r27, r27
 f14:	51 e1       	ldi	r21, 0x11	; 17
 f16:	07 c0       	rjmp	.+14     	; 0xf26 <__udivmodhi4_ep>

00000f18 <__udivmodhi4_loop>:
 f18:	aa 1f       	adc	r26, r26
 f1a:	bb 1f       	adc	r27, r27
 f1c:	a6 17       	cp	r26, r22
 f1e:	b7 07       	cpc	r27, r23
 f20:	10 f0       	brcs	.+4      	; 0xf26 <__udivmodhi4_ep>
 f22:	a6 1b       	sub	r26, r22
 f24:	b7 0b       	sbc	r27, r23

00000f26 <__udivmodhi4_ep>:
 f26:	88 1f       	adc	r24, r24
 f28:	99 1f       	adc	r25, r25
 f2a:	5a 95       	dec	r21
 f2c:	a9 f7       	brne	.-22     	; 0xf18 <__udivmodhi4_loop>
 f2e:	80 95       	com	r24
 f30:	90 95       	com	r25
 f32:	bc 01       	movw	r22, r24
 f34:	cd 01       	movw	r24, r26
 f36:	08 95       	ret

00000f38 <_exit>:
 f38:	f8 94       	cli

00000f3a <__stop_program>:
 f3a:	ff cf       	rjmp	.-2      	; 0xf3a <__stop_program>
