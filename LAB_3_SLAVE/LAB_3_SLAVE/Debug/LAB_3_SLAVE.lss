
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf9  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a1  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00001efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060e  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_21>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0e 01       	movw	r0, r28
  6a:	15 01       	movw	r2, r10
  6c:	1c 01       	movw	r2, r24
  6e:	26 01       	movw	r4, r12
  70:	30 01       	movw	r6, r0
  72:	3a 01       	movw	r6, r20
  74:	44 01       	movw	r8, r8

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a9 31       	cpi	r26, 0x19	; 25
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  96:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <ADC_Init>:
volatile uint8_t total_channels = 0;
volatile uint8_t *channels_to_read;

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADIE);  // Habilitar ADC, interrupción y configurar preescalador a 128
  a4:	8f e8       	ldi	r24, 0x8F	; 143
  a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	sei();  // Habilitar interrupciones globales
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <ADC_Start_Conversion>:
}

void ADC_Start_Conversion(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  ae:	ec e7       	ldi	r30, 0x7C	; 124
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	98 7f       	andi	r25, 0xF8	; 248
  b6:	87 70       	andi	r24, 0x07	; 7
  b8:	89 2b       	or	r24, r25
  ba:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <ADC_Get_Result>:
}

uint16_t ADC_Get_Result(uint8_t channel) {
	return adc_results[channel];
  c8:	e8 2f       	mov	r30, r24
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	eb 5f       	subi	r30, 0xFB	; 251
  d2:	fe 4f       	sbci	r31, 0xFE	; 254
  d4:	80 81       	ld	r24, Z
  d6:	91 81       	ldd	r25, Z+1	; 0x01
}
  d8:	08 95       	ret

000000da <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	7c 01       	movw	r14, r24
  ec:	6b 01       	movw	r12, r22
  ee:	d4 2f       	mov	r29, r20
	channels_to_read = channels;
  f0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <channels_to_read+0x1>
  f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <channels_to_read>
	total_channels = num_channels;
  f8:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
	current_channel = 0;
  fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <current_channel>
	ADC_Start_Conversion(channels_to_read[current_channel]);
 100:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
 104:	f7 01       	movw	r30, r14
 106:	e8 0f       	add	r30, r24
 108:	f1 1d       	adc	r31, r1
 10a:	80 81       	ld	r24, Z
 10c:	0e 94 57 00 	call	0xae	; 0xae <ADC_Start_Conversion>
	// Esperar hasta que se lean todos los canales
	while (current_channel < total_channels);
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <current_channel>
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	98 17       	cp	r25, r24
 11a:	d0 f3       	brcs	.-12     	; 0x110 <ADC_Read_Multiple+0x36>
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	11 c0       	rjmp	.+34     	; 0x142 <ADC_Read_Multiple+0x68>
	// Copiar los resultados a la matriz de resultados proporcionada
	for (uint8_t i = 0; i < num_channels; i++) {
		results[i] = ADC_Get_Result(channels[i]);
 120:	8c 2f       	mov	r24, r28
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	8c 01       	movw	r16, r24
 126:	00 0f       	add	r16, r16
 128:	11 1f       	adc	r17, r17
 12a:	0c 0d       	add	r16, r12
 12c:	1d 1d       	adc	r17, r13
 12e:	f7 01       	movw	r30, r14
 130:	e8 0f       	add	r30, r24
 132:	f9 1f       	adc	r31, r25
 134:	80 81       	ld	r24, Z
 136:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_Get_Result>
 13a:	f8 01       	movw	r30, r16
 13c:	91 83       	std	Z+1, r25	; 0x01
 13e:	80 83       	st	Z, r24
	current_channel = 0;
	ADC_Start_Conversion(channels_to_read[current_channel]);
	// Esperar hasta que se lean todos los canales
	while (current_channel < total_channels);
	// Copiar los resultados a la matriz de resultados proporcionada
	for (uint8_t i = 0; i < num_channels; i++) {
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	cd 17       	cp	r28, r29
 144:	68 f3       	brcs	.-38     	; 0x120 <ADC_Read_Multiple+0x46>
		results[i] = ADC_Get_Result(channels[i]);
	}
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	08 95       	ret

00000158 <__vector_21>:

// Definir la ISR del ADC en la implementación de la librería
ISR(ADC_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	// Guardar el resultado de la conversión en el array correspondiente
	adc_results[channels_to_read[current_channel]] = ADC;
 17a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <channels_to_read>
 17e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <channels_to_read+0x1>
 182:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
 186:	f9 01       	movw	r30, r18
 188:	e8 0f       	add	r30, r24
 18a:	f1 1d       	adc	r31, r1
 18c:	e0 81       	ld	r30, Z
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 194:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	eb 5f       	subi	r30, 0xFB	; 251
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	91 83       	std	Z+1, r25	; 0x01
 1a2:	80 83       	st	Z, r24
	// Incrementar el índice del canal actual
	current_channel++;
 1a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
	// Iniciar la conversión del siguiente canal si hay más canales
	if (current_channel < total_channels) {
 1ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <current_channel>
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	98 17       	cp	r25, r24
 1b8:	40 f4       	brcc	.+16     	; 0x1ca <__vector_21+0x72>
		ADC_Start_Conversion(channels_to_read[current_channel]);
 1ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
 1be:	f9 01       	movw	r30, r18
 1c0:	e8 0f       	add	r30, r24
 1c2:	f1 1d       	adc	r31, r1
 1c4:	80 81       	ld	r24, Z
 1c6:	0e 94 57 00 	call	0xae	; 0xae <ADC_Start_Conversion>
	}
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <SPI_init>:
#define F_CPU 16000000UL
#include "SPI.h"

void SPI_init(SPI_TYPE sType, SPI_Data_Order sDataOrder, SPI_Clock_Polarity sClockPolarity, SPI_Clock_Phase sClockPhase) {
 1ec:	e8 2f       	mov	r30, r24
	//PB2 -> SS
	//PB3 -> SS
	//PB4 -> SS
	//PB5 -> SS
	
	if (sType & 0x10) { //Verificar si se configura como maestro..
 1ee:	84 ff       	sbrs	r24, 4
 1f0:	52 c0       	rjmp	.+164    	; 0x296 <SPI_init+0xaa>
		// Configurar como maestro
		DDRB |= (1 << DDB3) | (1 << DDB5) | (1 << DDB2); // MOSI, SCK, SS como salidas
 1f2:	84 b1       	in	r24, 0x04	; 4
 1f4:	8c 62       	ori	r24, 0x2C	; 44
 1f6:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << DDB4); // MISO como entrada
 1f8:	84 b1       	in	r24, 0x04	; 4
 1fa:	8f 7e       	andi	r24, 0xEF	; 239
 1fc:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1 << MSTR); // Habilitar modo maestro
 1fe:	8c b5       	in	r24, 0x2c	; 44
 200:	80 61       	ori	r24, 0x10	; 16
 202:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
 204:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 206:	8e 2f       	mov	r24, r30
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	87 30       	cpi	r24, 0x07	; 7
 20c:	91 05       	cpc	r25, r1
 20e:	08 f0       	brcs	.+2      	; 0x212 <SPI_init+0x26>
 210:	4b c0       	rjmp	.+150    	; 0x2a8 <SPI_init+0xbc>
 212:	fc 01       	movw	r30, r24
 214:	ec 5c       	subi	r30, 0xCC	; 204
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__tablejump2__>
			case 0: //DIV2
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 21c:	8c b5       	in	r24, 0x2c	; 44
 21e:	8c 7f       	andi	r24, 0xFC	; 252
 220:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 222:	8d b5       	in	r24, 0x2d	; 45
 224:	81 60       	ori	r24, 0x01	; 1
 226:	8d bd       	out	0x2d, r24	; 45
			break;
 228:	3f c0       	rjmp	.+126    	; 0x2a8 <SPI_init+0xbc>
			case 1: //DIV4
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 22a:	8c b5       	in	r24, 0x2c	; 44
 22c:	8c 7f       	andi	r24, 0xFC	; 252
 22e:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 230:	8d b5       	in	r24, 0x2d	; 45
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	8d bd       	out	0x2d, r24	; 45
			break;
 236:	38 c0       	rjmp	.+112    	; 0x2a8 <SPI_init+0xbc>
			case 2: //DIV8
				SPCR |= (1<<SPR0);
 238:	8c b5       	in	r24, 0x2c	; 44
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 23e:	8c b5       	in	r24, 0x2c	; 44
 240:	8d 7f       	andi	r24, 0xFD	; 253
 242:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 244:	8d b5       	in	r24, 0x2d	; 45
 246:	81 60       	ori	r24, 0x01	; 1
 248:	8d bd       	out	0x2d, r24	; 45
			break;
 24a:	2e c0       	rjmp	.+92     	; 0x2a8 <SPI_init+0xbc>
			case 3: //DIV16
				SPCR |= (1<<SPR0);
 24c:	8c b5       	in	r24, 0x2c	; 44
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 252:	8c b5       	in	r24, 0x2c	; 44
 254:	8d 7f       	andi	r24, 0xFD	; 253
 256:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 258:	8d b5       	in	r24, 0x2d	; 45
 25a:	8e 7f       	andi	r24, 0xFE	; 254
 25c:	8d bd       	out	0x2d, r24	; 45
			break;
 25e:	24 c0       	rjmp	.+72     	; 0x2a8 <SPI_init+0xbc>
			case 4: //DIV32
				SPCR &= ~(1<<SPR0);
 260:	8c b5       	in	r24, 0x2c	; 44
 262:	8e 7f       	andi	r24, 0xFE	; 254
 264:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 266:	8c b5       	in	r24, 0x2c	; 44
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 26c:	8d b5       	in	r24, 0x2d	; 45
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	8d bd       	out	0x2d, r24	; 45
			break;
 272:	1a c0       	rjmp	.+52     	; 0x2a8 <SPI_init+0xbc>
			case 5: //DIV64
				SPCR &= ~(1<<SPR0);
 274:	8c b5       	in	r24, 0x2c	; 44
 276:	8e 7f       	andi	r24, 0xFE	; 254
 278:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 27a:	8c b5       	in	r24, 0x2c	; 44
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 280:	8d b5       	in	r24, 0x2d	; 45
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	8d bd       	out	0x2d, r24	; 45
			break;
 286:	10 c0       	rjmp	.+32     	; 0x2a8 <SPI_init+0xbc>
			case 6: //DIV128
				SPCR |= (1<<SPR0)|(1<<SPR1);
 288:	8c b5       	in	r24, 0x2c	; 44
 28a:	83 60       	ori	r24, 0x03	; 3
 28c:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 28e:	8d b5       	in	r24, 0x2d	; 45
 290:	8e 7f       	andi	r24, 0xFE	; 254
 292:	8d bd       	out	0x2d, r24	; 45
			break;
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <SPI_init+0xbc>
		}
		
		} else {
		// Configurar como esclavo
		DDRB |= (1 << DDB4); // MISO como salida
 296:	84 b1       	in	r24, 0x04	; 4
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1 << DDB3) | (1 << DDB5) | (1 << DDB2)); // MOSI, SCK, SS como entradas
 29c:	84 b1       	in	r24, 0x04	; 4
 29e:	83 7d       	andi	r24, 0xD3	; 211
 2a0:	84 b9       	out	0x04, r24	; 4
		
		SPCR &= ~(1 << MSTR); // Habilitar SPI, modo esclavo
 2a2:	8c b5       	in	r24, 0x2c	; 44
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	8c bd       	out	0x2c, r24	; 44
	}
	// Habilitar Data Order, Clock Polarity, Clock Phase
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 2a8:	8c b5       	in	r24, 0x2c	; 44
 2aa:	46 2b       	or	r20, r22
 2ac:	24 2b       	or	r18, r20
 2ae:	28 2b       	or	r18, r24
 2b0:	20 64       	ori	r18, 0x40	; 64
 2b2:	2c bd       	out	0x2c, r18	; 44
 2b4:	08 95       	ret

000002b6 <SPI_send>:
}

void SPI_send(uint8_t data) {
	SPDR = data;
 2b6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Esperar a que la transmisión termine
 2b8:	0d b4       	in	r0, 0x2d	; 45
 2ba:	07 fe       	sbrs	r0, 7
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <SPI_send+0x2>
}
 2be:	08 95       	ret

000002c0 <main>:
volatile uint16_t adc_values[2];  // Valores de los ADCs

void refreshPORT(uint8_t valor);

int main(void)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0x6>
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	// Configurar Pines como salida
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7);
 2ca:	8a b1       	in	r24, 0x0a	; 10
 2cc:	8c 6f       	ori	r24, 0xFC	; 252
 2ce:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB0)|(1<<DDB1);
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	83 60       	ori	r24, 0x03	; 3
 2d4:	84 b9       	out	0x04, r24	; 4
	
	PORTD &= ~((1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));
 2d6:	8b b1       	in	r24, 0x0b	; 11
 2d8:	83 70       	andi	r24, 0x03	; 3
 2da:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1<<DDB0)|(1<<DDB1));
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	8c 7f       	andi	r24, 0xFC	; 252
 2e0:	85 b9       	out	0x05, r24	; 5
	
	SPI_init(SPI_SLAVE_SS, SPI_Data_Order_MSB, SPI_Clock_IDLE_LOW, SPI_clock_First_EDGE);
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e4       	ldi	r24, 0x40	; 64
 2ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_init>
	ADC_Init();
 2ee:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Init>
	SPCR |= (1<<SPIE); // Activar ISR SPI
 2f2:	8c b5       	in	r24, 0x2c	; 44
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	8c bd       	out	0x2c, r24	; 44
	sei();
 2f8:	78 94       	sei
	
	// Iniciar la primera conversión en los canales 6 y 7
	uint8_t channels[] = {6, 7};
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	8a 83       	std	Y+2, r24	; 0x02
	ADC_Read_Multiple(channels, adc_values, 2);
 302:	42 e0       	ldi	r20, 0x02	; 2
 304:	65 e1       	ldi	r22, 0x15	; 21
 306:	71 e0       	ldi	r23, 0x01	; 1
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Read_Multiple>
 310:	ff cf       	rjmp	.-2      	; 0x310 <main+0x50>

00000312 <__vector_17>:
	{
		// El resultado de la conversión ADC se actualizará en la ISR del ADC
	}
}

ISR(SPI_STC_vect) {
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	valorSPI = SPDR;
 334:	8e b5       	in	r24, 0x2e	; 46
 336:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valorSPI>
	if (valorSPI == 'c') {
 33a:	83 36       	cpi	r24, 0x63	; 99
 33c:	31 f4       	brne	.+12     	; 0x34a <__vector_17+0x38>
		SPI_send(adc_values[1]);  // Enviar el valor del canal 7 (índice 1 en el array)
 33e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <adc_values+0x2>
 342:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <adc_values+0x3>
 346:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_send>
	}
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__tablejump2__>:
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	05 90       	lpm	r0, Z+
 372:	f4 91       	lpm	r31, Z
 374:	e0 2d       	mov	r30, r0
 376:	09 94       	ijmp

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
