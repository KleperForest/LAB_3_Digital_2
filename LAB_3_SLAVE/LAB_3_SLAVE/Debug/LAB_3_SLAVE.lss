
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  00000d0e  00000da2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800264  00800264  00000f06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000beb  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d9  00000000  00000000  00001c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005aa  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000362  00000000  00000000  000030fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 36       	cpi	r26, 0x64	; 100
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e6       	ldi	r26, 0x64	; 100
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3a       	cpi	r26, 0xAE	; 174
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  9e:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  dc:	08 95       	ret

000000de <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	6c 01       	movw	r12, r24
  f0:	7b 01       	movw	r14, r22
  f2:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < num_channels; i++) {
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	11 c0       	rjmp	.+34     	; 0x11a <ADC_Read_Multiple+0x3c>
		results[i] = ADC_Read(channels[i]);
  f8:	8c 2f       	mov	r24, r28
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	8c 01       	movw	r16, r24
  fe:	00 0f       	add	r16, r16
 100:	11 1f       	adc	r17, r17
 102:	0e 0d       	add	r16, r14
 104:	1f 1d       	adc	r17, r15
 106:	f6 01       	movw	r30, r12
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	80 81       	ld	r24, Z
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Read>
 112:	f8 01       	movw	r30, r16
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
	// Devuelve el resultado de la conversión
	return ADC;
}

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
	for (uint8_t i = 0; i < num_channels; i++) {
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	cd 17       	cp	r28, r29
 11c:	68 f3       	brcs	.-38     	; 0xf8 <ADC_Read_Multiple+0x1a>
		results[i] = ADC_Read(channels[i]);
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	08 95       	ret

00000130 <UART_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "UART.h"

void UART_Init(unsigned long baud_rate) {
 130:	9b 01       	movw	r18, r22
 132:	ac 01       	movw	r20, r24
	unsigned int ubrr = F_CPU / 16 / baud_rate - 1;
 134:	60 e4       	ldi	r22, 0x40	; 64
 136:	72 e4       	ldi	r23, 0x42	; 66
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__udivmodsi4>
 140:	21 50       	subi	r18, 0x01	; 1
 142:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 144:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 148:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar el receptor y el transmisor
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar el formato de datos: 8 bits
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 158:	08 95       	ret

0000015a <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
 15a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15e:	95 ff       	sbrs	r25, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <UART_Transmit>
	UDR0 = data;  // Enviar el dato
 162:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 166:	08 95       	ret

00000168 <UART_Receive>:
}

unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
 168:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16c:	88 23       	and	r24, r24
 16e:	e4 f7       	brge	.-8      	; 0x168 <UART_Receive>
	return UDR0;  // Leer el dato recibido
 170:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 174:	08 95       	ret

00000176 <UART_TransmitString>:

void UART_TransmitString(const char *str) {
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	while (*str) {
 17c:	03 c0       	rjmp	.+6      	; 0x184 <UART_TransmitString+0xe>
		UART_Transmit(*str++);
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_Transmit>
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
	return UDR0;  // Leer el dato recibido
}

void UART_TransmitString(const char *str) {
	while (*str) {
 184:	88 81       	ld	r24, Y
 186:	81 11       	cpse	r24, r1
 188:	fa cf       	rjmp	.-12     	; 0x17e <UART_TransmitString+0x8>
		UART_Transmit(*str++);
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <display_menu>:
////////////////////////////////////////////////////
// Funciones auxiliares
////////////////////////////////////////////////////

void display_menu(void) {
	UART_TransmitString("\r\n***** Menu *****\r\n");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("1. Mostrar valores de ADC\r\n");
 198:	85 e1       	ldi	r24, 0x15	; 21
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("2. Incrementar contador (+)\r\n");
 1a0:	81 e3       	ldi	r24, 0x31	; 49
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("3. Decrementar contador (-)\r\n");
 1a8:	8f e4       	ldi	r24, 0x4F	; 79
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("4. Mostrar valor del contador\r\n");
 1b0:	8d e6       	ldi	r24, 0x6D	; 109
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("*****************\r\n");
 1b8:	8d e8       	ldi	r24, 0x8D	; 141
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("Seleccione una opción: ");
 1c0:	81 ea       	ldi	r24, 0xA1	; 161
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
 1c8:	08 95       	ret

000001ca <process_command>:
}

void process_command(char command) {
	switch (command) {
 1ca:	8d 32       	cpi	r24, 0x2D	; 45
 1cc:	e1 f1       	breq	.+120    	; 0x246 <process_command+0x7c>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <process_command+0xc>
 1d0:	8b 32       	cpi	r24, 0x2B	; 43
 1d2:	59 f1       	breq	.+86     	; 0x22a <process_command+0x60>
 1d4:	66 c0       	rjmp	.+204    	; 0x2a2 <process_command+0xd8>
 1d6:	81 33       	cpi	r24, 0x31	; 49
 1d8:	21 f0       	breq	.+8      	; 0x1e2 <process_command+0x18>
 1da:	84 33       	cpi	r24, 0x34	; 52
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <process_command+0x16>
 1de:	41 c0       	rjmp	.+130    	; 0x262 <process_command+0x98>
 1e0:	60 c0       	rjmp	.+192    	; 0x2a2 <process_command+0xd8>
		case '1':
		snprintf(buffer, sizeof(buffer), "Valores ADC - ADC6: %u, ADC7: %u\r\n", adc_results[1], adc_results[0]);
 1e2:	ea ea       	ldi	r30, 0xAA	; 170
 1e4:	f2 e0       	ldi	r31, 0x02	; 2
 1e6:	81 81       	ldd	r24, Z+1	; 0x01
 1e8:	8f 93       	push	r24
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 93       	push	r24
 1ee:	83 81       	ldd	r24, Z+3	; 0x03
 1f0:	8f 93       	push	r24
 1f2:	82 81       	ldd	r24, Z+2	; 0x02
 1f4:	8f 93       	push	r24
 1f6:	89 eb       	ldi	r24, 0xB9	; 185
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	9f 93       	push	r25
 1fc:	8f 93       	push	r24
 1fe:	1f 92       	push	r1
 200:	80 e4       	ldi	r24, 0x40	; 64
 202:	8f 93       	push	r24
 204:	88 e6       	ldi	r24, 0x68	; 104
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	9f 93       	push	r25
 20a:	8f 93       	push	r24
 20c:	0e 94 8d 03 	call	0x71a	; 0x71a <snprintf>
		UART_TransmitString(buffer);
 210:	88 e6       	ldi	r24, 0x68	; 104
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
		break;
 218:	8d b7       	in	r24, 0x3d	; 61
 21a:	9e b7       	in	r25, 0x3e	; 62
 21c:	0a 96       	adiw	r24, 0x0a	; 10
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	9e bf       	out	0x3e, r25	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	8d bf       	out	0x3d, r24	; 61
 228:	40 c0       	rjmp	.+128    	; 0x2aa <process_command+0xe0>
		case '+':
		counter++;
 22a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
 22e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__data_end+0x1>
 238:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__data_end>
		UART_TransmitString("Contador incrementado.\r\n");
 23c:	8c ed       	ldi	r24, 0xDC	; 220
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
		break;
 244:	32 c0       	rjmp	.+100    	; 0x2aa <process_command+0xe0>
		case '-':
		counter--;
 246:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
 24a:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__data_end+0x1>
 254:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__data_end>
		UART_TransmitString("Contador decrementado.\r\n");
 258:	85 ef       	ldi	r24, 0xF5	; 245
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
		break;
 260:	24 c0       	rjmp	.+72     	; 0x2aa <process_command+0xe0>
		case '4':
		snprintf(buffer, sizeof(buffer), "Valor del contador: %d\r\n", counter);
 262:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <__data_end+0x1>
 266:	8f 93       	push	r24
 268:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
 26c:	8f 93       	push	r24
 26e:	8e e0       	ldi	r24, 0x0E	; 14
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	9f 93       	push	r25
 274:	8f 93       	push	r24
 276:	1f 92       	push	r1
 278:	80 e4       	ldi	r24, 0x40	; 64
 27a:	8f 93       	push	r24
 27c:	88 e6       	ldi	r24, 0x68	; 104
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	9f 93       	push	r25
 282:	8f 93       	push	r24
 284:	0e 94 8d 03 	call	0x71a	; 0x71a <snprintf>
		UART_TransmitString(buffer);
 288:	88 e6       	ldi	r24, 0x68	; 104
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
		break;
 290:	8d b7       	in	r24, 0x3d	; 61
 292:	9e b7       	in	r25, 0x3e	; 62
 294:	08 96       	adiw	r24, 0x08	; 8
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	9e bf       	out	0x3e, r25	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	8d bf       	out	0x3d, r24	; 61
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <process_command+0xe0>
		default:
		UART_TransmitString("Opción inválida. Por favor, seleccione una opción válida.\r\n");
 2a2:	87 e2       	ldi	r24, 0x27	; 39
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
		break;
	}
	display_menu();
 2aa:	0e 94 c8 00 	call	0x190	; 0x190 <display_menu>
 2ae:	08 95       	ret

000002b0 <main>:
////////////////////////////////////////////////////
// Programa Principal
////////////////////////////////////////////////////

int main(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <main+0x6>
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
	// Configuración de puertos y periféricos
	DDRD = 0xFF;  // Configura todos los pines del puerto D como salidas
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F;  // Configura los primeros dos pines del puerto B como salidas
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	84 b9       	out	0x04, r24	; 4
	ADC_Init();  // Inicializa el ADC
 2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	UART_Init(BAUD);  // Inicializa la UART
 2c6:	60 e8       	ldi	r22, 0x80	; 128
 2c8:	75 e2       	ldi	r23, 0x25	; 37
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 98 00 	call	0x130	; 0x130 <UART_Init>

	uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	8a 83       	std	Y+2, r24	; 0x02


	// Mostrar el menú inicial en la consola
	display_menu();
 2da:	0e 94 c8 00 	call	0x190	; 0x190 <display_menu>

	while (1)
	{
		// Leer los valores de los ADC
		ADC_Read_Multiple(adc_channels, adc_results, 2);
 2de:	42 e0       	ldi	r20, 0x02	; 2
 2e0:	6a ea       	ldi	r22, 0xAA	; 170
 2e2:	72 e0       	ldi	r23, 0x02	; 2
 2e4:	ce 01       	movw	r24, r28
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	0e 94 6f 00 	call	0xde	; 0xde <ADC_Read_Multiple>
		
		// Convertir los valores ADC a voltaje
		voltage1 = (int)(((adc_results[0] * 5.0) / 1023)*100);
 2ec:	0a ea       	ldi	r16, 0xAA	; 170
 2ee:	12 e0       	ldi	r17, 0x02	; 2
 2f0:	f8 01       	movw	r30, r16
 2f2:	60 81       	ld	r22, Z
 2f4:	71 81       	ldd	r23, Z+1	; 0x01
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__floatunsisf>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 ea       	ldi	r20, 0xA0	; 160
 304:	50 e4       	ldi	r21, 0x40	; 64
 306:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__mulsf3>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 ec       	ldi	r19, 0xC0	; 192
 30e:	4f e7       	ldi	r20, 0x7F	; 127
 310:	54 e4       	ldi	r21, 0x44	; 68
 312:	0e 94 c8 01 	call	0x390	; 0x390 <__divsf3>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	48 ec       	ldi	r20, 0xC8	; 200
 31c:	52 e4       	ldi	r21, 0x42	; 66
 31e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__mulsf3>
 322:	0e 94 3a 02 	call	0x474	; 0x474 <__fixsfsi>
 326:	70 93 67 02 	sts	0x0267, r23	; 0x800267 <voltage1+0x1>
 32a:	60 93 66 02 	sts	0x0266, r22	; 0x800266 <voltage1>
		voltage2 = (int)(((adc_results[1] * 5.0) / 1023)*100);
 32e:	f8 01       	movw	r30, r16
 330:	62 81       	ldd	r22, Z+2	; 0x02
 332:	73 81       	ldd	r23, Z+3	; 0x03
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__floatunsisf>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 ea       	ldi	r20, 0xA0	; 160
 342:	50 e4       	ldi	r21, 0x40	; 64
 344:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__mulsf3>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 ec       	ldi	r19, 0xC0	; 192
 34c:	4f e7       	ldi	r20, 0x7F	; 127
 34e:	54 e4       	ldi	r21, 0x44	; 68
 350:	0e 94 c8 01 	call	0x390	; 0x390 <__divsf3>
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	48 ec       	ldi	r20, 0xC8	; 200
 35a:	52 e4       	ldi	r21, 0x42	; 66
 35c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__mulsf3>
 360:	0e 94 3a 02 	call	0x474	; 0x474 <__fixsfsi>
 364:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <voltage2+0x1>
 368:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <voltage2>


		// Leer y procesar los comandos de la UART
		if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles en el buffer de recepción
 36c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 370:	88 23       	and	r24, r24
 372:	24 f4       	brge	.+8      	; 0x37c <main+0xcc>
			char received_char = UART_Receive();
 374:	0e 94 b4 00 	call	0x168	; 0x168 <UART_Receive>
			process_command(received_char);
 378:	0e 94 e5 00 	call	0x1ca	; 0x1ca <process_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	ff ef       	ldi	r31, 0xFF	; 255
 37e:	29 e6       	ldi	r18, 0x69	; 105
 380:	88 e1       	ldi	r24, 0x18	; 24
 382:	f1 50       	subi	r31, 0x01	; 1
 384:	20 40       	sbci	r18, 0x00	; 0
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0xd2>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0xdc>
 38c:	00 00       	nop
 38e:	a7 cf       	rjmp	.-178    	; 0x2de <main+0x2e>

00000390 <__divsf3>:
 390:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__divsf3x>
 394:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_round>
 398:	0e 94 bd 02 	call	0x57a	; 0x57a <__fp_pscB>
 39c:	58 f0       	brcs	.+22     	; 0x3b4 <__divsf3+0x24>
 39e:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_pscA>
 3a2:	40 f0       	brcs	.+16     	; 0x3b4 <__divsf3+0x24>
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <__divsf3+0x20>
 3a6:	5f 3f       	cpi	r21, 0xFF	; 255
 3a8:	29 f0       	breq	.+10     	; 0x3b4 <__divsf3+0x24>
 3aa:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_inf>
 3ae:	51 11       	cpse	r21, r1
 3b0:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_szero>
 3b4:	0c 94 b3 02 	jmp	0x566	; 0x566 <__fp_nan>

000003b8 <__divsf3x>:
 3b8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fp_split3>
 3bc:	68 f3       	brcs	.-38     	; 0x398 <__divsf3+0x8>

000003be <__divsf3_pse>:
 3be:	99 23       	and	r25, r25
 3c0:	b1 f3       	breq	.-20     	; 0x3ae <__divsf3+0x1e>
 3c2:	55 23       	and	r21, r21
 3c4:	91 f3       	breq	.-28     	; 0x3aa <__divsf3+0x1a>
 3c6:	95 1b       	sub	r25, r21
 3c8:	55 0b       	sbc	r21, r21
 3ca:	bb 27       	eor	r27, r27
 3cc:	aa 27       	eor	r26, r26
 3ce:	62 17       	cp	r22, r18
 3d0:	73 07       	cpc	r23, r19
 3d2:	84 07       	cpc	r24, r20
 3d4:	38 f0       	brcs	.+14     	; 0x3e4 <__divsf3_pse+0x26>
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	44 1f       	adc	r20, r20
 3e0:	aa 1f       	adc	r26, r26
 3e2:	a9 f3       	breq	.-22     	; 0x3ce <__divsf3_pse+0x10>
 3e4:	35 d0       	rcall	.+106    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3e6:	0e 2e       	mov	r0, r30
 3e8:	3a f0       	brmi	.+14     	; 0x3f8 <__divsf3_pse+0x3a>
 3ea:	e0 e8       	ldi	r30, 0x80	; 128
 3ec:	32 d0       	rcall	.+100    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3ee:	91 50       	subi	r25, 0x01	; 1
 3f0:	50 40       	sbci	r21, 0x00	; 0
 3f2:	e6 95       	lsr	r30
 3f4:	00 1c       	adc	r0, r0
 3f6:	ca f7       	brpl	.-14     	; 0x3ea <__divsf3_pse+0x2c>
 3f8:	2b d0       	rcall	.+86     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3fa:	fe 2f       	mov	r31, r30
 3fc:	29 d0       	rcall	.+82     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	bb 1f       	adc	r27, r27
 406:	26 17       	cp	r18, r22
 408:	37 07       	cpc	r19, r23
 40a:	48 07       	cpc	r20, r24
 40c:	ab 07       	cpc	r26, r27
 40e:	b0 e8       	ldi	r27, 0x80	; 128
 410:	09 f0       	breq	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	bb 0b       	sbc	r27, r27
 414:	80 2d       	mov	r24, r0
 416:	bf 01       	movw	r22, r30
 418:	ff 27       	eor	r31, r31
 41a:	93 58       	subi	r25, 0x83	; 131
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	3a f0       	brmi	.+14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 420:	9e 3f       	cpi	r25, 0xFE	; 254
 422:	51 05       	cpc	r21, r1
 424:	78 f0       	brcs	.+30     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 426:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_inf>
 42a:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_szero>
 42e:	5f 3f       	cpi	r21, 0xFF	; 255
 430:	e4 f3       	brlt	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	98 3e       	cpi	r25, 0xE8	; 232
 434:	d4 f3       	brlt	.-12     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 436:	86 95       	lsr	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b7 95       	ror	r27
 43e:	f7 95       	ror	r31
 440:	9f 5f       	subi	r25, 0xFF	; 255
 442:	c9 f7       	brne	.-14     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 444:	88 0f       	add	r24, r24
 446:	91 1d       	adc	r25, r1
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	97 f9       	bld	r25, 7
 44e:	08 95       	ret
 450:	e1 e0       	ldi	r30, 0x01	; 1
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	bb 1f       	adc	r27, r27
 45a:	62 17       	cp	r22, r18
 45c:	73 07       	cpc	r23, r19
 45e:	84 07       	cpc	r24, r20
 460:	ba 07       	cpc	r27, r26
 462:	20 f0       	brcs	.+8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 464:	62 1b       	sub	r22, r18
 466:	73 0b       	sbc	r23, r19
 468:	84 0b       	sbc	r24, r20
 46a:	ba 0b       	sbc	r27, r26
 46c:	ee 1f       	adc	r30, r30
 46e:	88 f7       	brcc	.-30     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 470:	e0 95       	com	r30
 472:	08 95       	ret

00000474 <__fixsfsi>:
 474:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
 478:	68 94       	set
 47a:	b1 11       	cpse	r27, r1
 47c:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_szero>
 480:	08 95       	ret

00000482 <__fixunssfsi>:
 482:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_splitA>
 486:	88 f0       	brcs	.+34     	; 0x4aa <__fixunssfsi+0x28>
 488:	9f 57       	subi	r25, 0x7F	; 127
 48a:	98 f0       	brcs	.+38     	; 0x4b2 <__fixunssfsi+0x30>
 48c:	b9 2f       	mov	r27, r25
 48e:	99 27       	eor	r25, r25
 490:	b7 51       	subi	r27, 0x17	; 23
 492:	b0 f0       	brcs	.+44     	; 0x4c0 <__fixunssfsi+0x3e>
 494:	e1 f0       	breq	.+56     	; 0x4ce <__fixunssfsi+0x4c>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	1a f0       	brmi	.+6      	; 0x4a6 <__fixunssfsi+0x24>
 4a0:	ba 95       	dec	r27
 4a2:	c9 f7       	brne	.-14     	; 0x496 <__fixunssfsi+0x14>
 4a4:	14 c0       	rjmp	.+40     	; 0x4ce <__fixunssfsi+0x4c>
 4a6:	b1 30       	cpi	r27, 0x01	; 1
 4a8:	91 f0       	breq	.+36     	; 0x4ce <__fixunssfsi+0x4c>
 4aa:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_zero>
 4ae:	b1 e0       	ldi	r27, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_zero>
 4b6:	67 2f       	mov	r22, r23
 4b8:	78 2f       	mov	r23, r24
 4ba:	88 27       	eor	r24, r24
 4bc:	b8 5f       	subi	r27, 0xF8	; 248
 4be:	39 f0       	breq	.+14     	; 0x4ce <__fixunssfsi+0x4c>
 4c0:	b9 3f       	cpi	r27, 0xF9	; 249
 4c2:	cc f3       	brlt	.-14     	; 0x4b6 <__fixunssfsi+0x34>
 4c4:	86 95       	lsr	r24
 4c6:	77 95       	ror	r23
 4c8:	67 95       	ror	r22
 4ca:	b3 95       	inc	r27
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__fixunssfsi+0x42>
 4ce:	3e f4       	brtc	.+14     	; 0x4de <__fixunssfsi+0x5c>
 4d0:	90 95       	com	r25
 4d2:	80 95       	com	r24
 4d4:	70 95       	com	r23
 4d6:	61 95       	neg	r22
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	08 95       	ret

000004e0 <__floatunsisf>:
 4e0:	e8 94       	clt
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__floatsisf+0x12>

000004e4 <__floatsisf>:
 4e4:	97 fb       	bst	r25, 7
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__floatsisf+0x12>
 4e8:	90 95       	com	r25
 4ea:	80 95       	com	r24
 4ec:	70 95       	com	r23
 4ee:	61 95       	neg	r22
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	99 23       	and	r25, r25
 4f8:	a9 f0       	breq	.+42     	; 0x524 <__floatsisf+0x40>
 4fa:	f9 2f       	mov	r31, r25
 4fc:	96 e9       	ldi	r25, 0x96	; 150
 4fe:	bb 27       	eor	r27, r27
 500:	93 95       	inc	r25
 502:	f6 95       	lsr	r31
 504:	87 95       	ror	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f1 11       	cpse	r31, r1
 50e:	f8 cf       	rjmp	.-16     	; 0x500 <__floatsisf+0x1c>
 510:	fa f4       	brpl	.+62     	; 0x550 <__floatsisf+0x6c>
 512:	bb 0f       	add	r27, r27
 514:	11 f4       	brne	.+4      	; 0x51a <__floatsisf+0x36>
 516:	60 ff       	sbrs	r22, 0
 518:	1b c0       	rjmp	.+54     	; 0x550 <__floatsisf+0x6c>
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	16 c0       	rjmp	.+44     	; 0x550 <__floatsisf+0x6c>
 524:	88 23       	and	r24, r24
 526:	11 f0       	breq	.+4      	; 0x52c <__floatsisf+0x48>
 528:	96 e9       	ldi	r25, 0x96	; 150
 52a:	11 c0       	rjmp	.+34     	; 0x54e <__floatsisf+0x6a>
 52c:	77 23       	and	r23, r23
 52e:	21 f0       	breq	.+8      	; 0x538 <__floatsisf+0x54>
 530:	9e e8       	ldi	r25, 0x8E	; 142
 532:	87 2f       	mov	r24, r23
 534:	76 2f       	mov	r23, r22
 536:	05 c0       	rjmp	.+10     	; 0x542 <__floatsisf+0x5e>
 538:	66 23       	and	r22, r22
 53a:	71 f0       	breq	.+28     	; 0x558 <__floatsisf+0x74>
 53c:	96 e8       	ldi	r25, 0x86	; 134
 53e:	86 2f       	mov	r24, r22
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	2a f0       	brmi	.+10     	; 0x550 <__floatsisf+0x6c>
 546:	9a 95       	dec	r25
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	da f7       	brpl	.-10     	; 0x546 <__floatsisf+0x62>
 550:	88 0f       	add	r24, r24
 552:	96 95       	lsr	r25
 554:	87 95       	ror	r24
 556:	97 f9       	bld	r25, 7
 558:	08 95       	ret

0000055a <__fp_inf>:
 55a:	97 f9       	bld	r25, 7
 55c:	9f 67       	ori	r25, 0x7F	; 127
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	08 95       	ret

00000566 <__fp_nan>:
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	80 ec       	ldi	r24, 0xC0	; 192
 56a:	08 95       	ret

0000056c <__fp_pscA>:
 56c:	00 24       	eor	r0, r0
 56e:	0a 94       	dec	r0
 570:	16 16       	cp	r1, r22
 572:	17 06       	cpc	r1, r23
 574:	18 06       	cpc	r1, r24
 576:	09 06       	cpc	r0, r25
 578:	08 95       	ret

0000057a <__fp_pscB>:
 57a:	00 24       	eor	r0, r0
 57c:	0a 94       	dec	r0
 57e:	12 16       	cp	r1, r18
 580:	13 06       	cpc	r1, r19
 582:	14 06       	cpc	r1, r20
 584:	05 06       	cpc	r0, r21
 586:	08 95       	ret

00000588 <__fp_round>:
 588:	09 2e       	mov	r0, r25
 58a:	03 94       	inc	r0
 58c:	00 0c       	add	r0, r0
 58e:	11 f4       	brne	.+4      	; 0x594 <__fp_round+0xc>
 590:	88 23       	and	r24, r24
 592:	52 f0       	brmi	.+20     	; 0x5a8 <__fp_round+0x20>
 594:	bb 0f       	add	r27, r27
 596:	40 f4       	brcc	.+16     	; 0x5a8 <__fp_round+0x20>
 598:	bf 2b       	or	r27, r31
 59a:	11 f4       	brne	.+4      	; 0x5a0 <__fp_round+0x18>
 59c:	60 ff       	sbrs	r22, 0
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__fp_round+0x20>
 5a0:	6f 5f       	subi	r22, 0xFF	; 255
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	08 95       	ret

000005aa <__fp_split3>:
 5aa:	57 fd       	sbrc	r21, 7
 5ac:	90 58       	subi	r25, 0x80	; 128
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	59 f0       	breq	.+22     	; 0x5ca <__fp_splitA+0x10>
 5b4:	5f 3f       	cpi	r21, 0xFF	; 255
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__fp_splitA+0x1a>
 5b8:	47 95       	ror	r20

000005ba <__fp_splitA>:
 5ba:	88 0f       	add	r24, r24
 5bc:	97 fb       	bst	r25, 7
 5be:	99 1f       	adc	r25, r25
 5c0:	61 f0       	breq	.+24     	; 0x5da <__fp_splitA+0x20>
 5c2:	9f 3f       	cpi	r25, 0xFF	; 255
 5c4:	79 f0       	breq	.+30     	; 0x5e4 <__fp_splitA+0x2a>
 5c6:	87 95       	ror	r24
 5c8:	08 95       	ret
 5ca:	12 16       	cp	r1, r18
 5cc:	13 06       	cpc	r1, r19
 5ce:	14 06       	cpc	r1, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	f2 cf       	rjmp	.-28     	; 0x5b8 <__fp_split3+0xe>
 5d4:	46 95       	lsr	r20
 5d6:	f1 df       	rcall	.-30     	; 0x5ba <__fp_splitA>
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <__fp_splitA+0x30>
 5da:	16 16       	cp	r1, r22
 5dc:	17 06       	cpc	r1, r23
 5de:	18 06       	cpc	r1, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	f1 cf       	rjmp	.-30     	; 0x5c6 <__fp_splitA+0xc>
 5e4:	86 95       	lsr	r24
 5e6:	71 05       	cpc	r23, r1
 5e8:	61 05       	cpc	r22, r1
 5ea:	08 94       	sec
 5ec:	08 95       	ret

000005ee <__fp_zero>:
 5ee:	e8 94       	clt

000005f0 <__fp_szero>:
 5f0:	bb 27       	eor	r27, r27
 5f2:	66 27       	eor	r22, r22
 5f4:	77 27       	eor	r23, r23
 5f6:	cb 01       	movw	r24, r22
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__mulsf3>:
 5fc:	0e 94 11 03 	call	0x622	; 0x622 <__mulsf3x>
 600:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_round>
 604:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_pscA>
 608:	38 f0       	brcs	.+14     	; 0x618 <__mulsf3+0x1c>
 60a:	0e 94 bd 02 	call	0x57a	; 0x57a <__fp_pscB>
 60e:	20 f0       	brcs	.+8      	; 0x618 <__mulsf3+0x1c>
 610:	95 23       	and	r25, r21
 612:	11 f0       	breq	.+4      	; 0x618 <__mulsf3+0x1c>
 614:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_inf>
 618:	0c 94 b3 02 	jmp	0x566	; 0x566 <__fp_nan>
 61c:	11 24       	eor	r1, r1
 61e:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_szero>

00000622 <__mulsf3x>:
 622:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fp_split3>
 626:	70 f3       	brcs	.-36     	; 0x604 <__mulsf3+0x8>

00000628 <__mulsf3_pse>:
 628:	95 9f       	mul	r25, r21
 62a:	c1 f3       	breq	.-16     	; 0x61c <__mulsf3+0x20>
 62c:	95 0f       	add	r25, r21
 62e:	50 e0       	ldi	r21, 0x00	; 0
 630:	55 1f       	adc	r21, r21
 632:	62 9f       	mul	r22, r18
 634:	f0 01       	movw	r30, r0
 636:	72 9f       	mul	r23, r18
 638:	bb 27       	eor	r27, r27
 63a:	f0 0d       	add	r31, r0
 63c:	b1 1d       	adc	r27, r1
 63e:	63 9f       	mul	r22, r19
 640:	aa 27       	eor	r26, r26
 642:	f0 0d       	add	r31, r0
 644:	b1 1d       	adc	r27, r1
 646:	aa 1f       	adc	r26, r26
 648:	64 9f       	mul	r22, r20
 64a:	66 27       	eor	r22, r22
 64c:	b0 0d       	add	r27, r0
 64e:	a1 1d       	adc	r26, r1
 650:	66 1f       	adc	r22, r22
 652:	82 9f       	mul	r24, r18
 654:	22 27       	eor	r18, r18
 656:	b0 0d       	add	r27, r0
 658:	a1 1d       	adc	r26, r1
 65a:	62 1f       	adc	r22, r18
 65c:	73 9f       	mul	r23, r19
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	62 1f       	adc	r22, r18
 664:	83 9f       	mul	r24, r19
 666:	a0 0d       	add	r26, r0
 668:	61 1d       	adc	r22, r1
 66a:	22 1f       	adc	r18, r18
 66c:	74 9f       	mul	r23, r20
 66e:	33 27       	eor	r19, r19
 670:	a0 0d       	add	r26, r0
 672:	61 1d       	adc	r22, r1
 674:	23 1f       	adc	r18, r19
 676:	84 9f       	mul	r24, r20
 678:	60 0d       	add	r22, r0
 67a:	21 1d       	adc	r18, r1
 67c:	82 2f       	mov	r24, r18
 67e:	76 2f       	mov	r23, r22
 680:	6a 2f       	mov	r22, r26
 682:	11 24       	eor	r1, r1
 684:	9f 57       	subi	r25, 0x7F	; 127
 686:	50 40       	sbci	r21, 0x00	; 0
 688:	9a f0       	brmi	.+38     	; 0x6b0 <__mulsf3_pse+0x88>
 68a:	f1 f0       	breq	.+60     	; 0x6c8 <__mulsf3_pse+0xa0>
 68c:	88 23       	and	r24, r24
 68e:	4a f0       	brmi	.+18     	; 0x6a2 <__mulsf3_pse+0x7a>
 690:	ee 0f       	add	r30, r30
 692:	ff 1f       	adc	r31, r31
 694:	bb 1f       	adc	r27, r27
 696:	66 1f       	adc	r22, r22
 698:	77 1f       	adc	r23, r23
 69a:	88 1f       	adc	r24, r24
 69c:	91 50       	subi	r25, 0x01	; 1
 69e:	50 40       	sbci	r21, 0x00	; 0
 6a0:	a9 f7       	brne	.-22     	; 0x68c <__mulsf3_pse+0x64>
 6a2:	9e 3f       	cpi	r25, 0xFE	; 254
 6a4:	51 05       	cpc	r21, r1
 6a6:	80 f0       	brcs	.+32     	; 0x6c8 <__mulsf3_pse+0xa0>
 6a8:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_inf>
 6ac:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_szero>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	e4 f3       	brlt	.-8      	; 0x6ac <__mulsf3_pse+0x84>
 6b4:	98 3e       	cpi	r25, 0xE8	; 232
 6b6:	d4 f3       	brlt	.-12     	; 0x6ac <__mulsf3_pse+0x84>
 6b8:	86 95       	lsr	r24
 6ba:	77 95       	ror	r23
 6bc:	67 95       	ror	r22
 6be:	b7 95       	ror	r27
 6c0:	f7 95       	ror	r31
 6c2:	e7 95       	ror	r30
 6c4:	9f 5f       	subi	r25, 0xFF	; 255
 6c6:	c1 f7       	brne	.-16     	; 0x6b8 <__mulsf3_pse+0x90>
 6c8:	fe 2b       	or	r31, r30
 6ca:	88 0f       	add	r24, r24
 6cc:	91 1d       	adc	r25, r1
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret

000006d6 <__udivmodsi4>:
 6d6:	a1 e2       	ldi	r26, 0x21	; 33
 6d8:	1a 2e       	mov	r1, r26
 6da:	aa 1b       	sub	r26, r26
 6dc:	bb 1b       	sub	r27, r27
 6de:	fd 01       	movw	r30, r26
 6e0:	0d c0       	rjmp	.+26     	; 0x6fc <__udivmodsi4_ep>

000006e2 <__udivmodsi4_loop>:
 6e2:	aa 1f       	adc	r26, r26
 6e4:	bb 1f       	adc	r27, r27
 6e6:	ee 1f       	adc	r30, r30
 6e8:	ff 1f       	adc	r31, r31
 6ea:	a2 17       	cp	r26, r18
 6ec:	b3 07       	cpc	r27, r19
 6ee:	e4 07       	cpc	r30, r20
 6f0:	f5 07       	cpc	r31, r21
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <__udivmodsi4_ep>
 6f4:	a2 1b       	sub	r26, r18
 6f6:	b3 0b       	sbc	r27, r19
 6f8:	e4 0b       	sbc	r30, r20
 6fa:	f5 0b       	sbc	r31, r21

000006fc <__udivmodsi4_ep>:
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	1a 94       	dec	r1
 706:	69 f7       	brne	.-38     	; 0x6e2 <__udivmodsi4_loop>
 708:	60 95       	com	r22
 70a:	70 95       	com	r23
 70c:	80 95       	com	r24
 70e:	90 95       	com	r25
 710:	9b 01       	movw	r18, r22
 712:	ac 01       	movw	r20, r24
 714:	bd 01       	movw	r22, r26
 716:	cf 01       	movw	r24, r30
 718:	08 95       	ret

0000071a <snprintf>:
 71a:	ae e0       	ldi	r26, 0x0E	; 14
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	e3 e9       	ldi	r30, 0x93	; 147
 720:	f3 e0       	ldi	r31, 0x03	; 3
 722:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__prologue_saves__+0x1c>
 726:	0d 89       	ldd	r16, Y+21	; 0x15
 728:	1e 89       	ldd	r17, Y+22	; 0x16
 72a:	8f 89       	ldd	r24, Y+23	; 0x17
 72c:	98 8d       	ldd	r25, Y+24	; 0x18
 72e:	26 e0       	ldi	r18, 0x06	; 6
 730:	2c 83       	std	Y+4, r18	; 0x04
 732:	1a 83       	std	Y+2, r17	; 0x02
 734:	09 83       	std	Y+1, r16	; 0x01
 736:	97 ff       	sbrs	r25, 7
 738:	02 c0       	rjmp	.+4      	; 0x73e <snprintf+0x24>
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e8       	ldi	r25, 0x80	; 128
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	9e 83       	std	Y+6, r25	; 0x06
 742:	8d 83       	std	Y+5, r24	; 0x05
 744:	ae 01       	movw	r20, r28
 746:	45 5e       	subi	r20, 0xE5	; 229
 748:	5f 4f       	sbci	r21, 0xFF	; 255
 74a:	69 8d       	ldd	r22, Y+25	; 0x19
 74c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 74e:	ce 01       	movw	r24, r28
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	0e 94 bd 03 	call	0x77a	; 0x77a <vfprintf>
 756:	4d 81       	ldd	r20, Y+5	; 0x05
 758:	5e 81       	ldd	r21, Y+6	; 0x06
 75a:	57 fd       	sbrc	r21, 7
 75c:	0a c0       	rjmp	.+20     	; 0x772 <snprintf+0x58>
 75e:	2f 81       	ldd	r18, Y+7	; 0x07
 760:	38 85       	ldd	r19, Y+8	; 0x08
 762:	42 17       	cp	r20, r18
 764:	53 07       	cpc	r21, r19
 766:	0c f4       	brge	.+2      	; 0x76a <snprintf+0x50>
 768:	9a 01       	movw	r18, r20
 76a:	f8 01       	movw	r30, r16
 76c:	e2 0f       	add	r30, r18
 76e:	f3 1f       	adc	r31, r19
 770:	10 82       	st	Z, r1
 772:	2e 96       	adiw	r28, 0x0e	; 14
 774:	e4 e0       	ldi	r30, 0x04	; 4
 776:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__epilogue_restores__+0x1c>

0000077a <vfprintf>:
 77a:	ab e0       	ldi	r26, 0x0B	; 11
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	e3 ec       	ldi	r30, 0xC3	; 195
 780:	f3 e0       	ldi	r31, 0x03	; 3
 782:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__prologue_saves__>
 786:	6c 01       	movw	r12, r24
 788:	7b 01       	movw	r14, r22
 78a:	8a 01       	movw	r16, r20
 78c:	fc 01       	movw	r30, r24
 78e:	17 82       	std	Z+7, r1	; 0x07
 790:	16 82       	std	Z+6, r1	; 0x06
 792:	83 81       	ldd	r24, Z+3	; 0x03
 794:	81 ff       	sbrs	r24, 1
 796:	cc c1       	rjmp	.+920    	; 0xb30 <__stack+0x231>
 798:	ce 01       	movw	r24, r28
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	3c 01       	movw	r6, r24
 79e:	f6 01       	movw	r30, r12
 7a0:	93 81       	ldd	r25, Z+3	; 0x03
 7a2:	f7 01       	movw	r30, r14
 7a4:	93 fd       	sbrc	r25, 3
 7a6:	85 91       	lpm	r24, Z+
 7a8:	93 ff       	sbrs	r25, 3
 7aa:	81 91       	ld	r24, Z+
 7ac:	7f 01       	movw	r14, r30
 7ae:	88 23       	and	r24, r24
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <vfprintf+0x3a>
 7b2:	ba c1       	rjmp	.+884    	; 0xb28 <__stack+0x229>
 7b4:	85 32       	cpi	r24, 0x25	; 37
 7b6:	39 f4       	brne	.+14     	; 0x7c6 <vfprintf+0x4c>
 7b8:	93 fd       	sbrc	r25, 3
 7ba:	85 91       	lpm	r24, Z+
 7bc:	93 ff       	sbrs	r25, 3
 7be:	81 91       	ld	r24, Z+
 7c0:	7f 01       	movw	r14, r30
 7c2:	85 32       	cpi	r24, 0x25	; 37
 7c4:	29 f4       	brne	.+10     	; 0x7d0 <vfprintf+0x56>
 7c6:	b6 01       	movw	r22, r12
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 7ce:	e7 cf       	rjmp	.-50     	; 0x79e <vfprintf+0x24>
 7d0:	91 2c       	mov	r9, r1
 7d2:	21 2c       	mov	r2, r1
 7d4:	31 2c       	mov	r3, r1
 7d6:	ff e1       	ldi	r31, 0x1F	; 31
 7d8:	f3 15       	cp	r31, r3
 7da:	d8 f0       	brcs	.+54     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7dc:	8b 32       	cpi	r24, 0x2B	; 43
 7de:	79 f0       	breq	.+30     	; 0x7fe <vfprintf+0x84>
 7e0:	38 f4       	brcc	.+14     	; 0x7f0 <vfprintf+0x76>
 7e2:	80 32       	cpi	r24, 0x20	; 32
 7e4:	79 f0       	breq	.+30     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e6:	83 32       	cpi	r24, 0x23	; 35
 7e8:	a1 f4       	brne	.+40     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ea:	23 2d       	mov	r18, r3
 7ec:	20 61       	ori	r18, 0x10	; 16
 7ee:	1d c0       	rjmp	.+58     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7f0:	8d 32       	cpi	r24, 0x2D	; 45
 7f2:	61 f0       	breq	.+24     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f4:	80 33       	cpi	r24, 0x30	; 48
 7f6:	69 f4       	brne	.+26     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f8:	23 2d       	mov	r18, r3
 7fa:	21 60       	ori	r18, 0x01	; 1
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7fe:	83 2d       	mov	r24, r3
 800:	82 60       	ori	r24, 0x02	; 2
 802:	38 2e       	mov	r3, r24
 804:	e3 2d       	mov	r30, r3
 806:	e4 60       	ori	r30, 0x04	; 4
 808:	3e 2e       	mov	r3, r30
 80a:	2a c0       	rjmp	.+84     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 80c:	f3 2d       	mov	r31, r3
 80e:	f8 60       	ori	r31, 0x08	; 8
 810:	1d c0       	rjmp	.+58     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 812:	37 fc       	sbrc	r3, 7
 814:	2d c0       	rjmp	.+90     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 816:	20 ed       	ldi	r18, 0xD0	; 208
 818:	28 0f       	add	r18, r24
 81a:	2a 30       	cpi	r18, 0x0A	; 10
 81c:	40 f0       	brcs	.+16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81e:	8e 32       	cpi	r24, 0x2E	; 46
 820:	b9 f4       	brne	.+46     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 822:	36 fc       	sbrc	r3, 6
 824:	81 c1       	rjmp	.+770    	; 0xb28 <__stack+0x229>
 826:	23 2d       	mov	r18, r3
 828:	20 64       	ori	r18, 0x40	; 64
 82a:	32 2e       	mov	r3, r18
 82c:	19 c0       	rjmp	.+50     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 82e:	36 fe       	sbrs	r3, 6
 830:	06 c0       	rjmp	.+12     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 832:	8a e0       	ldi	r24, 0x0A	; 10
 834:	98 9e       	mul	r9, r24
 836:	20 0d       	add	r18, r0
 838:	11 24       	eor	r1, r1
 83a:	92 2e       	mov	r9, r18
 83c:	11 c0       	rjmp	.+34     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 83e:	ea e0       	ldi	r30, 0x0A	; 10
 840:	2e 9e       	mul	r2, r30
 842:	20 0d       	add	r18, r0
 844:	11 24       	eor	r1, r1
 846:	22 2e       	mov	r2, r18
 848:	f3 2d       	mov	r31, r3
 84a:	f0 62       	ori	r31, 0x20	; 32
 84c:	3f 2e       	mov	r3, r31
 84e:	08 c0       	rjmp	.+16     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 850:	8c 36       	cpi	r24, 0x6C	; 108
 852:	21 f4       	brne	.+8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 854:	83 2d       	mov	r24, r3
 856:	80 68       	ori	r24, 0x80	; 128
 858:	38 2e       	mov	r3, r24
 85a:	02 c0       	rjmp	.+4      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 85c:	88 36       	cpi	r24, 0x68	; 104
 85e:	41 f4       	brne	.+16     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 860:	f7 01       	movw	r30, r14
 862:	93 fd       	sbrc	r25, 3
 864:	85 91       	lpm	r24, Z+
 866:	93 ff       	sbrs	r25, 3
 868:	81 91       	ld	r24, Z+
 86a:	7f 01       	movw	r14, r30
 86c:	81 11       	cpse	r24, r1
 86e:	b3 cf       	rjmp	.-154    	; 0x7d6 <vfprintf+0x5c>
 870:	98 2f       	mov	r25, r24
 872:	9f 7d       	andi	r25, 0xDF	; 223
 874:	95 54       	subi	r25, 0x45	; 69
 876:	93 30       	cpi	r25, 0x03	; 3
 878:	28 f4       	brcc	.+10     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 87a:	0c 5f       	subi	r16, 0xFC	; 252
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	9f e3       	ldi	r25, 0x3F	; 63
 880:	99 83       	std	Y+1, r25	; 0x01
 882:	0d c0       	rjmp	.+26     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 884:	83 36       	cpi	r24, 0x63	; 99
 886:	31 f0       	breq	.+12     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 888:	83 37       	cpi	r24, 0x73	; 115
 88a:	71 f0       	breq	.+28     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 88c:	83 35       	cpi	r24, 0x53	; 83
 88e:	09 f0       	breq	.+2      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 890:	59 c0       	rjmp	.+178    	; 0x944 <__stack+0x45>
 892:	21 c0       	rjmp	.+66     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 894:	f8 01       	movw	r30, r16
 896:	80 81       	ld	r24, Z
 898:	89 83       	std	Y+1, r24	; 0x01
 89a:	0e 5f       	subi	r16, 0xFE	; 254
 89c:	1f 4f       	sbci	r17, 0xFF	; 255
 89e:	88 24       	eor	r8, r8
 8a0:	83 94       	inc	r8
 8a2:	91 2c       	mov	r9, r1
 8a4:	53 01       	movw	r10, r6
 8a6:	13 c0       	rjmp	.+38     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8a8:	28 01       	movw	r4, r16
 8aa:	f2 e0       	ldi	r31, 0x02	; 2
 8ac:	4f 0e       	add	r4, r31
 8ae:	51 1c       	adc	r5, r1
 8b0:	f8 01       	movw	r30, r16
 8b2:	a0 80       	ld	r10, Z
 8b4:	b1 80       	ldd	r11, Z+1	; 0x01
 8b6:	36 fe       	sbrs	r3, 6
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8ba:	69 2d       	mov	r22, r9
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8c0:	6f ef       	ldi	r22, 0xFF	; 255
 8c2:	7f ef       	ldi	r23, 0xFF	; 255
 8c4:	c5 01       	movw	r24, r10
 8c6:	0e 94 a9 05 	call	0xb52	; 0xb52 <strnlen>
 8ca:	4c 01       	movw	r8, r24
 8cc:	82 01       	movw	r16, r4
 8ce:	f3 2d       	mov	r31, r3
 8d0:	ff 77       	andi	r31, 0x7F	; 127
 8d2:	3f 2e       	mov	r3, r31
 8d4:	16 c0       	rjmp	.+44     	; 0x902 <__stack+0x3>
 8d6:	28 01       	movw	r4, r16
 8d8:	22 e0       	ldi	r18, 0x02	; 2
 8da:	42 0e       	add	r4, r18
 8dc:	51 1c       	adc	r5, r1
 8de:	f8 01       	movw	r30, r16
 8e0:	a0 80       	ld	r10, Z
 8e2:	b1 80       	ldd	r11, Z+1	; 0x01
 8e4:	36 fe       	sbrs	r3, 6
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8e8:	69 2d       	mov	r22, r9
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8ee:	6f ef       	ldi	r22, 0xFF	; 255
 8f0:	7f ef       	ldi	r23, 0xFF	; 255
 8f2:	c5 01       	movw	r24, r10
 8f4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <strnlen_P>
 8f8:	4c 01       	movw	r8, r24
 8fa:	f3 2d       	mov	r31, r3
 8fc:	f0 68       	ori	r31, 0x80	; 128
 8fe:	3f 2e       	mov	r3, r31
 900:	82 01       	movw	r16, r4
 902:	33 fc       	sbrc	r3, 3
 904:	1b c0       	rjmp	.+54     	; 0x93c <__stack+0x3d>
 906:	82 2d       	mov	r24, r2
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	88 16       	cp	r8, r24
 90c:	99 06       	cpc	r9, r25
 90e:	b0 f4       	brcc	.+44     	; 0x93c <__stack+0x3d>
 910:	b6 01       	movw	r22, r12
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 91a:	2a 94       	dec	r2
 91c:	f4 cf       	rjmp	.-24     	; 0x906 <__stack+0x7>
 91e:	f5 01       	movw	r30, r10
 920:	37 fc       	sbrc	r3, 7
 922:	85 91       	lpm	r24, Z+
 924:	37 fe       	sbrs	r3, 7
 926:	81 91       	ld	r24, Z+
 928:	5f 01       	movw	r10, r30
 92a:	b6 01       	movw	r22, r12
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 932:	21 10       	cpse	r2, r1
 934:	2a 94       	dec	r2
 936:	21 e0       	ldi	r18, 0x01	; 1
 938:	82 1a       	sub	r8, r18
 93a:	91 08       	sbc	r9, r1
 93c:	81 14       	cp	r8, r1
 93e:	91 04       	cpc	r9, r1
 940:	71 f7       	brne	.-36     	; 0x91e <__stack+0x1f>
 942:	e8 c0       	rjmp	.+464    	; 0xb14 <__stack+0x215>
 944:	84 36       	cpi	r24, 0x64	; 100
 946:	11 f0       	breq	.+4      	; 0x94c <__stack+0x4d>
 948:	89 36       	cpi	r24, 0x69	; 105
 94a:	41 f5       	brne	.+80     	; 0x99c <__stack+0x9d>
 94c:	f8 01       	movw	r30, r16
 94e:	37 fe       	sbrs	r3, 7
 950:	07 c0       	rjmp	.+14     	; 0x960 <__stack+0x61>
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	82 81       	ldd	r24, Z+2	; 0x02
 958:	93 81       	ldd	r25, Z+3	; 0x03
 95a:	0c 5f       	subi	r16, 0xFC	; 252
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	08 c0       	rjmp	.+16     	; 0x970 <__stack+0x71>
 960:	60 81       	ld	r22, Z
 962:	71 81       	ldd	r23, Z+1	; 0x01
 964:	07 2e       	mov	r0, r23
 966:	00 0c       	add	r0, r0
 968:	88 0b       	sbc	r24, r24
 96a:	99 0b       	sbc	r25, r25
 96c:	0e 5f       	subi	r16, 0xFE	; 254
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	f3 2d       	mov	r31, r3
 972:	ff 76       	andi	r31, 0x6F	; 111
 974:	3f 2e       	mov	r3, r31
 976:	97 ff       	sbrs	r25, 7
 978:	09 c0       	rjmp	.+18     	; 0x98c <__stack+0x8d>
 97a:	90 95       	com	r25
 97c:	80 95       	com	r24
 97e:	70 95       	com	r23
 980:	61 95       	neg	r22
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	f0 68       	ori	r31, 0x80	; 128
 98a:	3f 2e       	mov	r3, r31
 98c:	2a e0       	ldi	r18, 0x0A	; 10
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	a3 01       	movw	r20, r6
 992:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__ultoa_invert>
 996:	88 2e       	mov	r8, r24
 998:	86 18       	sub	r8, r6
 99a:	45 c0       	rjmp	.+138    	; 0xa26 <__stack+0x127>
 99c:	85 37       	cpi	r24, 0x75	; 117
 99e:	31 f4       	brne	.+12     	; 0x9ac <__stack+0xad>
 9a0:	23 2d       	mov	r18, r3
 9a2:	2f 7e       	andi	r18, 0xEF	; 239
 9a4:	b2 2e       	mov	r11, r18
 9a6:	2a e0       	ldi	r18, 0x0A	; 10
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	25 c0       	rjmp	.+74     	; 0x9f6 <__stack+0xf7>
 9ac:	93 2d       	mov	r25, r3
 9ae:	99 7f       	andi	r25, 0xF9	; 249
 9b0:	b9 2e       	mov	r11, r25
 9b2:	8f 36       	cpi	r24, 0x6F	; 111
 9b4:	c1 f0       	breq	.+48     	; 0x9e6 <__stack+0xe7>
 9b6:	18 f4       	brcc	.+6      	; 0x9be <__stack+0xbf>
 9b8:	88 35       	cpi	r24, 0x58	; 88
 9ba:	79 f0       	breq	.+30     	; 0x9da <__stack+0xdb>
 9bc:	b5 c0       	rjmp	.+362    	; 0xb28 <__stack+0x229>
 9be:	80 37       	cpi	r24, 0x70	; 112
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <__stack+0xc9>
 9c2:	88 37       	cpi	r24, 0x78	; 120
 9c4:	21 f0       	breq	.+8      	; 0x9ce <__stack+0xcf>
 9c6:	b0 c0       	rjmp	.+352    	; 0xb28 <__stack+0x229>
 9c8:	e9 2f       	mov	r30, r25
 9ca:	e0 61       	ori	r30, 0x10	; 16
 9cc:	be 2e       	mov	r11, r30
 9ce:	b4 fe       	sbrs	r11, 4
 9d0:	0d c0       	rjmp	.+26     	; 0x9ec <__stack+0xed>
 9d2:	fb 2d       	mov	r31, r11
 9d4:	f4 60       	ori	r31, 0x04	; 4
 9d6:	bf 2e       	mov	r11, r31
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__stack+0xed>
 9da:	34 fe       	sbrs	r3, 4
 9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <__stack+0xf3>
 9de:	29 2f       	mov	r18, r25
 9e0:	26 60       	ori	r18, 0x06	; 6
 9e2:	b2 2e       	mov	r11, r18
 9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <__stack+0xf3>
 9e6:	28 e0       	ldi	r18, 0x08	; 8
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__stack+0xf7>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <__stack+0xf7>
 9f2:	20 e1       	ldi	r18, 0x10	; 16
 9f4:	32 e0       	ldi	r19, 0x02	; 2
 9f6:	f8 01       	movw	r30, r16
 9f8:	b7 fe       	sbrs	r11, 7
 9fa:	07 c0       	rjmp	.+14     	; 0xa0a <__stack+0x10b>
 9fc:	60 81       	ld	r22, Z
 9fe:	71 81       	ldd	r23, Z+1	; 0x01
 a00:	82 81       	ldd	r24, Z+2	; 0x02
 a02:	93 81       	ldd	r25, Z+3	; 0x03
 a04:	0c 5f       	subi	r16, 0xFC	; 252
 a06:	1f 4f       	sbci	r17, 0xFF	; 255
 a08:	06 c0       	rjmp	.+12     	; 0xa16 <__stack+0x117>
 a0a:	60 81       	ld	r22, Z
 a0c:	71 81       	ldd	r23, Z+1	; 0x01
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 5f       	subi	r16, 0xFE	; 254
 a14:	1f 4f       	sbci	r17, 0xFF	; 255
 a16:	a3 01       	movw	r20, r6
 a18:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__ultoa_invert>
 a1c:	88 2e       	mov	r8, r24
 a1e:	86 18       	sub	r8, r6
 a20:	fb 2d       	mov	r31, r11
 a22:	ff 77       	andi	r31, 0x7F	; 127
 a24:	3f 2e       	mov	r3, r31
 a26:	36 fe       	sbrs	r3, 6
 a28:	0d c0       	rjmp	.+26     	; 0xa44 <__stack+0x145>
 a2a:	23 2d       	mov	r18, r3
 a2c:	2e 7f       	andi	r18, 0xFE	; 254
 a2e:	a2 2e       	mov	r10, r18
 a30:	89 14       	cp	r8, r9
 a32:	58 f4       	brcc	.+22     	; 0xa4a <__stack+0x14b>
 a34:	34 fe       	sbrs	r3, 4
 a36:	0b c0       	rjmp	.+22     	; 0xa4e <__stack+0x14f>
 a38:	32 fc       	sbrc	r3, 2
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <__stack+0x14f>
 a3c:	83 2d       	mov	r24, r3
 a3e:	8e 7e       	andi	r24, 0xEE	; 238
 a40:	a8 2e       	mov	r10, r24
 a42:	05 c0       	rjmp	.+10     	; 0xa4e <__stack+0x14f>
 a44:	b8 2c       	mov	r11, r8
 a46:	a3 2c       	mov	r10, r3
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <__stack+0x151>
 a4a:	b8 2c       	mov	r11, r8
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <__stack+0x151>
 a4e:	b9 2c       	mov	r11, r9
 a50:	a4 fe       	sbrs	r10, 4
 a52:	0f c0       	rjmp	.+30     	; 0xa72 <__stack+0x173>
 a54:	fe 01       	movw	r30, r28
 a56:	e8 0d       	add	r30, r8
 a58:	f1 1d       	adc	r31, r1
 a5a:	80 81       	ld	r24, Z
 a5c:	80 33       	cpi	r24, 0x30	; 48
 a5e:	21 f4       	brne	.+8      	; 0xa68 <__stack+0x169>
 a60:	9a 2d       	mov	r25, r10
 a62:	99 7e       	andi	r25, 0xE9	; 233
 a64:	a9 2e       	mov	r10, r25
 a66:	09 c0       	rjmp	.+18     	; 0xa7a <__stack+0x17b>
 a68:	a2 fe       	sbrs	r10, 2
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__stack+0x179>
 a6c:	b3 94       	inc	r11
 a6e:	b3 94       	inc	r11
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <__stack+0x17b>
 a72:	8a 2d       	mov	r24, r10
 a74:	86 78       	andi	r24, 0x86	; 134
 a76:	09 f0       	breq	.+2      	; 0xa7a <__stack+0x17b>
 a78:	b3 94       	inc	r11
 a7a:	a3 fc       	sbrc	r10, 3
 a7c:	11 c0       	rjmp	.+34     	; 0xaa0 <__stack+0x1a1>
 a7e:	a0 fe       	sbrs	r10, 0
 a80:	06 c0       	rjmp	.+12     	; 0xa8e <__stack+0x18f>
 a82:	b2 14       	cp	r11, r2
 a84:	88 f4       	brcc	.+34     	; 0xaa8 <__stack+0x1a9>
 a86:	28 0c       	add	r2, r8
 a88:	92 2c       	mov	r9, r2
 a8a:	9b 18       	sub	r9, r11
 a8c:	0e c0       	rjmp	.+28     	; 0xaaa <__stack+0x1ab>
 a8e:	b2 14       	cp	r11, r2
 a90:	60 f4       	brcc	.+24     	; 0xaaa <__stack+0x1ab>
 a92:	b6 01       	movw	r22, r12
 a94:	80 e2       	ldi	r24, 0x20	; 32
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 a9c:	b3 94       	inc	r11
 a9e:	f7 cf       	rjmp	.-18     	; 0xa8e <__stack+0x18f>
 aa0:	b2 14       	cp	r11, r2
 aa2:	18 f4       	brcc	.+6      	; 0xaaa <__stack+0x1ab>
 aa4:	2b 18       	sub	r2, r11
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <__stack+0x1ad>
 aa8:	98 2c       	mov	r9, r8
 aaa:	21 2c       	mov	r2, r1
 aac:	a4 fe       	sbrs	r10, 4
 aae:	10 c0       	rjmp	.+32     	; 0xad0 <__stack+0x1d1>
 ab0:	b6 01       	movw	r22, r12
 ab2:	80 e3       	ldi	r24, 0x30	; 48
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 aba:	a2 fe       	sbrs	r10, 2
 abc:	17 c0       	rjmp	.+46     	; 0xaec <__stack+0x1ed>
 abe:	a1 fc       	sbrc	r10, 1
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__stack+0x1c9>
 ac2:	88 e7       	ldi	r24, 0x78	; 120
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <__stack+0x1cd>
 ac8:	88 e5       	ldi	r24, 0x58	; 88
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	b6 01       	movw	r22, r12
 ace:	0c c0       	rjmp	.+24     	; 0xae8 <__stack+0x1e9>
 ad0:	8a 2d       	mov	r24, r10
 ad2:	86 78       	andi	r24, 0x86	; 134
 ad4:	59 f0       	breq	.+22     	; 0xaec <__stack+0x1ed>
 ad6:	a1 fe       	sbrs	r10, 1
 ad8:	02 c0       	rjmp	.+4      	; 0xade <__stack+0x1df>
 ada:	8b e2       	ldi	r24, 0x2B	; 43
 adc:	01 c0       	rjmp	.+2      	; 0xae0 <__stack+0x1e1>
 ade:	80 e2       	ldi	r24, 0x20	; 32
 ae0:	a7 fc       	sbrc	r10, 7
 ae2:	8d e2       	ldi	r24, 0x2D	; 45
 ae4:	b6 01       	movw	r22, r12
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 aec:	89 14       	cp	r8, r9
 aee:	38 f4       	brcc	.+14     	; 0xafe <__stack+0x1ff>
 af0:	b6 01       	movw	r22, r12
 af2:	80 e3       	ldi	r24, 0x30	; 48
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 afa:	9a 94       	dec	r9
 afc:	f7 cf       	rjmp	.-18     	; 0xaec <__stack+0x1ed>
 afe:	8a 94       	dec	r8
 b00:	f3 01       	movw	r30, r6
 b02:	e8 0d       	add	r30, r8
 b04:	f1 1d       	adc	r31, r1
 b06:	80 81       	ld	r24, Z
 b08:	b6 01       	movw	r22, r12
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 b10:	81 10       	cpse	r8, r1
 b12:	f5 cf       	rjmp	.-22     	; 0xafe <__stack+0x1ff>
 b14:	22 20       	and	r2, r2
 b16:	09 f4       	brne	.+2      	; 0xb1a <__stack+0x21b>
 b18:	42 ce       	rjmp	.-892    	; 0x79e <vfprintf+0x24>
 b1a:	b6 01       	movw	r22, r12
 b1c:	80 e2       	ldi	r24, 0x20	; 32
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 b24:	2a 94       	dec	r2
 b26:	f6 cf       	rjmp	.-20     	; 0xb14 <__stack+0x215>
 b28:	f6 01       	movw	r30, r12
 b2a:	86 81       	ldd	r24, Z+6	; 0x06
 b2c:	97 81       	ldd	r25, Z+7	; 0x07
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <__stack+0x235>
 b30:	8f ef       	ldi	r24, 0xFF	; 255
 b32:	9f ef       	ldi	r25, 0xFF	; 255
 b34:	2b 96       	adiw	r28, 0x0b	; 11
 b36:	e2 e1       	ldi	r30, 0x12	; 18
 b38:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__epilogue_restores__>

00000b3c <strnlen_P>:
 b3c:	fc 01       	movw	r30, r24
 b3e:	05 90       	lpm	r0, Z+
 b40:	61 50       	subi	r22, 0x01	; 1
 b42:	70 40       	sbci	r23, 0x00	; 0
 b44:	01 10       	cpse	r0, r1
 b46:	d8 f7       	brcc	.-10     	; 0xb3e <strnlen_P+0x2>
 b48:	80 95       	com	r24
 b4a:	90 95       	com	r25
 b4c:	8e 0f       	add	r24, r30
 b4e:	9f 1f       	adc	r25, r31
 b50:	08 95       	ret

00000b52 <strnlen>:
 b52:	fc 01       	movw	r30, r24
 b54:	61 50       	subi	r22, 0x01	; 1
 b56:	70 40       	sbci	r23, 0x00	; 0
 b58:	01 90       	ld	r0, Z+
 b5a:	01 10       	cpse	r0, r1
 b5c:	d8 f7       	brcc	.-10     	; 0xb54 <strnlen+0x2>
 b5e:	80 95       	com	r24
 b60:	90 95       	com	r25
 b62:	8e 0f       	add	r24, r30
 b64:	9f 1f       	adc	r25, r31
 b66:	08 95       	ret

00000b68 <fputc>:
 b68:	0f 93       	push	r16
 b6a:	1f 93       	push	r17
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	fb 01       	movw	r30, r22
 b72:	23 81       	ldd	r18, Z+3	; 0x03
 b74:	21 fd       	sbrc	r18, 1
 b76:	03 c0       	rjmp	.+6      	; 0xb7e <fputc+0x16>
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	9f ef       	ldi	r25, 0xFF	; 255
 b7c:	2c c0       	rjmp	.+88     	; 0xbd6 <fputc+0x6e>
 b7e:	22 ff       	sbrs	r18, 2
 b80:	16 c0       	rjmp	.+44     	; 0xbae <fputc+0x46>
 b82:	46 81       	ldd	r20, Z+6	; 0x06
 b84:	57 81       	ldd	r21, Z+7	; 0x07
 b86:	24 81       	ldd	r18, Z+4	; 0x04
 b88:	35 81       	ldd	r19, Z+5	; 0x05
 b8a:	42 17       	cp	r20, r18
 b8c:	53 07       	cpc	r21, r19
 b8e:	44 f4       	brge	.+16     	; 0xba0 <fputc+0x38>
 b90:	a0 81       	ld	r26, Z
 b92:	b1 81       	ldd	r27, Z+1	; 0x01
 b94:	9d 01       	movw	r18, r26
 b96:	2f 5f       	subi	r18, 0xFF	; 255
 b98:	3f 4f       	sbci	r19, 0xFF	; 255
 b9a:	31 83       	std	Z+1, r19	; 0x01
 b9c:	20 83       	st	Z, r18
 b9e:	8c 93       	st	X, r24
 ba0:	26 81       	ldd	r18, Z+6	; 0x06
 ba2:	37 81       	ldd	r19, Z+7	; 0x07
 ba4:	2f 5f       	subi	r18, 0xFF	; 255
 ba6:	3f 4f       	sbci	r19, 0xFF	; 255
 ba8:	37 83       	std	Z+7, r19	; 0x07
 baa:	26 83       	std	Z+6, r18	; 0x06
 bac:	14 c0       	rjmp	.+40     	; 0xbd6 <fputc+0x6e>
 bae:	8b 01       	movw	r16, r22
 bb0:	ec 01       	movw	r28, r24
 bb2:	fb 01       	movw	r30, r22
 bb4:	00 84       	ldd	r0, Z+8	; 0x08
 bb6:	f1 85       	ldd	r31, Z+9	; 0x09
 bb8:	e0 2d       	mov	r30, r0
 bba:	09 95       	icall
 bbc:	89 2b       	or	r24, r25
 bbe:	e1 f6       	brne	.-72     	; 0xb78 <fputc+0x10>
 bc0:	d8 01       	movw	r26, r16
 bc2:	16 96       	adiw	r26, 0x06	; 6
 bc4:	8d 91       	ld	r24, X+
 bc6:	9c 91       	ld	r25, X
 bc8:	17 97       	sbiw	r26, 0x07	; 7
 bca:	01 96       	adiw	r24, 0x01	; 1
 bcc:	17 96       	adiw	r26, 0x07	; 7
 bce:	9c 93       	st	X, r25
 bd0:	8e 93       	st	-X, r24
 bd2:	16 97       	sbiw	r26, 0x06	; 6
 bd4:	ce 01       	movw	r24, r28
 bd6:	df 91       	pop	r29
 bd8:	cf 91       	pop	r28
 bda:	1f 91       	pop	r17
 bdc:	0f 91       	pop	r16
 bde:	08 95       	ret

00000be0 <__ultoa_invert>:
 be0:	fa 01       	movw	r30, r20
 be2:	aa 27       	eor	r26, r26
 be4:	28 30       	cpi	r18, 0x08	; 8
 be6:	51 f1       	breq	.+84     	; 0xc3c <__ultoa_invert+0x5c>
 be8:	20 31       	cpi	r18, 0x10	; 16
 bea:	81 f1       	breq	.+96     	; 0xc4c <__ultoa_invert+0x6c>
 bec:	e8 94       	clt
 bee:	6f 93       	push	r22
 bf0:	6e 7f       	andi	r22, 0xFE	; 254
 bf2:	6e 5f       	subi	r22, 0xFE	; 254
 bf4:	7f 4f       	sbci	r23, 0xFF	; 255
 bf6:	8f 4f       	sbci	r24, 0xFF	; 255
 bf8:	9f 4f       	sbci	r25, 0xFF	; 255
 bfa:	af 4f       	sbci	r26, 0xFF	; 255
 bfc:	b1 e0       	ldi	r27, 0x01	; 1
 bfe:	3e d0       	rcall	.+124    	; 0xc7c <__ultoa_invert+0x9c>
 c00:	b4 e0       	ldi	r27, 0x04	; 4
 c02:	3c d0       	rcall	.+120    	; 0xc7c <__ultoa_invert+0x9c>
 c04:	67 0f       	add	r22, r23
 c06:	78 1f       	adc	r23, r24
 c08:	89 1f       	adc	r24, r25
 c0a:	9a 1f       	adc	r25, r26
 c0c:	a1 1d       	adc	r26, r1
 c0e:	68 0f       	add	r22, r24
 c10:	79 1f       	adc	r23, r25
 c12:	8a 1f       	adc	r24, r26
 c14:	91 1d       	adc	r25, r1
 c16:	a1 1d       	adc	r26, r1
 c18:	6a 0f       	add	r22, r26
 c1a:	71 1d       	adc	r23, r1
 c1c:	81 1d       	adc	r24, r1
 c1e:	91 1d       	adc	r25, r1
 c20:	a1 1d       	adc	r26, r1
 c22:	20 d0       	rcall	.+64     	; 0xc64 <__ultoa_invert+0x84>
 c24:	09 f4       	brne	.+2      	; 0xc28 <__ultoa_invert+0x48>
 c26:	68 94       	set
 c28:	3f 91       	pop	r19
 c2a:	2a e0       	ldi	r18, 0x0A	; 10
 c2c:	26 9f       	mul	r18, r22
 c2e:	11 24       	eor	r1, r1
 c30:	30 19       	sub	r19, r0
 c32:	30 5d       	subi	r19, 0xD0	; 208
 c34:	31 93       	st	Z+, r19
 c36:	de f6       	brtc	.-74     	; 0xbee <__ultoa_invert+0xe>
 c38:	cf 01       	movw	r24, r30
 c3a:	08 95       	ret
 c3c:	46 2f       	mov	r20, r22
 c3e:	47 70       	andi	r20, 0x07	; 7
 c40:	40 5d       	subi	r20, 0xD0	; 208
 c42:	41 93       	st	Z+, r20
 c44:	b3 e0       	ldi	r27, 0x03	; 3
 c46:	0f d0       	rcall	.+30     	; 0xc66 <__ultoa_invert+0x86>
 c48:	c9 f7       	brne	.-14     	; 0xc3c <__ultoa_invert+0x5c>
 c4a:	f6 cf       	rjmp	.-20     	; 0xc38 <__ultoa_invert+0x58>
 c4c:	46 2f       	mov	r20, r22
 c4e:	4f 70       	andi	r20, 0x0F	; 15
 c50:	40 5d       	subi	r20, 0xD0	; 208
 c52:	4a 33       	cpi	r20, 0x3A	; 58
 c54:	18 f0       	brcs	.+6      	; 0xc5c <__ultoa_invert+0x7c>
 c56:	49 5d       	subi	r20, 0xD9	; 217
 c58:	31 fd       	sbrc	r19, 1
 c5a:	40 52       	subi	r20, 0x20	; 32
 c5c:	41 93       	st	Z+, r20
 c5e:	02 d0       	rcall	.+4      	; 0xc64 <__ultoa_invert+0x84>
 c60:	a9 f7       	brne	.-22     	; 0xc4c <__ultoa_invert+0x6c>
 c62:	ea cf       	rjmp	.-44     	; 0xc38 <__ultoa_invert+0x58>
 c64:	b4 e0       	ldi	r27, 0x04	; 4
 c66:	a6 95       	lsr	r26
 c68:	97 95       	ror	r25
 c6a:	87 95       	ror	r24
 c6c:	77 95       	ror	r23
 c6e:	67 95       	ror	r22
 c70:	ba 95       	dec	r27
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__ultoa_invert+0x86>
 c74:	00 97       	sbiw	r24, 0x00	; 0
 c76:	61 05       	cpc	r22, r1
 c78:	71 05       	cpc	r23, r1
 c7a:	08 95       	ret
 c7c:	9b 01       	movw	r18, r22
 c7e:	ac 01       	movw	r20, r24
 c80:	0a 2e       	mov	r0, r26
 c82:	06 94       	lsr	r0
 c84:	57 95       	ror	r21
 c86:	47 95       	ror	r20
 c88:	37 95       	ror	r19
 c8a:	27 95       	ror	r18
 c8c:	ba 95       	dec	r27
 c8e:	c9 f7       	brne	.-14     	; 0xc82 <__ultoa_invert+0xa2>
 c90:	62 0f       	add	r22, r18
 c92:	73 1f       	adc	r23, r19
 c94:	84 1f       	adc	r24, r20
 c96:	95 1f       	adc	r25, r21
 c98:	a0 1d       	adc	r26, r0
 c9a:	08 95       	ret

00000c9c <__prologue_saves__>:
 c9c:	2f 92       	push	r2
 c9e:	3f 92       	push	r3
 ca0:	4f 92       	push	r4
 ca2:	5f 92       	push	r5
 ca4:	6f 92       	push	r6
 ca6:	7f 92       	push	r7
 ca8:	8f 92       	push	r8
 caa:	9f 92       	push	r9
 cac:	af 92       	push	r10
 cae:	bf 92       	push	r11
 cb0:	cf 92       	push	r12
 cb2:	df 92       	push	r13
 cb4:	ef 92       	push	r14
 cb6:	ff 92       	push	r15
 cb8:	0f 93       	push	r16
 cba:	1f 93       	push	r17
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	cd b7       	in	r28, 0x3d	; 61
 cc2:	de b7       	in	r29, 0x3e	; 62
 cc4:	ca 1b       	sub	r28, r26
 cc6:	db 0b       	sbc	r29, r27
 cc8:	0f b6       	in	r0, 0x3f	; 63
 cca:	f8 94       	cli
 ccc:	de bf       	out	0x3e, r29	; 62
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	cd bf       	out	0x3d, r28	; 61
 cd2:	09 94       	ijmp

00000cd4 <__epilogue_restores__>:
 cd4:	2a 88       	ldd	r2, Y+18	; 0x12
 cd6:	39 88       	ldd	r3, Y+17	; 0x11
 cd8:	48 88       	ldd	r4, Y+16	; 0x10
 cda:	5f 84       	ldd	r5, Y+15	; 0x0f
 cdc:	6e 84       	ldd	r6, Y+14	; 0x0e
 cde:	7d 84       	ldd	r7, Y+13	; 0x0d
 ce0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ce2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ce4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce6:	b9 84       	ldd	r11, Y+9	; 0x09
 ce8:	c8 84       	ldd	r12, Y+8	; 0x08
 cea:	df 80       	ldd	r13, Y+7	; 0x07
 cec:	ee 80       	ldd	r14, Y+6	; 0x06
 cee:	fd 80       	ldd	r15, Y+5	; 0x05
 cf0:	0c 81       	ldd	r16, Y+4	; 0x04
 cf2:	1b 81       	ldd	r17, Y+3	; 0x03
 cf4:	aa 81       	ldd	r26, Y+2	; 0x02
 cf6:	b9 81       	ldd	r27, Y+1	; 0x01
 cf8:	ce 0f       	add	r28, r30
 cfa:	d1 1d       	adc	r29, r1
 cfc:	0f b6       	in	r0, 0x3f	; 63
 cfe:	f8 94       	cli
 d00:	de bf       	out	0x3e, r29	; 62
 d02:	0f be       	out	0x3f, r0	; 63
 d04:	cd bf       	out	0x3d, r28	; 61
 d06:	ed 01       	movw	r28, r26
 d08:	08 95       	ret

00000d0a <_exit>:
 d0a:	f8 94       	cli

00000d0c <__stop_program>:
 d0c:	ff cf       	rjmp	.-2      	; 0xd0c <__stop_program>
