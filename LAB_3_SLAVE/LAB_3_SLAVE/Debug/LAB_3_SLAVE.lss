
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00000a0c  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  008001bc  008001bc  00000b5c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3f  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  00001b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077f  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a8  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051a  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000039ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_17>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	b7 00       	.word	0x00b7	; ????
  6a:	be 00       	.word	0x00be	; ????
  6c:	c5 00       	.word	0x00c5	; ????
  6e:	cf 00       	.word	0x00cf	; ????
  70:	d9 00       	.word	0x00d9	; ????
  72:	e3 00       	.word	0x00e3	; ????
  74:	ed 00       	.word	0x00ed	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec e0       	ldi	r30, 0x0C	; 12
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 3b       	cpi	r26, 0xBC	; 188
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	ac eb       	ldi	r26, 0xBC	; 188
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  ac:	0c 94 04 05 	jmp	0xa08	; 0xa08 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  ba:	87 e8       	ldi	r24, 0x87	; 135
  bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c0:	08 95       	ret

000000c2 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ea:	08 95       	ret

000000ec <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	6c 01       	movw	r12, r24
  fe:	7b 01       	movw	r14, r22
 100:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < num_channels; i++) {
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	11 c0       	rjmp	.+34     	; 0x128 <ADC_Read_Multiple+0x3c>
		results[i] = ADC_Read(channels[i]);
 106:	8c 2f       	mov	r24, r28
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	8c 01       	movw	r16, r24
 10c:	00 0f       	add	r16, r16
 10e:	11 1f       	adc	r17, r17
 110:	0e 0d       	add	r16, r14
 112:	1f 1d       	adc	r17, r15
 114:	f6 01       	movw	r30, r12
 116:	e8 0f       	add	r30, r24
 118:	f9 1f       	adc	r31, r25
 11a:	80 81       	ld	r24, Z
 11c:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
 120:	f8 01       	movw	r30, r16
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
	// Devuelve el resultado de la conversión
	return ADC;
}

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
	for (uint8_t i = 0; i < num_channels; i++) {
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	cd 17       	cp	r28, r29
 12a:	68 f3       	brcs	.-38     	; 0x106 <ADC_Read_Multiple+0x1a>
		results[i] = ADC_Read(channels[i]);
	}
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	ff 90       	pop	r15
 136:	ef 90       	pop	r14
 138:	df 90       	pop	r13
 13a:	cf 90       	pop	r12
 13c:	08 95       	ret

0000013e <SPI_init>:
#define F_CPU 16000000UL
#include "SPI.h"

void SPI_init(SPI_TYPE sType, SPI_Data_Order sDataOrder, SPI_Clock_Polarity sClockPolarity, SPI_Clock_Phase sClockPhase) {
 13e:	e8 2f       	mov	r30, r24
	//PB2 -> SS
	//PB3 -> SS
	//PB4 -> SS
	//PB5 -> SS
	
	if (sType & 0x10) { //Verificar si se configura como maestro..
 140:	84 ff       	sbrs	r24, 4
 142:	52 c0       	rjmp	.+164    	; 0x1e8 <SPI_init+0xaa>
		// Configurar como maestro
		DDRB |= (1 << DDB3) | (1 << DDB5) | (1 << DDB2); // MOSI, SCK, SS como salidas
 144:	84 b1       	in	r24, 0x04	; 4
 146:	8c 62       	ori	r24, 0x2C	; 44
 148:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << DDB4); // MISO como entrada
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1 << MSTR); // Habilitar modo maestro
 150:	8c b5       	in	r24, 0x2c	; 44
 152:	80 61       	ori	r24, 0x10	; 16
 154:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
 156:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 158:	8e 2f       	mov	r24, r30
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	87 30       	cpi	r24, 0x07	; 7
 15e:	91 05       	cpc	r25, r1
 160:	08 f0       	brcs	.+2      	; 0x164 <SPI_init+0x26>
 162:	4b c0       	rjmp	.+150    	; 0x1fa <SPI_init+0xbc>
 164:	fc 01       	movw	r30, r24
 166:	ec 5c       	subi	r30, 0xCC	; 204
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	0c 94 06 02 	jmp	0x40c	; 0x40c <__tablejump2__>
			case 0: //DIV2
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 16e:	8c b5       	in	r24, 0x2c	; 44
 170:	8c 7f       	andi	r24, 0xFC	; 252
 172:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 174:	8d b5       	in	r24, 0x2d	; 45
 176:	81 60       	ori	r24, 0x01	; 1
 178:	8d bd       	out	0x2d, r24	; 45
			break;
 17a:	3f c0       	rjmp	.+126    	; 0x1fa <SPI_init+0xbc>
			case 1: //DIV4
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 17c:	8c b5       	in	r24, 0x2c	; 44
 17e:	8c 7f       	andi	r24, 0xFC	; 252
 180:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 182:	8d b5       	in	r24, 0x2d	; 45
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	8d bd       	out	0x2d, r24	; 45
			break;
 188:	38 c0       	rjmp	.+112    	; 0x1fa <SPI_init+0xbc>
			case 2: //DIV8
				SPCR |= (1<<SPR0);
 18a:	8c b5       	in	r24, 0x2c	; 44
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 190:	8c b5       	in	r24, 0x2c	; 44
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 196:	8d b5       	in	r24, 0x2d	; 45
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	8d bd       	out	0x2d, r24	; 45
			break;
 19c:	2e c0       	rjmp	.+92     	; 0x1fa <SPI_init+0xbc>
			case 3: //DIV16
				SPCR |= (1<<SPR0);
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 1a4:	8c b5       	in	r24, 0x2c	; 44
 1a6:	8d 7f       	andi	r24, 0xFD	; 253
 1a8:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1aa:	8d b5       	in	r24, 0x2d	; 45
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	8d bd       	out	0x2d, r24	; 45
			break;
 1b0:	24 c0       	rjmp	.+72     	; 0x1fa <SPI_init+0xbc>
			case 4: //DIV32
				SPCR &= ~(1<<SPR0);
 1b2:	8c b5       	in	r24, 0x2c	; 44
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 1b8:	8c b5       	in	r24, 0x2c	; 44
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 1be:	8d b5       	in	r24, 0x2d	; 45
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	8d bd       	out	0x2d, r24	; 45
			break;
 1c4:	1a c0       	rjmp	.+52     	; 0x1fa <SPI_init+0xbc>
			case 5: //DIV64
				SPCR &= ~(1<<SPR0);
 1c6:	8c b5       	in	r24, 0x2c	; 44
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 1cc:	8c b5       	in	r24, 0x2c	; 44
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1d2:	8d b5       	in	r24, 0x2d	; 45
 1d4:	8e 7f       	andi	r24, 0xFE	; 254
 1d6:	8d bd       	out	0x2d, r24	; 45
			break;
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <SPI_init+0xbc>
			case 6: //DIV128
				SPCR |= (1<<SPR0)|(1<<SPR1);
 1da:	8c b5       	in	r24, 0x2c	; 44
 1dc:	83 60       	ori	r24, 0x03	; 3
 1de:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1e0:	8d b5       	in	r24, 0x2d	; 45
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	8d bd       	out	0x2d, r24	; 45
			break;
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <SPI_init+0xbc>
		}
		
		} else {
		// Configurar como esclavo
		DDRB |= (1 << DDB4); // MISO como salida
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1 << DDB3) | (1 << DDB5) | (1 << DDB2)); // MOSI, SCK, SS como entradas
 1ee:	84 b1       	in	r24, 0x04	; 4
 1f0:	83 7d       	andi	r24, 0xD3	; 211
 1f2:	84 b9       	out	0x04, r24	; 4
		
		SPCR &= ~(1 << MSTR); // Habilitar SPI, modo esclavo
 1f4:	8c b5       	in	r24, 0x2c	; 44
 1f6:	8f 7e       	andi	r24, 0xEF	; 239
 1f8:	8c bd       	out	0x2c, r24	; 44
	}
	// Habilitar Data Order, Clock Polarity, Clock Phase
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 1fa:	8c b5       	in	r24, 0x2c	; 44
 1fc:	46 2b       	or	r20, r22
 1fe:	24 2b       	or	r18, r20
 200:	28 2b       	or	r18, r24
 202:	20 64       	ori	r18, 0x40	; 64
 204:	2c bd       	out	0x2c, r18	; 44
 206:	08 95       	ret

00000208 <SPI_send>:
}

void SPI_send(uint8_t data) {
	SPDR = data;
 208:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Esperar a que la transmisión termine
 20a:	0d b4       	in	r0, 0x2d	; 45
 20c:	07 fe       	sbrs	r0, 7
 20e:	fd cf       	rjmp	.-6      	; 0x20a <SPI_send+0x2>
}
 210:	08 95       	ret

00000212 <UART_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "UART.h"

void UART_Init(unsigned long baud_rate) {
 212:	9b 01       	movw	r18, r22
 214:	ac 01       	movw	r20, r24
	unsigned int ubrr = F_CPU / 16 / baud_rate - 1;
 216:	60 e4       	ldi	r22, 0x40	; 64
 218:	72 e4       	ldi	r23, 0x42	; 66
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodsi4>
 222:	21 50       	subi	r18, 0x01	; 1
 224:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 226:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 22a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar el receptor y el transmisor
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar el formato de datos: 8 bits
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 23a:	08 95       	ret

0000023c <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
 23c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 240:	95 ff       	sbrs	r25, 5
 242:	fc cf       	rjmp	.-8      	; 0x23c <UART_Transmit>
	UDR0 = data;  // Enviar el dato
 244:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 248:	08 95       	ret

0000024a <UART_Receive>:
}

unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
 24a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 24e:	88 23       	and	r24, r24
 250:	e4 f7       	brge	.-8      	; 0x24a <UART_Receive>
	return UDR0;  // Leer el dato recibido
 252:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 256:	08 95       	ret

00000258 <UART_TransmitString>:

void UART_TransmitString(const char *str) {
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	while (*str) {
 25e:	03 c0       	rjmp	.+6      	; 0x266 <UART_TransmitString+0xe>
		UART_Transmit(*str++);
 260:	21 96       	adiw	r28, 0x01	; 1
 262:	0e 94 1e 01 	call	0x23c	; 0x23c <UART_Transmit>
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
	return UDR0;  // Leer el dato recibido
}

void UART_TransmitString(const char *str) {
	while (*str) {
 266:	88 81       	ld	r24, Y
 268:	81 11       	cpse	r24, r1
 26a:	fa cf       	rjmp	.-12     	; 0x260 <UART_TransmitString+0x8>
		UART_Transmit(*str++);
	}
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <display_menu>:
////////////////////////////////////////////////////
// Funciones auxiliares
////////////////////////////////////////////////////

void display_menu(void) {
	UART_TransmitString("\r\n***** Menu *****\r\n");
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
	UART_TransmitString("1. Mostrar valores de ADC\r\n");
 27a:	85 e1       	ldi	r24, 0x15	; 21
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
	UART_TransmitString("*****************\r\n");
 282:	81 e3       	ldi	r24, 0x31	; 49
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
	UART_TransmitString("Seleccione una opción: ");
 28a:	85 e4       	ldi	r24, 0x45	; 69
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
 292:	08 95       	ret

00000294 <process_command>:
}

void process_command(char command) {
	switch (command) {
 294:	81 33       	cpi	r24, 0x31	; 49
 296:	21 f5       	brne	.+72     	; 0x2e0 <process_command+0x4c>
		case '1':
		snprintf(buffer, sizeof(buffer), "Valores ADC - ADC6: %u, ADC7: %u\r\n", adc_results[1], adc_results[0]);
 298:	ed ef       	ldi	r30, 0xFD	; 253
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	81 81       	ldd	r24, Z+1	; 0x01
 29e:	8f 93       	push	r24
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 93       	push	r24
 2a4:	83 81       	ldd	r24, Z+3	; 0x03
 2a6:	8f 93       	push	r24
 2a8:	82 81       	ldd	r24, Z+2	; 0x02
 2aa:	8f 93       	push	r24
 2ac:	8d e5       	ldi	r24, 0x5D	; 93
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	9f 93       	push	r25
 2b2:	8f 93       	push	r24
 2b4:	1f 92       	push	r1
 2b6:	80 e4       	ldi	r24, 0x40	; 64
 2b8:	8f 93       	push	r24
 2ba:	8d eb       	ldi	r24, 0xBD	; 189
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	9f 93       	push	r25
 2c0:	8f 93       	push	r24
 2c2:	0e 94 0c 02 	call	0x418	; 0x418 <snprintf>
		UART_TransmitString(buffer);
 2c6:	8d eb       	ldi	r24, 0xBD	; 189
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
		break;
 2ce:	8d b7       	in	r24, 0x3d	; 61
 2d0:	9e b7       	in	r25, 0x3e	; 62
 2d2:	0a 96       	adiw	r24, 0x0a	; 10
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	9e bf       	out	0x3e, r25	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	8d bf       	out	0x3d, r24	; 61
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <process_command+0x54>
		default:
		UART_TransmitString("Opción inválida. Por favor, seleccione una opción válida.\r\n");
 2e0:	80 e8       	ldi	r24, 0x80	; 128
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
		break;
	}
	display_menu();
 2e8:	0e 94 39 01 	call	0x272	; 0x272 <display_menu>
 2ec:	08 95       	ret

000002ee <main>:
////////////////////////////////////////////////////
// Programa Principal
////////////////////////////////////////////////////

int main(void)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <main+0x6>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	// Configurar Pines como salida
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7);
 2f8:	8a b1       	in	r24, 0x0a	; 10
 2fa:	8c 6f       	ori	r24, 0xFC	; 252
 2fc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB0)|(1<<DDB1);
 2fe:	84 b1       	in	r24, 0x04	; 4
 300:	83 60       	ori	r24, 0x03	; 3
 302:	84 b9       	out	0x04, r24	; 4
	
	PORTD &= ~((1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	83 70       	andi	r24, 0x03	; 3
 308:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1<<DDB0)|(1<<DDB1));
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	8c 7f       	andi	r24, 0xFC	; 252
 30e:	85 b9       	out	0x05, r24	; 5
	
	SPI_init(SPI_SLAVE_SS,SPI_Data_Order_MSB,SPI_Clock_IDLE_LOW,SPI_clock_First_EDGE);
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_init>
	ADC_Init();  // Inicializa el ADC
 31c:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Init>
	//uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
		
	SPCR |= (1<<SPIE); // Activar ISR SPI
 320:	8c b5       	in	r24, 0x2c	; 44
 322:	80 68       	ori	r24, 0x80	; 128
 324:	8c bd       	out	0x2c, r24	; 44
	sei();
 326:	78 94       	sei
	
	UART_Init(BAUD);  // Inicializa la UART
 328:	60 e8       	ldi	r22, 0x80	; 128
 32a:	75 e2       	ldi	r23, 0x25	; 37
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 09 01 	call	0x212	; 0x212 <UART_Init>

	uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
 334:	87 e0       	ldi	r24, 0x07	; 7
 336:	89 83       	std	Y+1, r24	; 0x01
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	8a 83       	std	Y+2, r24	; 0x02


	// Mostrar el menú inicial en la consola
	display_menu();
 33c:	0e 94 39 01 	call	0x272	; 0x272 <display_menu>

	while (1)
	{
		// Leer los valores de los ADC
		ADC_Read_Multiple(adc_channels, adc_results, 2);
 340:	42 e0       	ldi	r20, 0x02	; 2
 342:	6d ef       	ldi	r22, 0xFD	; 253
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	ce 01       	movw	r24, r28
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	0e 94 76 00 	call	0xec	; 0xec <ADC_Read_Multiple>

		// Leer y procesar los comandos de la UART
		if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles en el buffer de recepción
 34e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 352:	88 23       	and	r24, r24
 354:	24 f4       	brge	.+8      	; 0x35e <main+0x70>
			char received_char = UART_Receive();
 356:	0e 94 25 01 	call	0x24a	; 0x24a <UART_Receive>
			process_command(received_char);
 35a:	0e 94 4a 01 	call	0x294	; 0x294 <process_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	89 e6       	ldi	r24, 0x69	; 105
 362:	98 e1       	ldi	r25, 0x18	; 24
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x76>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x80>
 36e:	00 00       	nop
 370:	e7 cf       	rjmp	.-50     	; 0x340 <main+0x52>

00000372 <__vector_17>:
		break;
	}
	display_menu();
}

ISR(SPI_STC_vect) {
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
		valorSPI = SPDR;
 394:	8e b5       	in	r24, 0x2e	; 46
 396:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
		if (valorSPI == 'c') {
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	21 f4       	brne	.+8      	; 0x3a6 <__vector_17+0x34>
			SPI_send(adc_results[0]);
 39e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <adc_results>
 3a2:	0e 94 04 01 	call	0x208	; 0x208 <SPI_send>
			}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__udivmodsi4>:
 3c8:	a1 e2       	ldi	r26, 0x21	; 33
 3ca:	1a 2e       	mov	r1, r26
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	fd 01       	movw	r30, r26
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__udivmodsi4_ep>

000003d4 <__udivmodsi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	ee 1f       	adc	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	a2 17       	cp	r26, r18
 3de:	b3 07       	cpc	r27, r19
 3e0:	e4 07       	cpc	r30, r20
 3e2:	f5 07       	cpc	r31, r21
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__udivmodsi4_ep>
 3e6:	a2 1b       	sub	r26, r18
 3e8:	b3 0b       	sbc	r27, r19
 3ea:	e4 0b       	sbc	r30, r20
 3ec:	f5 0b       	sbc	r31, r21

000003ee <__udivmodsi4_ep>:
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a 94       	dec	r1
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <__udivmodsi4_loop>
 3fa:	60 95       	com	r22
 3fc:	70 95       	com	r23
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	bd 01       	movw	r22, r26
 408:	cf 01       	movw	r24, r30
 40a:	08 95       	ret

0000040c <__tablejump2__>:
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	05 90       	lpm	r0, Z+
 412:	f4 91       	lpm	r31, Z
 414:	e0 2d       	mov	r30, r0
 416:	09 94       	ijmp

00000418 <snprintf>:
 418:	ae e0       	ldi	r26, 0x0E	; 14
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e2 e1       	ldi	r30, 0x12	; 18
 41e:	f2 e0       	ldi	r31, 0x02	; 2
 420:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__prologue_saves__+0x1c>
 424:	0d 89       	ldd	r16, Y+21	; 0x15
 426:	1e 89       	ldd	r17, Y+22	; 0x16
 428:	8f 89       	ldd	r24, Y+23	; 0x17
 42a:	98 8d       	ldd	r25, Y+24	; 0x18
 42c:	26 e0       	ldi	r18, 0x06	; 6
 42e:	2c 83       	std	Y+4, r18	; 0x04
 430:	1a 83       	std	Y+2, r17	; 0x02
 432:	09 83       	std	Y+1, r16	; 0x01
 434:	97 ff       	sbrs	r25, 7
 436:	02 c0       	rjmp	.+4      	; 0x43c <snprintf+0x24>
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e8       	ldi	r25, 0x80	; 128
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	9e 83       	std	Y+6, r25	; 0x06
 440:	8d 83       	std	Y+5, r24	; 0x05
 442:	ae 01       	movw	r20, r28
 444:	45 5e       	subi	r20, 0xE5	; 229
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	69 8d       	ldd	r22, Y+25	; 0x19
 44a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	0e 94 3c 02 	call	0x478	; 0x478 <vfprintf>
 454:	4d 81       	ldd	r20, Y+5	; 0x05
 456:	5e 81       	ldd	r21, Y+6	; 0x06
 458:	57 fd       	sbrc	r21, 7
 45a:	0a c0       	rjmp	.+20     	; 0x470 <snprintf+0x58>
 45c:	2f 81       	ldd	r18, Y+7	; 0x07
 45e:	38 85       	ldd	r19, Y+8	; 0x08
 460:	42 17       	cp	r20, r18
 462:	53 07       	cpc	r21, r19
 464:	0c f4       	brge	.+2      	; 0x468 <snprintf+0x50>
 466:	9a 01       	movw	r18, r20
 468:	f8 01       	movw	r30, r16
 46a:	e2 0f       	add	r30, r18
 46c:	f3 1f       	adc	r31, r19
 46e:	10 82       	st	Z, r1
 470:	2e 96       	adiw	r28, 0x0e	; 14
 472:	e4 e0       	ldi	r30, 0x04	; 4
 474:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__epilogue_restores__+0x1c>

00000478 <vfprintf>:
 478:	ab e0       	ldi	r26, 0x0B	; 11
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e2 e4       	ldi	r30, 0x42	; 66
 47e:	f2 e0       	ldi	r31, 0x02	; 2
 480:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__prologue_saves__>
 484:	6c 01       	movw	r12, r24
 486:	7b 01       	movw	r14, r22
 488:	8a 01       	movw	r16, r20
 48a:	fc 01       	movw	r30, r24
 48c:	17 82       	std	Z+7, r1	; 0x07
 48e:	16 82       	std	Z+6, r1	; 0x06
 490:	83 81       	ldd	r24, Z+3	; 0x03
 492:	81 ff       	sbrs	r24, 1
 494:	cc c1       	rjmp	.+920    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	3c 01       	movw	r6, r24
 49c:	f6 01       	movw	r30, r12
 49e:	93 81       	ldd	r25, Z+3	; 0x03
 4a0:	f7 01       	movw	r30, r14
 4a2:	93 fd       	sbrc	r25, 3
 4a4:	85 91       	lpm	r24, Z+
 4a6:	93 ff       	sbrs	r25, 3
 4a8:	81 91       	ld	r24, Z+
 4aa:	7f 01       	movw	r14, r30
 4ac:	88 23       	and	r24, r24
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <vfprintf+0x3a>
 4b0:	ba c1       	rjmp	.+884    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 4b2:	85 32       	cpi	r24, 0x25	; 37
 4b4:	39 f4       	brne	.+14     	; 0x4c4 <vfprintf+0x4c>
 4b6:	93 fd       	sbrc	r25, 3
 4b8:	85 91       	lpm	r24, Z+
 4ba:	93 ff       	sbrs	r25, 3
 4bc:	81 91       	ld	r24, Z+
 4be:	7f 01       	movw	r14, r30
 4c0:	85 32       	cpi	r24, 0x25	; 37
 4c2:	29 f4       	brne	.+10     	; 0x4ce <vfprintf+0x56>
 4c4:	b6 01       	movw	r22, r12
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 4cc:	e7 cf       	rjmp	.-50     	; 0x49c <vfprintf+0x24>
 4ce:	91 2c       	mov	r9, r1
 4d0:	21 2c       	mov	r2, r1
 4d2:	31 2c       	mov	r3, r1
 4d4:	ff e1       	ldi	r31, 0x1F	; 31
 4d6:	f3 15       	cp	r31, r3
 4d8:	d8 f0       	brcs	.+54     	; 0x510 <vfprintf+0x98>
 4da:	8b 32       	cpi	r24, 0x2B	; 43
 4dc:	79 f0       	breq	.+30     	; 0x4fc <vfprintf+0x84>
 4de:	38 f4       	brcc	.+14     	; 0x4ee <vfprintf+0x76>
 4e0:	80 32       	cpi	r24, 0x20	; 32
 4e2:	79 f0       	breq	.+30     	; 0x502 <vfprintf+0x8a>
 4e4:	83 32       	cpi	r24, 0x23	; 35
 4e6:	a1 f4       	brne	.+40     	; 0x510 <vfprintf+0x98>
 4e8:	23 2d       	mov	r18, r3
 4ea:	20 61       	ori	r18, 0x10	; 16
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <vfprintf+0xb0>
 4ee:	8d 32       	cpi	r24, 0x2D	; 45
 4f0:	61 f0       	breq	.+24     	; 0x50a <vfprintf+0x92>
 4f2:	80 33       	cpi	r24, 0x30	; 48
 4f4:	69 f4       	brne	.+26     	; 0x510 <vfprintf+0x98>
 4f6:	23 2d       	mov	r18, r3
 4f8:	21 60       	ori	r18, 0x01	; 1
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <vfprintf+0xb0>
 4fc:	83 2d       	mov	r24, r3
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	38 2e       	mov	r3, r24
 502:	e3 2d       	mov	r30, r3
 504:	e4 60       	ori	r30, 0x04	; 4
 506:	3e 2e       	mov	r3, r30
 508:	2a c0       	rjmp	.+84     	; 0x55e <vfprintf+0xe6>
 50a:	f3 2d       	mov	r31, r3
 50c:	f8 60       	ori	r31, 0x08	; 8
 50e:	1d c0       	rjmp	.+58     	; 0x54a <vfprintf+0xd2>
 510:	37 fc       	sbrc	r3, 7
 512:	2d c0       	rjmp	.+90     	; 0x56e <vfprintf+0xf6>
 514:	20 ed       	ldi	r18, 0xD0	; 208
 516:	28 0f       	add	r18, r24
 518:	2a 30       	cpi	r18, 0x0A	; 10
 51a:	40 f0       	brcs	.+16     	; 0x52c <vfprintf+0xb4>
 51c:	8e 32       	cpi	r24, 0x2E	; 46
 51e:	b9 f4       	brne	.+46     	; 0x54e <vfprintf+0xd6>
 520:	36 fc       	sbrc	r3, 6
 522:	81 c1       	rjmp	.+770    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 524:	23 2d       	mov	r18, r3
 526:	20 64       	ori	r18, 0x40	; 64
 528:	32 2e       	mov	r3, r18
 52a:	19 c0       	rjmp	.+50     	; 0x55e <vfprintf+0xe6>
 52c:	36 fe       	sbrs	r3, 6
 52e:	06 c0       	rjmp	.+12     	; 0x53c <vfprintf+0xc4>
 530:	8a e0       	ldi	r24, 0x0A	; 10
 532:	98 9e       	mul	r9, r24
 534:	20 0d       	add	r18, r0
 536:	11 24       	eor	r1, r1
 538:	92 2e       	mov	r9, r18
 53a:	11 c0       	rjmp	.+34     	; 0x55e <vfprintf+0xe6>
 53c:	ea e0       	ldi	r30, 0x0A	; 10
 53e:	2e 9e       	mul	r2, r30
 540:	20 0d       	add	r18, r0
 542:	11 24       	eor	r1, r1
 544:	22 2e       	mov	r2, r18
 546:	f3 2d       	mov	r31, r3
 548:	f0 62       	ori	r31, 0x20	; 32
 54a:	3f 2e       	mov	r3, r31
 54c:	08 c0       	rjmp	.+16     	; 0x55e <vfprintf+0xe6>
 54e:	8c 36       	cpi	r24, 0x6C	; 108
 550:	21 f4       	brne	.+8      	; 0x55a <vfprintf+0xe2>
 552:	83 2d       	mov	r24, r3
 554:	80 68       	ori	r24, 0x80	; 128
 556:	38 2e       	mov	r3, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <vfprintf+0xe6>
 55a:	88 36       	cpi	r24, 0x68	; 104
 55c:	41 f4       	brne	.+16     	; 0x56e <vfprintf+0xf6>
 55e:	f7 01       	movw	r30, r14
 560:	93 fd       	sbrc	r25, 3
 562:	85 91       	lpm	r24, Z+
 564:	93 ff       	sbrs	r25, 3
 566:	81 91       	ld	r24, Z+
 568:	7f 01       	movw	r14, r30
 56a:	81 11       	cpse	r24, r1
 56c:	b3 cf       	rjmp	.-154    	; 0x4d4 <vfprintf+0x5c>
 56e:	98 2f       	mov	r25, r24
 570:	9f 7d       	andi	r25, 0xDF	; 223
 572:	95 54       	subi	r25, 0x45	; 69
 574:	93 30       	cpi	r25, 0x03	; 3
 576:	28 f4       	brcc	.+10     	; 0x582 <vfprintf+0x10a>
 578:	0c 5f       	subi	r16, 0xFC	; 252
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	9f e3       	ldi	r25, 0x3F	; 63
 57e:	99 83       	std	Y+1, r25	; 0x01
 580:	0d c0       	rjmp	.+26     	; 0x59c <vfprintf+0x124>
 582:	83 36       	cpi	r24, 0x63	; 99
 584:	31 f0       	breq	.+12     	; 0x592 <vfprintf+0x11a>
 586:	83 37       	cpi	r24, 0x73	; 115
 588:	71 f0       	breq	.+28     	; 0x5a6 <vfprintf+0x12e>
 58a:	83 35       	cpi	r24, 0x53	; 83
 58c:	09 f0       	breq	.+2      	; 0x590 <vfprintf+0x118>
 58e:	59 c0       	rjmp	.+178    	; 0x642 <vfprintf+0x1ca>
 590:	21 c0       	rjmp	.+66     	; 0x5d4 <vfprintf+0x15c>
 592:	f8 01       	movw	r30, r16
 594:	80 81       	ld	r24, Z
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	0e 5f       	subi	r16, 0xFE	; 254
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	88 24       	eor	r8, r8
 59e:	83 94       	inc	r8
 5a0:	91 2c       	mov	r9, r1
 5a2:	53 01       	movw	r10, r6
 5a4:	13 c0       	rjmp	.+38     	; 0x5cc <vfprintf+0x154>
 5a6:	28 01       	movw	r4, r16
 5a8:	f2 e0       	ldi	r31, 0x02	; 2
 5aa:	4f 0e       	add	r4, r31
 5ac:	51 1c       	adc	r5, r1
 5ae:	f8 01       	movw	r30, r16
 5b0:	a0 80       	ld	r10, Z
 5b2:	b1 80       	ldd	r11, Z+1	; 0x01
 5b4:	36 fe       	sbrs	r3, 6
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <vfprintf+0x146>
 5b8:	69 2d       	mov	r22, r9
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <vfprintf+0x14a>
 5be:	6f ef       	ldi	r22, 0xFF	; 255
 5c0:	7f ef       	ldi	r23, 0xFF	; 255
 5c2:	c5 01       	movw	r24, r10
 5c4:	0e 94 28 04 	call	0x850	; 0x850 <strnlen>
 5c8:	4c 01       	movw	r8, r24
 5ca:	82 01       	movw	r16, r4
 5cc:	f3 2d       	mov	r31, r3
 5ce:	ff 77       	andi	r31, 0x7F	; 127
 5d0:	3f 2e       	mov	r3, r31
 5d2:	16 c0       	rjmp	.+44     	; 0x600 <vfprintf+0x188>
 5d4:	28 01       	movw	r4, r16
 5d6:	22 e0       	ldi	r18, 0x02	; 2
 5d8:	42 0e       	add	r4, r18
 5da:	51 1c       	adc	r5, r1
 5dc:	f8 01       	movw	r30, r16
 5de:	a0 80       	ld	r10, Z
 5e0:	b1 80       	ldd	r11, Z+1	; 0x01
 5e2:	36 fe       	sbrs	r3, 6
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <vfprintf+0x174>
 5e6:	69 2d       	mov	r22, r9
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <vfprintf+0x178>
 5ec:	6f ef       	ldi	r22, 0xFF	; 255
 5ee:	7f ef       	ldi	r23, 0xFF	; 255
 5f0:	c5 01       	movw	r24, r10
 5f2:	0e 94 1d 04 	call	0x83a	; 0x83a <strnlen_P>
 5f6:	4c 01       	movw	r8, r24
 5f8:	f3 2d       	mov	r31, r3
 5fa:	f0 68       	ori	r31, 0x80	; 128
 5fc:	3f 2e       	mov	r3, r31
 5fe:	82 01       	movw	r16, r4
 600:	33 fc       	sbrc	r3, 3
 602:	1b c0       	rjmp	.+54     	; 0x63a <vfprintf+0x1c2>
 604:	82 2d       	mov	r24, r2
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	88 16       	cp	r8, r24
 60a:	99 06       	cpc	r9, r25
 60c:	b0 f4       	brcc	.+44     	; 0x63a <vfprintf+0x1c2>
 60e:	b6 01       	movw	r22, r12
 610:	80 e2       	ldi	r24, 0x20	; 32
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 618:	2a 94       	dec	r2
 61a:	f4 cf       	rjmp	.-24     	; 0x604 <vfprintf+0x18c>
 61c:	f5 01       	movw	r30, r10
 61e:	37 fc       	sbrc	r3, 7
 620:	85 91       	lpm	r24, Z+
 622:	37 fe       	sbrs	r3, 7
 624:	81 91       	ld	r24, Z+
 626:	5f 01       	movw	r10, r30
 628:	b6 01       	movw	r22, r12
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 630:	21 10       	cpse	r2, r1
 632:	2a 94       	dec	r2
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	82 1a       	sub	r8, r18
 638:	91 08       	sbc	r9, r1
 63a:	81 14       	cp	r8, r1
 63c:	91 04       	cpc	r9, r1
 63e:	71 f7       	brne	.-36     	; 0x61c <vfprintf+0x1a4>
 640:	e8 c0       	rjmp	.+464    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 642:	84 36       	cpi	r24, 0x64	; 100
 644:	11 f0       	breq	.+4      	; 0x64a <vfprintf+0x1d2>
 646:	89 36       	cpi	r24, 0x69	; 105
 648:	41 f5       	brne	.+80     	; 0x69a <vfprintf+0x222>
 64a:	f8 01       	movw	r30, r16
 64c:	37 fe       	sbrs	r3, 7
 64e:	07 c0       	rjmp	.+14     	; 0x65e <vfprintf+0x1e6>
 650:	60 81       	ld	r22, Z
 652:	71 81       	ldd	r23, Z+1	; 0x01
 654:	82 81       	ldd	r24, Z+2	; 0x02
 656:	93 81       	ldd	r25, Z+3	; 0x03
 658:	0c 5f       	subi	r16, 0xFC	; 252
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	08 c0       	rjmp	.+16     	; 0x66e <vfprintf+0x1f6>
 65e:	60 81       	ld	r22, Z
 660:	71 81       	ldd	r23, Z+1	; 0x01
 662:	07 2e       	mov	r0, r23
 664:	00 0c       	add	r0, r0
 666:	88 0b       	sbc	r24, r24
 668:	99 0b       	sbc	r25, r25
 66a:	0e 5f       	subi	r16, 0xFE	; 254
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	f3 2d       	mov	r31, r3
 670:	ff 76       	andi	r31, 0x6F	; 111
 672:	3f 2e       	mov	r3, r31
 674:	97 ff       	sbrs	r25, 7
 676:	09 c0       	rjmp	.+18     	; 0x68a <vfprintf+0x212>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	f0 68       	ori	r31, 0x80	; 128
 688:	3f 2e       	mov	r3, r31
 68a:	2a e0       	ldi	r18, 0x0A	; 10
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	a3 01       	movw	r20, r6
 690:	0e 94 6f 04 	call	0x8de	; 0x8de <__ultoa_invert>
 694:	88 2e       	mov	r8, r24
 696:	86 18       	sub	r8, r6
 698:	45 c0       	rjmp	.+138    	; 0x724 <vfprintf+0x2ac>
 69a:	85 37       	cpi	r24, 0x75	; 117
 69c:	31 f4       	brne	.+12     	; 0x6aa <vfprintf+0x232>
 69e:	23 2d       	mov	r18, r3
 6a0:	2f 7e       	andi	r18, 0xEF	; 239
 6a2:	b2 2e       	mov	r11, r18
 6a4:	2a e0       	ldi	r18, 0x0A	; 10
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	25 c0       	rjmp	.+74     	; 0x6f4 <vfprintf+0x27c>
 6aa:	93 2d       	mov	r25, r3
 6ac:	99 7f       	andi	r25, 0xF9	; 249
 6ae:	b9 2e       	mov	r11, r25
 6b0:	8f 36       	cpi	r24, 0x6F	; 111
 6b2:	c1 f0       	breq	.+48     	; 0x6e4 <vfprintf+0x26c>
 6b4:	18 f4       	brcc	.+6      	; 0x6bc <vfprintf+0x244>
 6b6:	88 35       	cpi	r24, 0x58	; 88
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <vfprintf+0x260>
 6ba:	b5 c0       	rjmp	.+362    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 6bc:	80 37       	cpi	r24, 0x70	; 112
 6be:	19 f0       	breq	.+6      	; 0x6c6 <vfprintf+0x24e>
 6c0:	88 37       	cpi	r24, 0x78	; 120
 6c2:	21 f0       	breq	.+8      	; 0x6cc <vfprintf+0x254>
 6c4:	b0 c0       	rjmp	.+352    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 6c6:	e9 2f       	mov	r30, r25
 6c8:	e0 61       	ori	r30, 0x10	; 16
 6ca:	be 2e       	mov	r11, r30
 6cc:	b4 fe       	sbrs	r11, 4
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <vfprintf+0x272>
 6d0:	fb 2d       	mov	r31, r11
 6d2:	f4 60       	ori	r31, 0x04	; 4
 6d4:	bf 2e       	mov	r11, r31
 6d6:	09 c0       	rjmp	.+18     	; 0x6ea <vfprintf+0x272>
 6d8:	34 fe       	sbrs	r3, 4
 6da:	0a c0       	rjmp	.+20     	; 0x6f0 <vfprintf+0x278>
 6dc:	29 2f       	mov	r18, r25
 6de:	26 60       	ori	r18, 0x06	; 6
 6e0:	b2 2e       	mov	r11, r18
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0x278>
 6e4:	28 e0       	ldi	r18, 0x08	; 8
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <vfprintf+0x27c>
 6ea:	20 e1       	ldi	r18, 0x10	; 16
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <vfprintf+0x27c>
 6f0:	20 e1       	ldi	r18, 0x10	; 16
 6f2:	32 e0       	ldi	r19, 0x02	; 2
 6f4:	f8 01       	movw	r30, r16
 6f6:	b7 fe       	sbrs	r11, 7
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <vfprintf+0x290>
 6fa:	60 81       	ld	r22, Z
 6fc:	71 81       	ldd	r23, Z+1	; 0x01
 6fe:	82 81       	ldd	r24, Z+2	; 0x02
 700:	93 81       	ldd	r25, Z+3	; 0x03
 702:	0c 5f       	subi	r16, 0xFC	; 252
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	06 c0       	rjmp	.+12     	; 0x714 <vfprintf+0x29c>
 708:	60 81       	ld	r22, Z
 70a:	71 81       	ldd	r23, Z+1	; 0x01
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 5f       	subi	r16, 0xFE	; 254
 712:	1f 4f       	sbci	r17, 0xFF	; 255
 714:	a3 01       	movw	r20, r6
 716:	0e 94 6f 04 	call	0x8de	; 0x8de <__ultoa_invert>
 71a:	88 2e       	mov	r8, r24
 71c:	86 18       	sub	r8, r6
 71e:	fb 2d       	mov	r31, r11
 720:	ff 77       	andi	r31, 0x7F	; 127
 722:	3f 2e       	mov	r3, r31
 724:	36 fe       	sbrs	r3, 6
 726:	0d c0       	rjmp	.+26     	; 0x742 <vfprintf+0x2ca>
 728:	23 2d       	mov	r18, r3
 72a:	2e 7f       	andi	r18, 0xFE	; 254
 72c:	a2 2e       	mov	r10, r18
 72e:	89 14       	cp	r8, r9
 730:	58 f4       	brcc	.+22     	; 0x748 <vfprintf+0x2d0>
 732:	34 fe       	sbrs	r3, 4
 734:	0b c0       	rjmp	.+22     	; 0x74c <vfprintf+0x2d4>
 736:	32 fc       	sbrc	r3, 2
 738:	09 c0       	rjmp	.+18     	; 0x74c <vfprintf+0x2d4>
 73a:	83 2d       	mov	r24, r3
 73c:	8e 7e       	andi	r24, 0xEE	; 238
 73e:	a8 2e       	mov	r10, r24
 740:	05 c0       	rjmp	.+10     	; 0x74c <vfprintf+0x2d4>
 742:	b8 2c       	mov	r11, r8
 744:	a3 2c       	mov	r10, r3
 746:	03 c0       	rjmp	.+6      	; 0x74e <vfprintf+0x2d6>
 748:	b8 2c       	mov	r11, r8
 74a:	01 c0       	rjmp	.+2      	; 0x74e <vfprintf+0x2d6>
 74c:	b9 2c       	mov	r11, r9
 74e:	a4 fe       	sbrs	r10, 4
 750:	0f c0       	rjmp	.+30     	; 0x770 <vfprintf+0x2f8>
 752:	fe 01       	movw	r30, r28
 754:	e8 0d       	add	r30, r8
 756:	f1 1d       	adc	r31, r1
 758:	80 81       	ld	r24, Z
 75a:	80 33       	cpi	r24, 0x30	; 48
 75c:	21 f4       	brne	.+8      	; 0x766 <vfprintf+0x2ee>
 75e:	9a 2d       	mov	r25, r10
 760:	99 7e       	andi	r25, 0xE9	; 233
 762:	a9 2e       	mov	r10, r25
 764:	09 c0       	rjmp	.+18     	; 0x778 <vfprintf+0x300>
 766:	a2 fe       	sbrs	r10, 2
 768:	06 c0       	rjmp	.+12     	; 0x776 <vfprintf+0x2fe>
 76a:	b3 94       	inc	r11
 76c:	b3 94       	inc	r11
 76e:	04 c0       	rjmp	.+8      	; 0x778 <vfprintf+0x300>
 770:	8a 2d       	mov	r24, r10
 772:	86 78       	andi	r24, 0x86	; 134
 774:	09 f0       	breq	.+2      	; 0x778 <vfprintf+0x300>
 776:	b3 94       	inc	r11
 778:	a3 fc       	sbrc	r10, 3
 77a:	11 c0       	rjmp	.+34     	; 0x79e <vfprintf+0x326>
 77c:	a0 fe       	sbrs	r10, 0
 77e:	06 c0       	rjmp	.+12     	; 0x78c <vfprintf+0x314>
 780:	b2 14       	cp	r11, r2
 782:	88 f4       	brcc	.+34     	; 0x7a6 <vfprintf+0x32e>
 784:	28 0c       	add	r2, r8
 786:	92 2c       	mov	r9, r2
 788:	9b 18       	sub	r9, r11
 78a:	0e c0       	rjmp	.+28     	; 0x7a8 <vfprintf+0x330>
 78c:	b2 14       	cp	r11, r2
 78e:	60 f4       	brcc	.+24     	; 0x7a8 <vfprintf+0x330>
 790:	b6 01       	movw	r22, r12
 792:	80 e2       	ldi	r24, 0x20	; 32
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 79a:	b3 94       	inc	r11
 79c:	f7 cf       	rjmp	.-18     	; 0x78c <vfprintf+0x314>
 79e:	b2 14       	cp	r11, r2
 7a0:	18 f4       	brcc	.+6      	; 0x7a8 <vfprintf+0x330>
 7a2:	2b 18       	sub	r2, r11
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0x332>
 7a6:	98 2c       	mov	r9, r8
 7a8:	21 2c       	mov	r2, r1
 7aa:	a4 fe       	sbrs	r10, 4
 7ac:	10 c0       	rjmp	.+32     	; 0x7ce <vfprintf+0x356>
 7ae:	b6 01       	movw	r22, r12
 7b0:	80 e3       	ldi	r24, 0x30	; 48
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 7b8:	a2 fe       	sbrs	r10, 2
 7ba:	17 c0       	rjmp	.+46     	; 0x7ea <vfprintf+0x372>
 7bc:	a1 fc       	sbrc	r10, 1
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <vfprintf+0x34e>
 7c0:	88 e7       	ldi	r24, 0x78	; 120
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x352>
 7c6:	88 e5       	ldi	r24, 0x58	; 88
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	b6 01       	movw	r22, r12
 7cc:	0c c0       	rjmp	.+24     	; 0x7e6 <vfprintf+0x36e>
 7ce:	8a 2d       	mov	r24, r10
 7d0:	86 78       	andi	r24, 0x86	; 134
 7d2:	59 f0       	breq	.+22     	; 0x7ea <vfprintf+0x372>
 7d4:	a1 fe       	sbrs	r10, 1
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x364>
 7d8:	8b e2       	ldi	r24, 0x2B	; 43
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x366>
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	a7 fc       	sbrc	r10, 7
 7e0:	8d e2       	ldi	r24, 0x2D	; 45
 7e2:	b6 01       	movw	r22, r12
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 7ea:	89 14       	cp	r8, r9
 7ec:	38 f4       	brcc	.+14     	; 0x7fc <vfprintf+0x384>
 7ee:	b6 01       	movw	r22, r12
 7f0:	80 e3       	ldi	r24, 0x30	; 48
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 7f8:	9a 94       	dec	r9
 7fa:	f7 cf       	rjmp	.-18     	; 0x7ea <vfprintf+0x372>
 7fc:	8a 94       	dec	r8
 7fe:	f3 01       	movw	r30, r6
 800:	e8 0d       	add	r30, r8
 802:	f1 1d       	adc	r31, r1
 804:	80 81       	ld	r24, Z
 806:	b6 01       	movw	r22, r12
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 80e:	81 10       	cpse	r8, r1
 810:	f5 cf       	rjmp	.-22     	; 0x7fc <vfprintf+0x384>
 812:	22 20       	and	r2, r2
 814:	09 f4       	brne	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 816:	42 ce       	rjmp	.-892    	; 0x49c <vfprintf+0x24>
 818:	b6 01       	movw	r22, r12
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 822:	2a 94       	dec	r2
 824:	f6 cf       	rjmp	.-20     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 826:	f6 01       	movw	r30, r12
 828:	86 81       	ldd	r24, Z+6	; 0x06
 82a:	97 81       	ldd	r25, Z+7	; 0x07
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	2b 96       	adiw	r28, 0x0b	; 11
 834:	e2 e1       	ldi	r30, 0x12	; 18
 836:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__epilogue_restores__>

0000083a <strnlen_P>:
 83a:	fc 01       	movw	r30, r24
 83c:	05 90       	lpm	r0, Z+
 83e:	61 50       	subi	r22, 0x01	; 1
 840:	70 40       	sbci	r23, 0x00	; 0
 842:	01 10       	cpse	r0, r1
 844:	d8 f7       	brcc	.-10     	; 0x83c <strnlen_P+0x2>
 846:	80 95       	com	r24
 848:	90 95       	com	r25
 84a:	8e 0f       	add	r24, r30
 84c:	9f 1f       	adc	r25, r31
 84e:	08 95       	ret

00000850 <strnlen>:
 850:	fc 01       	movw	r30, r24
 852:	61 50       	subi	r22, 0x01	; 1
 854:	70 40       	sbci	r23, 0x00	; 0
 856:	01 90       	ld	r0, Z+
 858:	01 10       	cpse	r0, r1
 85a:	d8 f7       	brcc	.-10     	; 0x852 <strnlen+0x2>
 85c:	80 95       	com	r24
 85e:	90 95       	com	r25
 860:	8e 0f       	add	r24, r30
 862:	9f 1f       	adc	r25, r31
 864:	08 95       	ret

00000866 <fputc>:
 866:	0f 93       	push	r16
 868:	1f 93       	push	r17
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	fb 01       	movw	r30, r22
 870:	23 81       	ldd	r18, Z+3	; 0x03
 872:	21 fd       	sbrc	r18, 1
 874:	03 c0       	rjmp	.+6      	; 0x87c <fputc+0x16>
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	9f ef       	ldi	r25, 0xFF	; 255
 87a:	2c c0       	rjmp	.+88     	; 0x8d4 <fputc+0x6e>
 87c:	22 ff       	sbrs	r18, 2
 87e:	16 c0       	rjmp	.+44     	; 0x8ac <fputc+0x46>
 880:	46 81       	ldd	r20, Z+6	; 0x06
 882:	57 81       	ldd	r21, Z+7	; 0x07
 884:	24 81       	ldd	r18, Z+4	; 0x04
 886:	35 81       	ldd	r19, Z+5	; 0x05
 888:	42 17       	cp	r20, r18
 88a:	53 07       	cpc	r21, r19
 88c:	44 f4       	brge	.+16     	; 0x89e <fputc+0x38>
 88e:	a0 81       	ld	r26, Z
 890:	b1 81       	ldd	r27, Z+1	; 0x01
 892:	9d 01       	movw	r18, r26
 894:	2f 5f       	subi	r18, 0xFF	; 255
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	31 83       	std	Z+1, r19	; 0x01
 89a:	20 83       	st	Z, r18
 89c:	8c 93       	st	X, r24
 89e:	26 81       	ldd	r18, Z+6	; 0x06
 8a0:	37 81       	ldd	r19, Z+7	; 0x07
 8a2:	2f 5f       	subi	r18, 0xFF	; 255
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	37 83       	std	Z+7, r19	; 0x07
 8a8:	26 83       	std	Z+6, r18	; 0x06
 8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <fputc+0x6e>
 8ac:	8b 01       	movw	r16, r22
 8ae:	ec 01       	movw	r28, r24
 8b0:	fb 01       	movw	r30, r22
 8b2:	00 84       	ldd	r0, Z+8	; 0x08
 8b4:	f1 85       	ldd	r31, Z+9	; 0x09
 8b6:	e0 2d       	mov	r30, r0
 8b8:	09 95       	icall
 8ba:	89 2b       	or	r24, r25
 8bc:	e1 f6       	brne	.-72     	; 0x876 <fputc+0x10>
 8be:	d8 01       	movw	r26, r16
 8c0:	16 96       	adiw	r26, 0x06	; 6
 8c2:	8d 91       	ld	r24, X+
 8c4:	9c 91       	ld	r25, X
 8c6:	17 97       	sbiw	r26, 0x07	; 7
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	17 96       	adiw	r26, 0x07	; 7
 8cc:	9c 93       	st	X, r25
 8ce:	8e 93       	st	-X, r24
 8d0:	16 97       	sbiw	r26, 0x06	; 6
 8d2:	ce 01       	movw	r24, r28
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	08 95       	ret

000008de <__ultoa_invert>:
 8de:	fa 01       	movw	r30, r20
 8e0:	aa 27       	eor	r26, r26
 8e2:	28 30       	cpi	r18, 0x08	; 8
 8e4:	51 f1       	breq	.+84     	; 0x93a <__stack+0x3b>
 8e6:	20 31       	cpi	r18, 0x10	; 16
 8e8:	81 f1       	breq	.+96     	; 0x94a <__stack+0x4b>
 8ea:	e8 94       	clt
 8ec:	6f 93       	push	r22
 8ee:	6e 7f       	andi	r22, 0xFE	; 254
 8f0:	6e 5f       	subi	r22, 0xFE	; 254
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	af 4f       	sbci	r26, 0xFF	; 255
 8fa:	b1 e0       	ldi	r27, 0x01	; 1
 8fc:	3e d0       	rcall	.+124    	; 0x97a <__stack+0x7b>
 8fe:	b4 e0       	ldi	r27, 0x04	; 4
 900:	3c d0       	rcall	.+120    	; 0x97a <__stack+0x7b>
 902:	67 0f       	add	r22, r23
 904:	78 1f       	adc	r23, r24
 906:	89 1f       	adc	r24, r25
 908:	9a 1f       	adc	r25, r26
 90a:	a1 1d       	adc	r26, r1
 90c:	68 0f       	add	r22, r24
 90e:	79 1f       	adc	r23, r25
 910:	8a 1f       	adc	r24, r26
 912:	91 1d       	adc	r25, r1
 914:	a1 1d       	adc	r26, r1
 916:	6a 0f       	add	r22, r26
 918:	71 1d       	adc	r23, r1
 91a:	81 1d       	adc	r24, r1
 91c:	91 1d       	adc	r25, r1
 91e:	a1 1d       	adc	r26, r1
 920:	20 d0       	rcall	.+64     	; 0x962 <__stack+0x63>
 922:	09 f4       	brne	.+2      	; 0x926 <__stack+0x27>
 924:	68 94       	set
 926:	3f 91       	pop	r19
 928:	2a e0       	ldi	r18, 0x0A	; 10
 92a:	26 9f       	mul	r18, r22
 92c:	11 24       	eor	r1, r1
 92e:	30 19       	sub	r19, r0
 930:	30 5d       	subi	r19, 0xD0	; 208
 932:	31 93       	st	Z+, r19
 934:	de f6       	brtc	.-74     	; 0x8ec <__ultoa_invert+0xe>
 936:	cf 01       	movw	r24, r30
 938:	08 95       	ret
 93a:	46 2f       	mov	r20, r22
 93c:	47 70       	andi	r20, 0x07	; 7
 93e:	40 5d       	subi	r20, 0xD0	; 208
 940:	41 93       	st	Z+, r20
 942:	b3 e0       	ldi	r27, 0x03	; 3
 944:	0f d0       	rcall	.+30     	; 0x964 <__stack+0x65>
 946:	c9 f7       	brne	.-14     	; 0x93a <__stack+0x3b>
 948:	f6 cf       	rjmp	.-20     	; 0x936 <__stack+0x37>
 94a:	46 2f       	mov	r20, r22
 94c:	4f 70       	andi	r20, 0x0F	; 15
 94e:	40 5d       	subi	r20, 0xD0	; 208
 950:	4a 33       	cpi	r20, 0x3A	; 58
 952:	18 f0       	brcs	.+6      	; 0x95a <__stack+0x5b>
 954:	49 5d       	subi	r20, 0xD9	; 217
 956:	31 fd       	sbrc	r19, 1
 958:	40 52       	subi	r20, 0x20	; 32
 95a:	41 93       	st	Z+, r20
 95c:	02 d0       	rcall	.+4      	; 0x962 <__stack+0x63>
 95e:	a9 f7       	brne	.-22     	; 0x94a <__stack+0x4b>
 960:	ea cf       	rjmp	.-44     	; 0x936 <__stack+0x37>
 962:	b4 e0       	ldi	r27, 0x04	; 4
 964:	a6 95       	lsr	r26
 966:	97 95       	ror	r25
 968:	87 95       	ror	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	ba 95       	dec	r27
 970:	c9 f7       	brne	.-14     	; 0x964 <__stack+0x65>
 972:	00 97       	sbiw	r24, 0x00	; 0
 974:	61 05       	cpc	r22, r1
 976:	71 05       	cpc	r23, r1
 978:	08 95       	ret
 97a:	9b 01       	movw	r18, r22
 97c:	ac 01       	movw	r20, r24
 97e:	0a 2e       	mov	r0, r26
 980:	06 94       	lsr	r0
 982:	57 95       	ror	r21
 984:	47 95       	ror	r20
 986:	37 95       	ror	r19
 988:	27 95       	ror	r18
 98a:	ba 95       	dec	r27
 98c:	c9 f7       	brne	.-14     	; 0x980 <__stack+0x81>
 98e:	62 0f       	add	r22, r18
 990:	73 1f       	adc	r23, r19
 992:	84 1f       	adc	r24, r20
 994:	95 1f       	adc	r25, r21
 996:	a0 1d       	adc	r26, r0
 998:	08 95       	ret

0000099a <__prologue_saves__>:
 99a:	2f 92       	push	r2
 99c:	3f 92       	push	r3
 99e:	4f 92       	push	r4
 9a0:	5f 92       	push	r5
 9a2:	6f 92       	push	r6
 9a4:	7f 92       	push	r7
 9a6:	8f 92       	push	r8
 9a8:	9f 92       	push	r9
 9aa:	af 92       	push	r10
 9ac:	bf 92       	push	r11
 9ae:	cf 92       	push	r12
 9b0:	df 92       	push	r13
 9b2:	ef 92       	push	r14
 9b4:	ff 92       	push	r15
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
 9c2:	ca 1b       	sub	r28, r26
 9c4:	db 0b       	sbc	r29, r27
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	f8 94       	cli
 9ca:	de bf       	out	0x3e, r29	; 62
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	cd bf       	out	0x3d, r28	; 61
 9d0:	09 94       	ijmp

000009d2 <__epilogue_restores__>:
 9d2:	2a 88       	ldd	r2, Y+18	; 0x12
 9d4:	39 88       	ldd	r3, Y+17	; 0x11
 9d6:	48 88       	ldd	r4, Y+16	; 0x10
 9d8:	5f 84       	ldd	r5, Y+15	; 0x0f
 9da:	6e 84       	ldd	r6, Y+14	; 0x0e
 9dc:	7d 84       	ldd	r7, Y+13	; 0x0d
 9de:	8c 84       	ldd	r8, Y+12	; 0x0c
 9e0:	9b 84       	ldd	r9, Y+11	; 0x0b
 9e2:	aa 84       	ldd	r10, Y+10	; 0x0a
 9e4:	b9 84       	ldd	r11, Y+9	; 0x09
 9e6:	c8 84       	ldd	r12, Y+8	; 0x08
 9e8:	df 80       	ldd	r13, Y+7	; 0x07
 9ea:	ee 80       	ldd	r14, Y+6	; 0x06
 9ec:	fd 80       	ldd	r15, Y+5	; 0x05
 9ee:	0c 81       	ldd	r16, Y+4	; 0x04
 9f0:	1b 81       	ldd	r17, Y+3	; 0x03
 9f2:	aa 81       	ldd	r26, Y+2	; 0x02
 9f4:	b9 81       	ldd	r27, Y+1	; 0x01
 9f6:	ce 0f       	add	r28, r30
 9f8:	d1 1d       	adc	r29, r1
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	f8 94       	cli
 9fe:	de bf       	out	0x3e, r29	; 62
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	cd bf       	out	0x3d, r28	; 61
 a04:	ed 01       	movw	r28, r26
 a06:	08 95       	ret

00000a08 <_exit>:
 a08:	f8 94       	cli

00000a0a <__stop_program>:
 a0a:	ff cf       	rjmp	.-2      	; 0xa0a <__stop_program>
