
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  0000089c  00000930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  008001bc  008001bc  000009ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b85  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d9  00000000  00000000  000016a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054a  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ee  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ed  00000000  00000000  00002afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3b       	cpi	r26, 0xBC	; 188
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac eb       	ldi	r26, 0xBC	; 188
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 4c 04 	jmp	0x898	; 0x898 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  dc:	08 95       	ret

000000de <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	6c 01       	movw	r12, r24
  f0:	7b 01       	movw	r14, r22
  f2:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < num_channels; i++) {
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	11 c0       	rjmp	.+34     	; 0x11a <ADC_Read_Multiple+0x3c>
		results[i] = ADC_Read(channels[i]);
  f8:	8c 2f       	mov	r24, r28
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	8c 01       	movw	r16, r24
  fe:	00 0f       	add	r16, r16
 100:	11 1f       	adc	r17, r17
 102:	0e 0d       	add	r16, r14
 104:	1f 1d       	adc	r17, r15
 106:	f6 01       	movw	r30, r12
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	80 81       	ld	r24, Z
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Read>
 112:	f8 01       	movw	r30, r16
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
	// Devuelve el resultado de la conversión
	return ADC;
}

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
	for (uint8_t i = 0; i < num_channels; i++) {
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	cd 17       	cp	r28, r29
 11c:	68 f3       	brcs	.-38     	; 0xf8 <ADC_Read_Multiple+0x1a>
		results[i] = ADC_Read(channels[i]);
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	08 95       	ret

00000130 <UART_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "UART.h"

void UART_Init(unsigned long baud_rate) {
 130:	9b 01       	movw	r18, r22
 132:	ac 01       	movw	r20, r24
	unsigned int ubrr = F_CPU / 16 / baud_rate - 1;
 134:	60 e4       	ldi	r22, 0x40	; 64
 136:	72 e4       	ldi	r23, 0x42	; 66
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 32 01 	call	0x264	; 0x264 <__udivmodsi4>
 140:	21 50       	subi	r18, 0x01	; 1
 142:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 144:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 148:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar el receptor y el transmisor
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar el formato de datos: 8 bits
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 158:	08 95       	ret

0000015a <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
 15a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15e:	95 ff       	sbrs	r25, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <UART_Transmit>
	UDR0 = data;  // Enviar el dato
 162:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 166:	08 95       	ret

00000168 <UART_Receive>:
}

unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
 168:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16c:	88 23       	and	r24, r24
 16e:	e4 f7       	brge	.-8      	; 0x168 <UART_Receive>
	return UDR0;  // Leer el dato recibido
 170:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 174:	08 95       	ret

00000176 <UART_TransmitString>:

void UART_TransmitString(const char *str) {
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	while (*str) {
 17c:	03 c0       	rjmp	.+6      	; 0x184 <UART_TransmitString+0xe>
		UART_Transmit(*str++);
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_Transmit>
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
	return UDR0;  // Leer el dato recibido
}

void UART_TransmitString(const char *str) {
	while (*str) {
 184:	88 81       	ld	r24, Y
 186:	81 11       	cpse	r24, r1
 188:	fa cf       	rjmp	.-12     	; 0x17e <UART_TransmitString+0x8>
		UART_Transmit(*str++);
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <display_menu>:
////////////////////////////////////////////////////
// Funciones auxiliares
////////////////////////////////////////////////////

void display_menu(void) {
	UART_TransmitString("\r\n***** Menu *****\r\n");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("1. Mostrar valores de ADC\r\n");
 198:	85 e1       	ldi	r24, 0x15	; 21
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("*****************\r\n");
 1a0:	81 e3       	ldi	r24, 0x31	; 49
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
	UART_TransmitString("Seleccione una opción: ");
 1a8:	85 e4       	ldi	r24, 0x45	; 69
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
 1b0:	08 95       	ret

000001b2 <process_command>:
}

void process_command(char command) {
	switch (command) {
 1b2:	81 33       	cpi	r24, 0x31	; 49
 1b4:	21 f5       	brne	.+72     	; 0x1fe <process_command+0x4c>
		case '1':
		snprintf(buffer, sizeof(buffer), "Valores ADC - ADC6: %u, ADC7: %u\r\n", adc_results[0], adc_results[1]);
 1b6:	e0 e0       	ldi	r30, 0x00	; 0
 1b8:	f2 e0       	ldi	r31, 0x02	; 2
 1ba:	83 81       	ldd	r24, Z+3	; 0x03
 1bc:	8f 93       	push	r24
 1be:	82 81       	ldd	r24, Z+2	; 0x02
 1c0:	8f 93       	push	r24
 1c2:	81 81       	ldd	r24, Z+1	; 0x01
 1c4:	8f 93       	push	r24
 1c6:	80 81       	ld	r24, Z
 1c8:	8f 93       	push	r24
 1ca:	8d e5       	ldi	r24, 0x5D	; 93
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	9f 93       	push	r25
 1d0:	8f 93       	push	r24
 1d2:	1f 92       	push	r1
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	8f 93       	push	r24
 1d8:	8e eb       	ldi	r24, 0xBE	; 190
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	9f 93       	push	r25
 1de:	8f 93       	push	r24
 1e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <snprintf>
		UART_TransmitString(buffer);
 1e4:	8e eb       	ldi	r24, 0xBE	; 190
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
		break;
 1ec:	8d b7       	in	r24, 0x3d	; 61
 1ee:	9e b7       	in	r25, 0x3e	; 62
 1f0:	0a 96       	adiw	r24, 0x0a	; 10
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	9e bf       	out	0x3e, r25	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	8d bf       	out	0x3d, r24	; 61
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <process_command+0x54>
		default:
		UART_TransmitString("Opción inválida. Por favor, seleccione una opción válida.\r\n");
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 bb 00 	call	0x176	; 0x176 <UART_TransmitString>
		break;
	}
	display_menu();
 206:	0e 94 c8 00 	call	0x190	; 0x190 <display_menu>
 20a:	08 95       	ret

0000020c <main>:
////////////////////////////////////////////////////
// Programa Principal
////////////////////////////////////////////////////

int main(void)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	00 d0       	rcall	.+0      	; 0x212 <main+0x6>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	
	ADC_Init();  // Inicializa el ADC
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	UART_Init(BAUD);  // Inicializa la UART
 21a:	60 e8       	ldi	r22, 0x80	; 128
 21c:	75 e2       	ldi	r23, 0x25	; 37
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 98 00 	call	0x130	; 0x130 <UART_Init>

	uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	8a 83       	std	Y+2, r24	; 0x02


	// Mostrar el menú inicial en la consola
	display_menu();
 22e:	0e 94 c8 00 	call	0x190	; 0x190 <display_menu>

	while (1)
	{
		// Leer los valores de los ADC
		ADC_Read_Multiple(adc_channels, adc_results, 2);
 232:	42 e0       	ldi	r20, 0x02	; 2
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	72 e0       	ldi	r23, 0x02	; 2
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 6f 00 	call	0xde	; 0xde <ADC_Read_Multiple>

		// Leer y procesar los comandos de la UART
		if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles en el buffer de recepción
 240:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 244:	88 23       	and	r24, r24
 246:	24 f4       	brge	.+8      	; 0x250 <main+0x44>
			char received_char = UART_Receive();
 248:	0e 94 b4 00 	call	0x168	; 0x168 <UART_Receive>
			process_command(received_char);
 24c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <process_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	89 e6       	ldi	r24, 0x69	; 105
 254:	98 e1       	ldi	r25, 0x18	; 24
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x4a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x54>
 260:	00 00       	nop
 262:	e7 cf       	rjmp	.-50     	; 0x232 <main+0x26>

00000264 <__udivmodsi4>:
 264:	a1 e2       	ldi	r26, 0x21	; 33
 266:	1a 2e       	mov	r1, r26
 268:	aa 1b       	sub	r26, r26
 26a:	bb 1b       	sub	r27, r27
 26c:	fd 01       	movw	r30, r26
 26e:	0d c0       	rjmp	.+26     	; 0x28a <__udivmodsi4_ep>

00000270 <__udivmodsi4_loop>:
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	ee 1f       	adc	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	a2 17       	cp	r26, r18
 27a:	b3 07       	cpc	r27, r19
 27c:	e4 07       	cpc	r30, r20
 27e:	f5 07       	cpc	r31, r21
 280:	20 f0       	brcs	.+8      	; 0x28a <__udivmodsi4_ep>
 282:	a2 1b       	sub	r26, r18
 284:	b3 0b       	sbc	r27, r19
 286:	e4 0b       	sbc	r30, r20
 288:	f5 0b       	sbc	r31, r21

0000028a <__udivmodsi4_ep>:
 28a:	66 1f       	adc	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	1a 94       	dec	r1
 294:	69 f7       	brne	.-38     	; 0x270 <__udivmodsi4_loop>
 296:	60 95       	com	r22
 298:	70 95       	com	r23
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	bd 01       	movw	r22, r26
 2a4:	cf 01       	movw	r24, r30
 2a6:	08 95       	ret

000002a8 <snprintf>:
 2a8:	ae e0       	ldi	r26, 0x0E	; 14
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	ea e5       	ldi	r30, 0x5A	; 90
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	0c 94 23 04 	jmp	0x846	; 0x846 <__prologue_saves__+0x1c>
 2b4:	0d 89       	ldd	r16, Y+21	; 0x15
 2b6:	1e 89       	ldd	r17, Y+22	; 0x16
 2b8:	8f 89       	ldd	r24, Y+23	; 0x17
 2ba:	98 8d       	ldd	r25, Y+24	; 0x18
 2bc:	26 e0       	ldi	r18, 0x06	; 6
 2be:	2c 83       	std	Y+4, r18	; 0x04
 2c0:	1a 83       	std	Y+2, r17	; 0x02
 2c2:	09 83       	std	Y+1, r16	; 0x01
 2c4:	97 ff       	sbrs	r25, 7
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <snprintf+0x24>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e8       	ldi	r25, 0x80	; 128
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	9e 83       	std	Y+6, r25	; 0x06
 2d0:	8d 83       	std	Y+5, r24	; 0x05
 2d2:	ae 01       	movw	r20, r28
 2d4:	45 5e       	subi	r20, 0xE5	; 229
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	69 8d       	ldd	r22, Y+25	; 0x19
 2da:	7a 8d       	ldd	r23, Y+26	; 0x1a
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	0e 94 84 01 	call	0x308	; 0x308 <vfprintf>
 2e4:	4d 81       	ldd	r20, Y+5	; 0x05
 2e6:	5e 81       	ldd	r21, Y+6	; 0x06
 2e8:	57 fd       	sbrc	r21, 7
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <snprintf+0x58>
 2ec:	2f 81       	ldd	r18, Y+7	; 0x07
 2ee:	38 85       	ldd	r19, Y+8	; 0x08
 2f0:	42 17       	cp	r20, r18
 2f2:	53 07       	cpc	r21, r19
 2f4:	0c f4       	brge	.+2      	; 0x2f8 <snprintf+0x50>
 2f6:	9a 01       	movw	r18, r20
 2f8:	f8 01       	movw	r30, r16
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	10 82       	st	Z, r1
 300:	2e 96       	adiw	r28, 0x0e	; 14
 302:	e4 e0       	ldi	r30, 0x04	; 4
 304:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__epilogue_restores__+0x1c>

00000308 <vfprintf>:
 308:	ab e0       	ldi	r26, 0x0B	; 11
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	ea e8       	ldi	r30, 0x8A	; 138
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	0c 94 15 04 	jmp	0x82a	; 0x82a <__prologue_saves__>
 314:	6c 01       	movw	r12, r24
 316:	7b 01       	movw	r14, r22
 318:	8a 01       	movw	r16, r20
 31a:	fc 01       	movw	r30, r24
 31c:	17 82       	std	Z+7, r1	; 0x07
 31e:	16 82       	std	Z+6, r1	; 0x06
 320:	83 81       	ldd	r24, Z+3	; 0x03
 322:	81 ff       	sbrs	r24, 1
 324:	cc c1       	rjmp	.+920    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
 326:	ce 01       	movw	r24, r28
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	3c 01       	movw	r6, r24
 32c:	f6 01       	movw	r30, r12
 32e:	93 81       	ldd	r25, Z+3	; 0x03
 330:	f7 01       	movw	r30, r14
 332:	93 fd       	sbrc	r25, 3
 334:	85 91       	lpm	r24, Z+
 336:	93 ff       	sbrs	r25, 3
 338:	81 91       	ld	r24, Z+
 33a:	7f 01       	movw	r14, r30
 33c:	88 23       	and	r24, r24
 33e:	09 f4       	brne	.+2      	; 0x342 <vfprintf+0x3a>
 340:	ba c1       	rjmp	.+884    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 342:	85 32       	cpi	r24, 0x25	; 37
 344:	39 f4       	brne	.+14     	; 0x354 <vfprintf+0x4c>
 346:	93 fd       	sbrc	r25, 3
 348:	85 91       	lpm	r24, Z+
 34a:	93 ff       	sbrs	r25, 3
 34c:	81 91       	ld	r24, Z+
 34e:	7f 01       	movw	r14, r30
 350:	85 32       	cpi	r24, 0x25	; 37
 352:	29 f4       	brne	.+10     	; 0x35e <vfprintf+0x56>
 354:	b6 01       	movw	r22, r12
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 35c:	e7 cf       	rjmp	.-50     	; 0x32c <vfprintf+0x24>
 35e:	91 2c       	mov	r9, r1
 360:	21 2c       	mov	r2, r1
 362:	31 2c       	mov	r3, r1
 364:	ff e1       	ldi	r31, 0x1F	; 31
 366:	f3 15       	cp	r31, r3
 368:	d8 f0       	brcs	.+54     	; 0x3a0 <vfprintf+0x98>
 36a:	8b 32       	cpi	r24, 0x2B	; 43
 36c:	79 f0       	breq	.+30     	; 0x38c <vfprintf+0x84>
 36e:	38 f4       	brcc	.+14     	; 0x37e <vfprintf+0x76>
 370:	80 32       	cpi	r24, 0x20	; 32
 372:	79 f0       	breq	.+30     	; 0x392 <vfprintf+0x8a>
 374:	83 32       	cpi	r24, 0x23	; 35
 376:	a1 f4       	brne	.+40     	; 0x3a0 <vfprintf+0x98>
 378:	23 2d       	mov	r18, r3
 37a:	20 61       	ori	r18, 0x10	; 16
 37c:	1d c0       	rjmp	.+58     	; 0x3b8 <vfprintf+0xb0>
 37e:	8d 32       	cpi	r24, 0x2D	; 45
 380:	61 f0       	breq	.+24     	; 0x39a <vfprintf+0x92>
 382:	80 33       	cpi	r24, 0x30	; 48
 384:	69 f4       	brne	.+26     	; 0x3a0 <vfprintf+0x98>
 386:	23 2d       	mov	r18, r3
 388:	21 60       	ori	r18, 0x01	; 1
 38a:	16 c0       	rjmp	.+44     	; 0x3b8 <vfprintf+0xb0>
 38c:	83 2d       	mov	r24, r3
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	38 2e       	mov	r3, r24
 392:	e3 2d       	mov	r30, r3
 394:	e4 60       	ori	r30, 0x04	; 4
 396:	3e 2e       	mov	r3, r30
 398:	2a c0       	rjmp	.+84     	; 0x3ee <vfprintf+0xe6>
 39a:	f3 2d       	mov	r31, r3
 39c:	f8 60       	ori	r31, 0x08	; 8
 39e:	1d c0       	rjmp	.+58     	; 0x3da <vfprintf+0xd2>
 3a0:	37 fc       	sbrc	r3, 7
 3a2:	2d c0       	rjmp	.+90     	; 0x3fe <vfprintf+0xf6>
 3a4:	20 ed       	ldi	r18, 0xD0	; 208
 3a6:	28 0f       	add	r18, r24
 3a8:	2a 30       	cpi	r18, 0x0A	; 10
 3aa:	40 f0       	brcs	.+16     	; 0x3bc <vfprintf+0xb4>
 3ac:	8e 32       	cpi	r24, 0x2E	; 46
 3ae:	b9 f4       	brne	.+46     	; 0x3de <vfprintf+0xd6>
 3b0:	36 fc       	sbrc	r3, 6
 3b2:	81 c1       	rjmp	.+770    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 3b4:	23 2d       	mov	r18, r3
 3b6:	20 64       	ori	r18, 0x40	; 64
 3b8:	32 2e       	mov	r3, r18
 3ba:	19 c0       	rjmp	.+50     	; 0x3ee <vfprintf+0xe6>
 3bc:	36 fe       	sbrs	r3, 6
 3be:	06 c0       	rjmp	.+12     	; 0x3cc <vfprintf+0xc4>
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	98 9e       	mul	r9, r24
 3c4:	20 0d       	add	r18, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	92 2e       	mov	r9, r18
 3ca:	11 c0       	rjmp	.+34     	; 0x3ee <vfprintf+0xe6>
 3cc:	ea e0       	ldi	r30, 0x0A	; 10
 3ce:	2e 9e       	mul	r2, r30
 3d0:	20 0d       	add	r18, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	22 2e       	mov	r2, r18
 3d6:	f3 2d       	mov	r31, r3
 3d8:	f0 62       	ori	r31, 0x20	; 32
 3da:	3f 2e       	mov	r3, r31
 3dc:	08 c0       	rjmp	.+16     	; 0x3ee <vfprintf+0xe6>
 3de:	8c 36       	cpi	r24, 0x6C	; 108
 3e0:	21 f4       	brne	.+8      	; 0x3ea <vfprintf+0xe2>
 3e2:	83 2d       	mov	r24, r3
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	38 2e       	mov	r3, r24
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <vfprintf+0xe6>
 3ea:	88 36       	cpi	r24, 0x68	; 104
 3ec:	41 f4       	brne	.+16     	; 0x3fe <vfprintf+0xf6>
 3ee:	f7 01       	movw	r30, r14
 3f0:	93 fd       	sbrc	r25, 3
 3f2:	85 91       	lpm	r24, Z+
 3f4:	93 ff       	sbrs	r25, 3
 3f6:	81 91       	ld	r24, Z+
 3f8:	7f 01       	movw	r14, r30
 3fa:	81 11       	cpse	r24, r1
 3fc:	b3 cf       	rjmp	.-154    	; 0x364 <vfprintf+0x5c>
 3fe:	98 2f       	mov	r25, r24
 400:	9f 7d       	andi	r25, 0xDF	; 223
 402:	95 54       	subi	r25, 0x45	; 69
 404:	93 30       	cpi	r25, 0x03	; 3
 406:	28 f4       	brcc	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 408:	0c 5f       	subi	r16, 0xFC	; 252
 40a:	1f 4f       	sbci	r17, 0xFF	; 255
 40c:	9f e3       	ldi	r25, 0x3F	; 63
 40e:	99 83       	std	Y+1, r25	; 0x01
 410:	0d c0       	rjmp	.+26     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 412:	83 36       	cpi	r24, 0x63	; 99
 414:	31 f0       	breq	.+12     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 416:	83 37       	cpi	r24, 0x73	; 115
 418:	71 f0       	breq	.+28     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41a:	83 35       	cpi	r24, 0x53	; 83
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	59 c0       	rjmp	.+178    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 420:	21 c0       	rjmp	.+66     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 422:	f8 01       	movw	r30, r16
 424:	80 81       	ld	r24, Z
 426:	89 83       	std	Y+1, r24	; 0x01
 428:	0e 5f       	subi	r16, 0xFE	; 254
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
 42c:	88 24       	eor	r8, r8
 42e:	83 94       	inc	r8
 430:	91 2c       	mov	r9, r1
 432:	53 01       	movw	r10, r6
 434:	13 c0       	rjmp	.+38     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 436:	28 01       	movw	r4, r16
 438:	f2 e0       	ldi	r31, 0x02	; 2
 43a:	4f 0e       	add	r4, r31
 43c:	51 1c       	adc	r5, r1
 43e:	f8 01       	movw	r30, r16
 440:	a0 80       	ld	r10, Z
 442:	b1 80       	ldd	r11, Z+1	; 0x01
 444:	36 fe       	sbrs	r3, 6
 446:	03 c0       	rjmp	.+6      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 448:	69 2d       	mov	r22, r9
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	6f ef       	ldi	r22, 0xFF	; 255
 450:	7f ef       	ldi	r23, 0xFF	; 255
 452:	c5 01       	movw	r24, r10
 454:	0e 94 70 03 	call	0x6e0	; 0x6e0 <strnlen>
 458:	4c 01       	movw	r8, r24
 45a:	82 01       	movw	r16, r4
 45c:	f3 2d       	mov	r31, r3
 45e:	ff 77       	andi	r31, 0x7F	; 127
 460:	3f 2e       	mov	r3, r31
 462:	16 c0       	rjmp	.+44     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 464:	28 01       	movw	r4, r16
 466:	22 e0       	ldi	r18, 0x02	; 2
 468:	42 0e       	add	r4, r18
 46a:	51 1c       	adc	r5, r1
 46c:	f8 01       	movw	r30, r16
 46e:	a0 80       	ld	r10, Z
 470:	b1 80       	ldd	r11, Z+1	; 0x01
 472:	36 fe       	sbrs	r3, 6
 474:	03 c0       	rjmp	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 476:	69 2d       	mov	r22, r9
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	6f ef       	ldi	r22, 0xFF	; 255
 47e:	7f ef       	ldi	r23, 0xFF	; 255
 480:	c5 01       	movw	r24, r10
 482:	0e 94 65 03 	call	0x6ca	; 0x6ca <strnlen_P>
 486:	4c 01       	movw	r8, r24
 488:	f3 2d       	mov	r31, r3
 48a:	f0 68       	ori	r31, 0x80	; 128
 48c:	3f 2e       	mov	r3, r31
 48e:	82 01       	movw	r16, r4
 490:	33 fc       	sbrc	r3, 3
 492:	1b c0       	rjmp	.+54     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 494:	82 2d       	mov	r24, r2
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	88 16       	cp	r8, r24
 49a:	99 06       	cpc	r9, r25
 49c:	b0 f4       	brcc	.+44     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 49e:	b6 01       	movw	r22, r12
 4a0:	80 e2       	ldi	r24, 0x20	; 32
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 4a8:	2a 94       	dec	r2
 4aa:	f4 cf       	rjmp	.-24     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 4ac:	f5 01       	movw	r30, r10
 4ae:	37 fc       	sbrc	r3, 7
 4b0:	85 91       	lpm	r24, Z+
 4b2:	37 fe       	sbrs	r3, 7
 4b4:	81 91       	ld	r24, Z+
 4b6:	5f 01       	movw	r10, r30
 4b8:	b6 01       	movw	r22, r12
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 4c0:	21 10       	cpse	r2, r1
 4c2:	2a 94       	dec	r2
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	82 1a       	sub	r8, r18
 4c8:	91 08       	sbc	r9, r1
 4ca:	81 14       	cp	r8, r1
 4cc:	91 04       	cpc	r9, r1
 4ce:	71 f7       	brne	.-36     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4d0:	e8 c0       	rjmp	.+464    	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
 4d2:	84 36       	cpi	r24, 0x64	; 100
 4d4:	11 f0       	breq	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	89 36       	cpi	r24, 0x69	; 105
 4d8:	41 f5       	brne	.+80     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 4da:	f8 01       	movw	r30, r16
 4dc:	37 fe       	sbrs	r3, 7
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4e0:	60 81       	ld	r22, Z
 4e2:	71 81       	ldd	r23, Z+1	; 0x01
 4e4:	82 81       	ldd	r24, Z+2	; 0x02
 4e6:	93 81       	ldd	r25, Z+3	; 0x03
 4e8:	0c 5f       	subi	r16, 0xFC	; 252
 4ea:	1f 4f       	sbci	r17, 0xFF	; 255
 4ec:	08 c0       	rjmp	.+16     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4ee:	60 81       	ld	r22, Z
 4f0:	71 81       	ldd	r23, Z+1	; 0x01
 4f2:	07 2e       	mov	r0, r23
 4f4:	00 0c       	add	r0, r0
 4f6:	88 0b       	sbc	r24, r24
 4f8:	99 0b       	sbc	r25, r25
 4fa:	0e 5f       	subi	r16, 0xFE	; 254
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	f3 2d       	mov	r31, r3
 500:	ff 76       	andi	r31, 0x6F	; 111
 502:	3f 2e       	mov	r3, r31
 504:	97 ff       	sbrs	r25, 7
 506:	09 c0       	rjmp	.+18     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	f0 68       	ori	r31, 0x80	; 128
 518:	3f 2e       	mov	r3, r31
 51a:	2a e0       	ldi	r18, 0x0A	; 10
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	a3 01       	movw	r20, r6
 520:	0e 94 b7 03 	call	0x76e	; 0x76e <__ultoa_invert>
 524:	88 2e       	mov	r8, r24
 526:	86 18       	sub	r8, r6
 528:	45 c0       	rjmp	.+138    	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 52a:	85 37       	cpi	r24, 0x75	; 117
 52c:	31 f4       	brne	.+12     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 52e:	23 2d       	mov	r18, r3
 530:	2f 7e       	andi	r18, 0xEF	; 239
 532:	b2 2e       	mov	r11, r18
 534:	2a e0       	ldi	r18, 0x0A	; 10
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	25 c0       	rjmp	.+74     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 53a:	93 2d       	mov	r25, r3
 53c:	99 7f       	andi	r25, 0xF9	; 249
 53e:	b9 2e       	mov	r11, r25
 540:	8f 36       	cpi	r24, 0x6F	; 111
 542:	c1 f0       	breq	.+48     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 544:	18 f4       	brcc	.+6      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 546:	88 35       	cpi	r24, 0x58	; 88
 548:	79 f0       	breq	.+30     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 54a:	b5 c0       	rjmp	.+362    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 54c:	80 37       	cpi	r24, 0x70	; 112
 54e:	19 f0       	breq	.+6      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 550:	88 37       	cpi	r24, 0x78	; 120
 552:	21 f0       	breq	.+8      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 554:	b0 c0       	rjmp	.+352    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 556:	e9 2f       	mov	r30, r25
 558:	e0 61       	ori	r30, 0x10	; 16
 55a:	be 2e       	mov	r11, r30
 55c:	b4 fe       	sbrs	r11, 4
 55e:	0d c0       	rjmp	.+26     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 560:	fb 2d       	mov	r31, r11
 562:	f4 60       	ori	r31, 0x04	; 4
 564:	bf 2e       	mov	r11, r31
 566:	09 c0       	rjmp	.+18     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 568:	34 fe       	sbrs	r3, 4
 56a:	0a c0       	rjmp	.+20     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 56c:	29 2f       	mov	r18, r25
 56e:	26 60       	ori	r18, 0x06	; 6
 570:	b2 2e       	mov	r11, r18
 572:	06 c0       	rjmp	.+12     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 574:	28 e0       	ldi	r18, 0x08	; 8
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	05 c0       	rjmp	.+10     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 57a:	20 e1       	ldi	r18, 0x10	; 16
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 580:	20 e1       	ldi	r18, 0x10	; 16
 582:	32 e0       	ldi	r19, 0x02	; 2
 584:	f8 01       	movw	r30, r16
 586:	b7 fe       	sbrs	r11, 7
 588:	07 c0       	rjmp	.+14     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 58a:	60 81       	ld	r22, Z
 58c:	71 81       	ldd	r23, Z+1	; 0x01
 58e:	82 81       	ldd	r24, Z+2	; 0x02
 590:	93 81       	ldd	r25, Z+3	; 0x03
 592:	0c 5f       	subi	r16, 0xFC	; 252
 594:	1f 4f       	sbci	r17, 0xFF	; 255
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 598:	60 81       	ld	r22, Z
 59a:	71 81       	ldd	r23, Z+1	; 0x01
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 5f       	subi	r16, 0xFE	; 254
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	a3 01       	movw	r20, r6
 5a6:	0e 94 b7 03 	call	0x76e	; 0x76e <__ultoa_invert>
 5aa:	88 2e       	mov	r8, r24
 5ac:	86 18       	sub	r8, r6
 5ae:	fb 2d       	mov	r31, r11
 5b0:	ff 77       	andi	r31, 0x7F	; 127
 5b2:	3f 2e       	mov	r3, r31
 5b4:	36 fe       	sbrs	r3, 6
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5b8:	23 2d       	mov	r18, r3
 5ba:	2e 7f       	andi	r18, 0xFE	; 254
 5bc:	a2 2e       	mov	r10, r18
 5be:	89 14       	cp	r8, r9
 5c0:	58 f4       	brcc	.+22     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 5c2:	34 fe       	sbrs	r3, 4
 5c4:	0b c0       	rjmp	.+22     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
 5c6:	32 fc       	sbrc	r3, 2
 5c8:	09 c0       	rjmp	.+18     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
 5ca:	83 2d       	mov	r24, r3
 5cc:	8e 7e       	andi	r24, 0xEE	; 238
 5ce:	a8 2e       	mov	r10, r24
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
 5d2:	b8 2c       	mov	r11, r8
 5d4:	a3 2c       	mov	r10, r3
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 5d8:	b8 2c       	mov	r11, r8
 5da:	01 c0       	rjmp	.+2      	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 5dc:	b9 2c       	mov	r11, r9
 5de:	a4 fe       	sbrs	r10, 4
 5e0:	0f c0       	rjmp	.+30     	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
 5e2:	fe 01       	movw	r30, r28
 5e4:	e8 0d       	add	r30, r8
 5e6:	f1 1d       	adc	r31, r1
 5e8:	80 81       	ld	r24, Z
 5ea:	80 33       	cpi	r24, 0x30	; 48
 5ec:	21 f4       	brne	.+8      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 5ee:	9a 2d       	mov	r25, r10
 5f0:	99 7e       	andi	r25, 0xE9	; 233
 5f2:	a9 2e       	mov	r10, r25
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 5f6:	a2 fe       	sbrs	r10, 2
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5fa:	b3 94       	inc	r11
 5fc:	b3 94       	inc	r11
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 600:	8a 2d       	mov	r24, r10
 602:	86 78       	andi	r24, 0x86	; 134
 604:	09 f0       	breq	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 606:	b3 94       	inc	r11
 608:	a3 fc       	sbrc	r10, 3
 60a:	11 c0       	rjmp	.+34     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 60c:	a0 fe       	sbrs	r10, 0
 60e:	06 c0       	rjmp	.+12     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
 610:	b2 14       	cp	r11, r2
 612:	88 f4       	brcc	.+34     	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
 614:	28 0c       	add	r2, r8
 616:	92 2c       	mov	r9, r2
 618:	9b 18       	sub	r9, r11
 61a:	0e c0       	rjmp	.+28     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
 61c:	b2 14       	cp	r11, r2
 61e:	60 f4       	brcc	.+24     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
 620:	b6 01       	movw	r22, r12
 622:	80 e2       	ldi	r24, 0x20	; 32
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 62a:	b3 94       	inc	r11
 62c:	f7 cf       	rjmp	.-18     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
 62e:	b2 14       	cp	r11, r2
 630:	18 f4       	brcc	.+6      	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
 632:	2b 18       	sub	r2, r11
 634:	02 c0       	rjmp	.+4      	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
 636:	98 2c       	mov	r9, r8
 638:	21 2c       	mov	r2, r1
 63a:	a4 fe       	sbrs	r10, 4
 63c:	10 c0       	rjmp	.+32     	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
 63e:	b6 01       	movw	r22, r12
 640:	80 e3       	ldi	r24, 0x30	; 48
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 648:	a2 fe       	sbrs	r10, 2
 64a:	17 c0       	rjmp	.+46     	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
 64c:	a1 fc       	sbrc	r10, 1
 64e:	03 c0       	rjmp	.+6      	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
 650:	88 e7       	ldi	r24, 0x78	; 120
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
 656:	88 e5       	ldi	r24, 0x58	; 88
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	b6 01       	movw	r22, r12
 65c:	0c c0       	rjmp	.+24     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 65e:	8a 2d       	mov	r24, r10
 660:	86 78       	andi	r24, 0x86	; 134
 662:	59 f0       	breq	.+22     	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
 664:	a1 fe       	sbrs	r10, 1
 666:	02 c0       	rjmp	.+4      	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
 668:	8b e2       	ldi	r24, 0x2B	; 43
 66a:	01 c0       	rjmp	.+2      	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
 66c:	80 e2       	ldi	r24, 0x20	; 32
 66e:	a7 fc       	sbrc	r10, 7
 670:	8d e2       	ldi	r24, 0x2D	; 45
 672:	b6 01       	movw	r22, r12
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 67a:	89 14       	cp	r8, r9
 67c:	38 f4       	brcc	.+14     	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 67e:	b6 01       	movw	r22, r12
 680:	80 e3       	ldi	r24, 0x30	; 48
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 688:	9a 94       	dec	r9
 68a:	f7 cf       	rjmp	.-18     	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
 68c:	8a 94       	dec	r8
 68e:	f3 01       	movw	r30, r6
 690:	e8 0d       	add	r30, r8
 692:	f1 1d       	adc	r31, r1
 694:	80 81       	ld	r24, Z
 696:	b6 01       	movw	r22, r12
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 69e:	81 10       	cpse	r8, r1
 6a0:	f5 cf       	rjmp	.-22     	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 6a2:	22 20       	and	r2, r2
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
 6a6:	42 ce       	rjmp	.-892    	; 0x32c <vfprintf+0x24>
 6a8:	b6 01       	movw	r22, r12
 6aa:	80 e2       	ldi	r24, 0x20	; 32
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fputc>
 6b2:	2a 94       	dec	r2
 6b4:	f6 cf       	rjmp	.-20     	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
 6b6:	f6 01       	movw	r30, r12
 6b8:	86 81       	ldd	r24, Z+6	; 0x06
 6ba:	97 81       	ldd	r25, Z+7	; 0x07
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	9f ef       	ldi	r25, 0xFF	; 255
 6c2:	2b 96       	adiw	r28, 0x0b	; 11
 6c4:	e2 e1       	ldi	r30, 0x12	; 18
 6c6:	0c 94 31 04 	jmp	0x862	; 0x862 <__epilogue_restores__>

000006ca <strnlen_P>:
 6ca:	fc 01       	movw	r30, r24
 6cc:	05 90       	lpm	r0, Z+
 6ce:	61 50       	subi	r22, 0x01	; 1
 6d0:	70 40       	sbci	r23, 0x00	; 0
 6d2:	01 10       	cpse	r0, r1
 6d4:	d8 f7       	brcc	.-10     	; 0x6cc <strnlen_P+0x2>
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	8e 0f       	add	r24, r30
 6dc:	9f 1f       	adc	r25, r31
 6de:	08 95       	ret

000006e0 <strnlen>:
 6e0:	fc 01       	movw	r30, r24
 6e2:	61 50       	subi	r22, 0x01	; 1
 6e4:	70 40       	sbci	r23, 0x00	; 0
 6e6:	01 90       	ld	r0, Z+
 6e8:	01 10       	cpse	r0, r1
 6ea:	d8 f7       	brcc	.-10     	; 0x6e2 <strnlen+0x2>
 6ec:	80 95       	com	r24
 6ee:	90 95       	com	r25
 6f0:	8e 0f       	add	r24, r30
 6f2:	9f 1f       	adc	r25, r31
 6f4:	08 95       	ret

000006f6 <fputc>:
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	fb 01       	movw	r30, r22
 700:	23 81       	ldd	r18, Z+3	; 0x03
 702:	21 fd       	sbrc	r18, 1
 704:	03 c0       	rjmp	.+6      	; 0x70c <fputc+0x16>
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	9f ef       	ldi	r25, 0xFF	; 255
 70a:	2c c0       	rjmp	.+88     	; 0x764 <fputc+0x6e>
 70c:	22 ff       	sbrs	r18, 2
 70e:	16 c0       	rjmp	.+44     	; 0x73c <fputc+0x46>
 710:	46 81       	ldd	r20, Z+6	; 0x06
 712:	57 81       	ldd	r21, Z+7	; 0x07
 714:	24 81       	ldd	r18, Z+4	; 0x04
 716:	35 81       	ldd	r19, Z+5	; 0x05
 718:	42 17       	cp	r20, r18
 71a:	53 07       	cpc	r21, r19
 71c:	44 f4       	brge	.+16     	; 0x72e <fputc+0x38>
 71e:	a0 81       	ld	r26, Z
 720:	b1 81       	ldd	r27, Z+1	; 0x01
 722:	9d 01       	movw	r18, r26
 724:	2f 5f       	subi	r18, 0xFF	; 255
 726:	3f 4f       	sbci	r19, 0xFF	; 255
 728:	31 83       	std	Z+1, r19	; 0x01
 72a:	20 83       	st	Z, r18
 72c:	8c 93       	st	X, r24
 72e:	26 81       	ldd	r18, Z+6	; 0x06
 730:	37 81       	ldd	r19, Z+7	; 0x07
 732:	2f 5f       	subi	r18, 0xFF	; 255
 734:	3f 4f       	sbci	r19, 0xFF	; 255
 736:	37 83       	std	Z+7, r19	; 0x07
 738:	26 83       	std	Z+6, r18	; 0x06
 73a:	14 c0       	rjmp	.+40     	; 0x764 <fputc+0x6e>
 73c:	8b 01       	movw	r16, r22
 73e:	ec 01       	movw	r28, r24
 740:	fb 01       	movw	r30, r22
 742:	00 84       	ldd	r0, Z+8	; 0x08
 744:	f1 85       	ldd	r31, Z+9	; 0x09
 746:	e0 2d       	mov	r30, r0
 748:	09 95       	icall
 74a:	89 2b       	or	r24, r25
 74c:	e1 f6       	brne	.-72     	; 0x706 <fputc+0x10>
 74e:	d8 01       	movw	r26, r16
 750:	16 96       	adiw	r26, 0x06	; 6
 752:	8d 91       	ld	r24, X+
 754:	9c 91       	ld	r25, X
 756:	17 97       	sbiw	r26, 0x07	; 7
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	17 96       	adiw	r26, 0x07	; 7
 75c:	9c 93       	st	X, r25
 75e:	8e 93       	st	-X, r24
 760:	16 97       	sbiw	r26, 0x06	; 6
 762:	ce 01       	movw	r24, r28
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <__ultoa_invert>:
 76e:	fa 01       	movw	r30, r20
 770:	aa 27       	eor	r26, r26
 772:	28 30       	cpi	r18, 0x08	; 8
 774:	51 f1       	breq	.+84     	; 0x7ca <__ultoa_invert+0x5c>
 776:	20 31       	cpi	r18, 0x10	; 16
 778:	81 f1       	breq	.+96     	; 0x7da <__ultoa_invert+0x6c>
 77a:	e8 94       	clt
 77c:	6f 93       	push	r22
 77e:	6e 7f       	andi	r22, 0xFE	; 254
 780:	6e 5f       	subi	r22, 0xFE	; 254
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	af 4f       	sbci	r26, 0xFF	; 255
 78a:	b1 e0       	ldi	r27, 0x01	; 1
 78c:	3e d0       	rcall	.+124    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 78e:	b4 e0       	ldi	r27, 0x04	; 4
 790:	3c d0       	rcall	.+120    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 792:	67 0f       	add	r22, r23
 794:	78 1f       	adc	r23, r24
 796:	89 1f       	adc	r24, r25
 798:	9a 1f       	adc	r25, r26
 79a:	a1 1d       	adc	r26, r1
 79c:	68 0f       	add	r22, r24
 79e:	79 1f       	adc	r23, r25
 7a0:	8a 1f       	adc	r24, r26
 7a2:	91 1d       	adc	r25, r1
 7a4:	a1 1d       	adc	r26, r1
 7a6:	6a 0f       	add	r22, r26
 7a8:	71 1d       	adc	r23, r1
 7aa:	81 1d       	adc	r24, r1
 7ac:	91 1d       	adc	r25, r1
 7ae:	a1 1d       	adc	r26, r1
 7b0:	20 d0       	rcall	.+64     	; 0x7f2 <__ultoa_invert+0x84>
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <__ultoa_invert+0x48>
 7b4:	68 94       	set
 7b6:	3f 91       	pop	r19
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	26 9f       	mul	r18, r22
 7bc:	11 24       	eor	r1, r1
 7be:	30 19       	sub	r19, r0
 7c0:	30 5d       	subi	r19, 0xD0	; 208
 7c2:	31 93       	st	Z+, r19
 7c4:	de f6       	brtc	.-74     	; 0x77c <__ultoa_invert+0xe>
 7c6:	cf 01       	movw	r24, r30
 7c8:	08 95       	ret
 7ca:	46 2f       	mov	r20, r22
 7cc:	47 70       	andi	r20, 0x07	; 7
 7ce:	40 5d       	subi	r20, 0xD0	; 208
 7d0:	41 93       	st	Z+, r20
 7d2:	b3 e0       	ldi	r27, 0x03	; 3
 7d4:	0f d0       	rcall	.+30     	; 0x7f4 <__ultoa_invert+0x86>
 7d6:	c9 f7       	brne	.-14     	; 0x7ca <__ultoa_invert+0x5c>
 7d8:	f6 cf       	rjmp	.-20     	; 0x7c6 <__ultoa_invert+0x58>
 7da:	46 2f       	mov	r20, r22
 7dc:	4f 70       	andi	r20, 0x0F	; 15
 7de:	40 5d       	subi	r20, 0xD0	; 208
 7e0:	4a 33       	cpi	r20, 0x3A	; 58
 7e2:	18 f0       	brcs	.+6      	; 0x7ea <__ultoa_invert+0x7c>
 7e4:	49 5d       	subi	r20, 0xD9	; 217
 7e6:	31 fd       	sbrc	r19, 1
 7e8:	40 52       	subi	r20, 0x20	; 32
 7ea:	41 93       	st	Z+, r20
 7ec:	02 d0       	rcall	.+4      	; 0x7f2 <__ultoa_invert+0x84>
 7ee:	a9 f7       	brne	.-22     	; 0x7da <__ultoa_invert+0x6c>
 7f0:	ea cf       	rjmp	.-44     	; 0x7c6 <__ultoa_invert+0x58>
 7f2:	b4 e0       	ldi	r27, 0x04	; 4
 7f4:	a6 95       	lsr	r26
 7f6:	97 95       	ror	r25
 7f8:	87 95       	ror	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	ba 95       	dec	r27
 800:	c9 f7       	brne	.-14     	; 0x7f4 <__ultoa_invert+0x86>
 802:	00 97       	sbiw	r24, 0x00	; 0
 804:	61 05       	cpc	r22, r1
 806:	71 05       	cpc	r23, r1
 808:	08 95       	ret
 80a:	9b 01       	movw	r18, r22
 80c:	ac 01       	movw	r20, r24
 80e:	0a 2e       	mov	r0, r26
 810:	06 94       	lsr	r0
 812:	57 95       	ror	r21
 814:	47 95       	ror	r20
 816:	37 95       	ror	r19
 818:	27 95       	ror	r18
 81a:	ba 95       	dec	r27
 81c:	c9 f7       	brne	.-14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 81e:	62 0f       	add	r22, r18
 820:	73 1f       	adc	r23, r19
 822:	84 1f       	adc	r24, r20
 824:	95 1f       	adc	r25, r21
 826:	a0 1d       	adc	r26, r0
 828:	08 95       	ret

0000082a <__prologue_saves__>:
 82a:	2f 92       	push	r2
 82c:	3f 92       	push	r3
 82e:	4f 92       	push	r4
 830:	5f 92       	push	r5
 832:	6f 92       	push	r6
 834:	7f 92       	push	r7
 836:	8f 92       	push	r8
 838:	9f 92       	push	r9
 83a:	af 92       	push	r10
 83c:	bf 92       	push	r11
 83e:	cf 92       	push	r12
 840:	df 92       	push	r13
 842:	ef 92       	push	r14
 844:	ff 92       	push	r15
 846:	0f 93       	push	r16
 848:	1f 93       	push	r17
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
 852:	ca 1b       	sub	r28, r26
 854:	db 0b       	sbc	r29, r27
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	f8 94       	cli
 85a:	de bf       	out	0x3e, r29	; 62
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	cd bf       	out	0x3d, r28	; 61
 860:	09 94       	ijmp

00000862 <__epilogue_restores__>:
 862:	2a 88       	ldd	r2, Y+18	; 0x12
 864:	39 88       	ldd	r3, Y+17	; 0x11
 866:	48 88       	ldd	r4, Y+16	; 0x10
 868:	5f 84       	ldd	r5, Y+15	; 0x0f
 86a:	6e 84       	ldd	r6, Y+14	; 0x0e
 86c:	7d 84       	ldd	r7, Y+13	; 0x0d
 86e:	8c 84       	ldd	r8, Y+12	; 0x0c
 870:	9b 84       	ldd	r9, Y+11	; 0x0b
 872:	aa 84       	ldd	r10, Y+10	; 0x0a
 874:	b9 84       	ldd	r11, Y+9	; 0x09
 876:	c8 84       	ldd	r12, Y+8	; 0x08
 878:	df 80       	ldd	r13, Y+7	; 0x07
 87a:	ee 80       	ldd	r14, Y+6	; 0x06
 87c:	fd 80       	ldd	r15, Y+5	; 0x05
 87e:	0c 81       	ldd	r16, Y+4	; 0x04
 880:	1b 81       	ldd	r17, Y+3	; 0x03
 882:	aa 81       	ldd	r26, Y+2	; 0x02
 884:	b9 81       	ldd	r27, Y+1	; 0x01
 886:	ce 0f       	add	r28, r30
 888:	d1 1d       	adc	r29, r1
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	de bf       	out	0x3e, r29	; 62
 890:	0f be       	out	0x3f, r0	; 63
 892:	cd bf       	out	0x3d, r28	; 61
 894:	ed 01       	movw	r28, r26
 896:	08 95       	ret

00000898 <_exit>:
 898:	f8 94       	cli

0000089a <__stop_program>:
 89a:	ff cf       	rjmp	.-2      	; 0x89a <__stop_program>
