
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00000dce  00000e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008001bc  008001bc  00000f1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9d  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ef  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000770  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00003088  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051a  00000000  00000000  00003916  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_17>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	b7 00       	.word	0x00b7	; ????
  6a:	be 00       	.word	0x00be	; ????
  6c:	c5 00       	.word	0x00c5	; ????
  6e:	cf 00       	.word	0x00cf	; ????
  70:	d9 00       	.word	0x00d9	; ????
  72:	e3 00       	.word	0x00e3	; ????
  74:	ed 00       	.word	0x00ed	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ee ec       	ldi	r30, 0xCE	; 206
  8a:	fd e0       	ldi	r31, 0x0D	; 13
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 3b       	cpi	r26, 0xBC	; 188
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	ac eb       	ldi	r26, 0xBC	; 188
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  ac:	0c 94 e5 06 	jmp	0xdca	; 0xdca <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  ba:	87 e8       	ldi	r24, 0x87	; 135
  bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c0:	08 95       	ret

000000c2 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ea:	08 95       	ret

000000ec <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	6c 01       	movw	r12, r24
  fe:	7b 01       	movw	r14, r22
 100:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < num_channels; i++) {
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	11 c0       	rjmp	.+34     	; 0x128 <ADC_Read_Multiple+0x3c>
		results[i] = ADC_Read(channels[i]);
 106:	8c 2f       	mov	r24, r28
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	8c 01       	movw	r16, r24
 10c:	00 0f       	add	r16, r16
 10e:	11 1f       	adc	r17, r17
 110:	0e 0d       	add	r16, r14
 112:	1f 1d       	adc	r17, r15
 114:	f6 01       	movw	r30, r12
 116:	e8 0f       	add	r30, r24
 118:	f9 1f       	adc	r31, r25
 11a:	80 81       	ld	r24, Z
 11c:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
 120:	f8 01       	movw	r30, r16
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
	// Devuelve el resultado de la conversión
	return ADC;
}

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
	for (uint8_t i = 0; i < num_channels; i++) {
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	cd 17       	cp	r28, r29
 12a:	68 f3       	brcs	.-38     	; 0x106 <ADC_Read_Multiple+0x1a>
		results[i] = ADC_Read(channels[i]);
	}
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	ff 90       	pop	r15
 136:	ef 90       	pop	r14
 138:	df 90       	pop	r13
 13a:	cf 90       	pop	r12
 13c:	08 95       	ret

0000013e <SPI_init>:
#define F_CPU 16000000UL
#include "SPI.h"

void SPI_init(SPI_TYPE sType, SPI_Data_Order sDataOrder, SPI_Clock_Polarity sClockPolarity, SPI_Clock_Phase sClockPhase) {
 13e:	e8 2f       	mov	r30, r24
	//PB2 -> SS
	//PB3 -> SS
	//PB4 -> SS
	//PB5 -> SS
	
	if (sType & 0x10) { //Verificar si se configura como maestro..
 140:	84 ff       	sbrs	r24, 4
 142:	52 c0       	rjmp	.+164    	; 0x1e8 <SPI_init+0xaa>
		// Configurar como maestro
		DDRB |= (1 << DDB3) | (1 << DDB5) | (1 << DDB2); // MOSI, SCK, SS como salidas
 144:	84 b1       	in	r24, 0x04	; 4
 146:	8c 62       	ori	r24, 0x2C	; 44
 148:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << DDB4); // MISO como entrada
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1 << MSTR); // Habilitar modo maestro
 150:	8c b5       	in	r24, 0x2c	; 44
 152:	80 61       	ori	r24, 0x10	; 16
 154:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
 156:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 158:	8e 2f       	mov	r24, r30
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	87 30       	cpi	r24, 0x07	; 7
 15e:	91 05       	cpc	r25, r1
 160:	08 f0       	brcs	.+2      	; 0x164 <SPI_init+0x26>
 162:	4b c0       	rjmp	.+150    	; 0x1fa <SPI_init+0xbc>
 164:	fc 01       	movw	r30, r24
 166:	ec 5c       	subi	r30, 0xCC	; 204
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__tablejump2__>
			case 0: //DIV2
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 16e:	8c b5       	in	r24, 0x2c	; 44
 170:	8c 7f       	andi	r24, 0xFC	; 252
 172:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 174:	8d b5       	in	r24, 0x2d	; 45
 176:	81 60       	ori	r24, 0x01	; 1
 178:	8d bd       	out	0x2d, r24	; 45
			break;
 17a:	3f c0       	rjmp	.+126    	; 0x1fa <SPI_init+0xbc>
			case 1: //DIV4
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 17c:	8c b5       	in	r24, 0x2c	; 44
 17e:	8c 7f       	andi	r24, 0xFC	; 252
 180:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 182:	8d b5       	in	r24, 0x2d	; 45
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	8d bd       	out	0x2d, r24	; 45
			break;
 188:	38 c0       	rjmp	.+112    	; 0x1fa <SPI_init+0xbc>
			case 2: //DIV8
				SPCR |= (1<<SPR0);
 18a:	8c b5       	in	r24, 0x2c	; 44
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 190:	8c b5       	in	r24, 0x2c	; 44
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 196:	8d b5       	in	r24, 0x2d	; 45
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	8d bd       	out	0x2d, r24	; 45
			break;
 19c:	2e c0       	rjmp	.+92     	; 0x1fa <SPI_init+0xbc>
			case 3: //DIV16
				SPCR |= (1<<SPR0);
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 1a4:	8c b5       	in	r24, 0x2c	; 44
 1a6:	8d 7f       	andi	r24, 0xFD	; 253
 1a8:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1aa:	8d b5       	in	r24, 0x2d	; 45
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	8d bd       	out	0x2d, r24	; 45
			break;
 1b0:	24 c0       	rjmp	.+72     	; 0x1fa <SPI_init+0xbc>
			case 4: //DIV32
				SPCR &= ~(1<<SPR0);
 1b2:	8c b5       	in	r24, 0x2c	; 44
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 1b8:	8c b5       	in	r24, 0x2c	; 44
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 1be:	8d b5       	in	r24, 0x2d	; 45
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	8d bd       	out	0x2d, r24	; 45
			break;
 1c4:	1a c0       	rjmp	.+52     	; 0x1fa <SPI_init+0xbc>
			case 5: //DIV64
				SPCR &= ~(1<<SPR0);
 1c6:	8c b5       	in	r24, 0x2c	; 44
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 1cc:	8c b5       	in	r24, 0x2c	; 44
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1d2:	8d b5       	in	r24, 0x2d	; 45
 1d4:	8e 7f       	andi	r24, 0xFE	; 254
 1d6:	8d bd       	out	0x2d, r24	; 45
			break;
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <SPI_init+0xbc>
			case 6: //DIV128
				SPCR |= (1<<SPR0)|(1<<SPR1);
 1da:	8c b5       	in	r24, 0x2c	; 44
 1dc:	83 60       	ori	r24, 0x03	; 3
 1de:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1e0:	8d b5       	in	r24, 0x2d	; 45
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	8d bd       	out	0x2d, r24	; 45
			break;
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <SPI_init+0xbc>
		}
		
		} else {
		// Configurar como esclavo
		DDRB |= (1 << DDB4); // MISO como salida
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1 << DDB3) | (1 << DDB5) | (1 << DDB2)); // MOSI, SCK, SS como entradas
 1ee:	84 b1       	in	r24, 0x04	; 4
 1f0:	83 7d       	andi	r24, 0xD3	; 211
 1f2:	84 b9       	out	0x04, r24	; 4
		
		SPCR &= ~(1 << MSTR); // Habilitar SPI, modo esclavo
 1f4:	8c b5       	in	r24, 0x2c	; 44
 1f6:	8f 7e       	andi	r24, 0xEF	; 239
 1f8:	8c bd       	out	0x2c, r24	; 44
	}
	// Habilitar Data Order, Clock Polarity, Clock Phase
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 1fa:	8c b5       	in	r24, 0x2c	; 44
 1fc:	46 2b       	or	r20, r22
 1fe:	24 2b       	or	r18, r20
 200:	28 2b       	or	r18, r24
 202:	20 64       	ori	r18, 0x40	; 64
 204:	2c bd       	out	0x2c, r18	; 44
 206:	08 95       	ret

00000208 <SPI_send>:
}

void SPI_send(uint8_t data) {
	SPDR = data;
 208:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Esperar a que la transmisión termine
 20a:	0d b4       	in	r0, 0x2d	; 45
 20c:	07 fe       	sbrs	r0, 7
 20e:	fd cf       	rjmp	.-6      	; 0x20a <SPI_send+0x2>
}
 210:	08 95       	ret

00000212 <UART_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "UART.h"

void UART_Init(unsigned long baud_rate) {
 212:	9b 01       	movw	r18, r22
 214:	ac 01       	movw	r20, r24
	unsigned int ubrr = F_CPU / 16 / baud_rate - 1;
 216:	60 e4       	ldi	r22, 0x40	; 64
 218:	72 e4       	ldi	r23, 0x42	; 66
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 c5 03 	call	0x78a	; 0x78a <__udivmodsi4>
 222:	21 50       	subi	r18, 0x01	; 1
 224:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 226:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 22a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar el receptor y el transmisor
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar el formato de datos: 8 bits
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 23a:	08 95       	ret

0000023c <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
 23c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 240:	95 ff       	sbrs	r25, 5
 242:	fc cf       	rjmp	.-8      	; 0x23c <UART_Transmit>
	UDR0 = data;  // Enviar el dato
 244:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 248:	08 95       	ret

0000024a <UART_Receive>:
}

unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
 24a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 24e:	88 23       	and	r24, r24
 250:	e4 f7       	brge	.-8      	; 0x24a <UART_Receive>
	return UDR0;  // Leer el dato recibido
 252:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 256:	08 95       	ret

00000258 <UART_TransmitString>:

void UART_TransmitString(const char *str) {
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	while (*str) {
 25e:	03 c0       	rjmp	.+6      	; 0x266 <UART_TransmitString+0xe>
		UART_Transmit(*str++);
 260:	21 96       	adiw	r28, 0x01	; 1
 262:	0e 94 1e 01 	call	0x23c	; 0x23c <UART_Transmit>
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
	return UDR0;  // Leer el dato recibido
}

void UART_TransmitString(const char *str) {
	while (*str) {
 266:	88 81       	ld	r24, Y
 268:	81 11       	cpse	r24, r1
 26a:	fa cf       	rjmp	.-12     	; 0x260 <UART_TransmitString+0x8>
		UART_Transmit(*str++);
	}
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <display_menu>:
////////////////////////////////////////////////////
// Funciones auxiliares
////////////////////////////////////////////////////

void display_menu(void) {
	UART_TransmitString("\r\n***** Menu *****\r\n");
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
	UART_TransmitString("1. Mostrar valores de ADC\r\n");
 27a:	85 e1       	ldi	r24, 0x15	; 21
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
	UART_TransmitString("*****************\r\n");
 282:	81 e3       	ldi	r24, 0x31	; 49
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
	UART_TransmitString("Seleccione una opción: ");
 28a:	85 e4       	ldi	r24, 0x45	; 69
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
 292:	08 95       	ret

00000294 <process_command>:
}

void process_command(char command) {
	switch (command) {
 294:	81 33       	cpi	r24, 0x31	; 49
 296:	21 f5       	brne	.+72     	; 0x2e0 <process_command+0x4c>
		case '1':
		snprintf(buffer, sizeof(buffer), "Valores ADC - ADC6: %u, ADC7: %u\r\n", adc_results[1], adc_results[0]);
 298:	e1 e0       	ldi	r30, 0x01	; 1
 29a:	f2 e0       	ldi	r31, 0x02	; 2
 29c:	81 81       	ldd	r24, Z+1	; 0x01
 29e:	8f 93       	push	r24
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 93       	push	r24
 2a4:	83 81       	ldd	r24, Z+3	; 0x03
 2a6:	8f 93       	push	r24
 2a8:	82 81       	ldd	r24, Z+2	; 0x02
 2aa:	8f 93       	push	r24
 2ac:	8d e5       	ldi	r24, 0x5D	; 93
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	9f 93       	push	r25
 2b2:	8f 93       	push	r24
 2b4:	1f 92       	push	r1
 2b6:	80 e4       	ldi	r24, 0x40	; 64
 2b8:	8f 93       	push	r24
 2ba:	8f eb       	ldi	r24, 0xBF	; 191
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	9f 93       	push	r25
 2c0:	8f 93       	push	r24
 2c2:	0e 94 ed 03 	call	0x7da	; 0x7da <snprintf>
		UART_TransmitString(buffer);
 2c6:	8f eb       	ldi	r24, 0xBF	; 191
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
		break;
 2ce:	8d b7       	in	r24, 0x3d	; 61
 2d0:	9e b7       	in	r25, 0x3e	; 62
 2d2:	0a 96       	adiw	r24, 0x0a	; 10
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	9e bf       	out	0x3e, r25	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	8d bf       	out	0x3d, r24	; 61
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <process_command+0x54>
		default:
		UART_TransmitString("Opción inválida. Por favor, seleccione una opción válida.\r\n");
 2e0:	80 e8       	ldi	r24, 0x80	; 128
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 2c 01 	call	0x258	; 0x258 <UART_TransmitString>
		break;
	}
	display_menu();
 2e8:	0e 94 39 01 	call	0x272	; 0x272 <display_menu>
 2ec:	08 95       	ret

000002ee <main>:
////////////////////////////////////////////////////
// Programa Principal
////////////////////////////////////////////////////

int main(void)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <main+0x6>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	//Salidas de leds
	// Configurar Pines como salida
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7);
 2f8:	8a b1       	in	r24, 0x0a	; 10
 2fa:	8c 6f       	ori	r24, 0xFC	; 252
 2fc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB0)|(1<<DDB1);
 2fe:	84 b1       	in	r24, 0x04	; 4
 300:	83 60       	ori	r24, 0x03	; 3
 302:	84 b9       	out	0x04, r24	; 4
	
	PORTD &= ~((1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	83 70       	andi	r24, 0x03	; 3
 308:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1<<DDB0)|(1<<DDB1));
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	8c 7f       	andi	r24, 0xFC	; 252
 30e:	85 b9       	out	0x05, r24	; 5
	
	SPI_init(SPI_SLAVE_SS,SPI_Data_Order_MSB,SPI_Clock_IDLE_LOW,SPI_clock_First_EDGE);
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_init>
	ADC_Init();  // Inicializa el ADC
 31c:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Init>
	UART_Init(BAUD);  // Inicializa la UART
 320:	80 e8       	ldi	r24, 0x80	; 128
 322:	95 e2       	ldi	r25, 0x25	; 37
 324:	0e 94 09 01 	call	0x212	; 0x212 <UART_Init>

	uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
 328:	87 e0       	ldi	r24, 0x07	; 7
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	8a 83       	std	Y+2, r24	; 0x02
		
	SPCR |= (1<<SPIE); // Activar ISR SPI
 330:	8c b5       	in	r24, 0x2c	; 44
 332:	80 68       	ori	r24, 0x80	; 128
 334:	8c bd       	out	0x2c, r24	; 44
	sei();
 336:	78 94       	sei

	// Mostrar el menú inicial en la consola
	display_menu();
 338:	0e 94 39 01 	call	0x272	; 0x272 <display_menu>

	while (1)
	{
		// Leer los valores de los ADC
		ADC_Read_Multiple(adc_channels, adc_results, 2);
 33c:	42 e0       	ldi	r20, 0x02	; 2
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	72 e0       	ldi	r23, 0x02	; 2
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 76 00 	call	0xec	; 0xec <ADC_Read_Multiple>
		
		// Convertir los valores ADC a voltaje
		voltage1 = (int)(((adc_results[0] * 5.0) / 898)*100);
 34a:	01 e0       	ldi	r16, 0x01	; 1
 34c:	12 e0       	ldi	r17, 0x02	; 2
 34e:	f8 01       	movw	r30, r16
 350:	60 81       	ld	r22, Z
 352:	71 81       	ldd	r23, Z+1	; 0x01
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 ca 02 	call	0x594	; 0x594 <__floatunsisf>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 ea       	ldi	r20, 0xA0	; 160
 362:	50 e4       	ldi	r21, 0x40	; 64
 364:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__mulsf3>
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e8       	ldi	r19, 0x80	; 128
 36c:	40 e6       	ldi	r20, 0x60	; 96
 36e:	54 e4       	ldi	r21, 0x44	; 68
 370:	0e 94 22 02 	call	0x444	; 0x444 <__divsf3>
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	48 ec       	ldi	r20, 0xC8	; 200
 37a:	52 e4       	ldi	r21, 0x42	; 66
 37c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__mulsf3>
 380:	0e 94 94 02 	call	0x528	; 0x528 <__fixsfsi>
 384:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <voltage1+0x1>
 388:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <voltage1>
		voltage2 = (int)(((adc_results[1] * 5.0) / 898)*100);
 38c:	f8 01       	movw	r30, r16
 38e:	62 81       	ldd	r22, Z+2	; 0x02
 390:	73 81       	ldd	r23, Z+3	; 0x03
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 ca 02 	call	0x594	; 0x594 <__floatunsisf>
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	40 ea       	ldi	r20, 0xA0	; 160
 3a0:	50 e4       	ldi	r21, 0x40	; 64
 3a2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__mulsf3>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e8       	ldi	r19, 0x80	; 128
 3aa:	40 e6       	ldi	r20, 0x60	; 96
 3ac:	54 e4       	ldi	r21, 0x44	; 68
 3ae:	0e 94 22 02 	call	0x444	; 0x444 <__divsf3>
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	48 ec       	ldi	r20, 0xC8	; 200
 3b8:	52 e4       	ldi	r21, 0x42	; 66
 3ba:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__mulsf3>
 3be:	0e 94 94 02 	call	0x528	; 0x528 <__fixsfsi>
 3c2:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <voltage2+0x1>
 3c6:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <voltage2>


		// Leer y procesar los comandos de la UART
		if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles en el buffer de recepción
 3ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3ce:	88 23       	and	r24, r24
 3d0:	24 f4       	brge	.+8      	; 0x3da <main+0xec>
			char received_char = UART_Receive();
 3d2:	0e 94 25 01 	call	0x24a	; 0x24a <UART_Receive>
			process_command(received_char);
 3d6:	0e 94 4a 01 	call	0x294	; 0x294 <process_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	ff ef       	ldi	r31, 0xFF	; 255
 3dc:	29 e6       	ldi	r18, 0x69	; 105
 3de:	88 e1       	ldi	r24, 0x18	; 24
 3e0:	f1 50       	subi	r31, 0x01	; 1
 3e2:	20 40       	sbci	r18, 0x00	; 0
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0xf2>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0xfc>
 3ea:	00 00       	nop
 3ec:	a7 cf       	rjmp	.-178    	; 0x33c <main+0x4e>

000003ee <__vector_17>:
		break;
	}
	display_menu();
}
//Rutina para vec del SPI
ISR(SPI_STC_vect) {
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
		valorSPI = SPDR;
 410:	8e b5       	in	r24, 0x2e	; 46
 412:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
		if (valorSPI == 'c') {
 416:	83 36       	cpi	r24, 0x63	; 99
 418:	21 f4       	brne	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			SPI_send(adc_results[1]);
 41a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <adc_results+0x2>
 41e:	0e 94 04 01 	call	0x208	; 0x208 <SPI_send>
			} 
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__divsf3>:
 444:	0e 94 36 02 	call	0x46c	; 0x46c <__divsf3x>
 448:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_round>
 44c:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_pscB>
 450:	58 f0       	brcs	.+22     	; 0x468 <__divsf3+0x24>
 452:	0e 94 10 03 	call	0x620	; 0x620 <__fp_pscA>
 456:	40 f0       	brcs	.+16     	; 0x468 <__divsf3+0x24>
 458:	29 f4       	brne	.+10     	; 0x464 <__divsf3+0x20>
 45a:	5f 3f       	cpi	r21, 0xFF	; 255
 45c:	29 f0       	breq	.+10     	; 0x468 <__divsf3+0x24>
 45e:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_inf>
 462:	51 11       	cpse	r21, r1
 464:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>
 468:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_nan>

0000046c <__divsf3x>:
 46c:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_split3>
 470:	68 f3       	brcs	.-38     	; 0x44c <__divsf3+0x8>

00000472 <__divsf3_pse>:
 472:	99 23       	and	r25, r25
 474:	b1 f3       	breq	.-20     	; 0x462 <__divsf3+0x1e>
 476:	55 23       	and	r21, r21
 478:	91 f3       	breq	.-28     	; 0x45e <__divsf3+0x1a>
 47a:	95 1b       	sub	r25, r21
 47c:	55 0b       	sbc	r21, r21
 47e:	bb 27       	eor	r27, r27
 480:	aa 27       	eor	r26, r26
 482:	62 17       	cp	r22, r18
 484:	73 07       	cpc	r23, r19
 486:	84 07       	cpc	r24, r20
 488:	38 f0       	brcs	.+14     	; 0x498 <__divsf3_pse+0x26>
 48a:	9f 5f       	subi	r25, 0xFF	; 255
 48c:	5f 4f       	sbci	r21, 0xFF	; 255
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	44 1f       	adc	r20, r20
 494:	aa 1f       	adc	r26, r26
 496:	a9 f3       	breq	.-22     	; 0x482 <__divsf3_pse+0x10>
 498:	35 d0       	rcall	.+106    	; 0x504 <__divsf3_pse+0x92>
 49a:	0e 2e       	mov	r0, r30
 49c:	3a f0       	brmi	.+14     	; 0x4ac <__divsf3_pse+0x3a>
 49e:	e0 e8       	ldi	r30, 0x80	; 128
 4a0:	32 d0       	rcall	.+100    	; 0x506 <__divsf3_pse+0x94>
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	50 40       	sbci	r21, 0x00	; 0
 4a6:	e6 95       	lsr	r30
 4a8:	00 1c       	adc	r0, r0
 4aa:	ca f7       	brpl	.-14     	; 0x49e <__divsf3_pse+0x2c>
 4ac:	2b d0       	rcall	.+86     	; 0x504 <__divsf3_pse+0x92>
 4ae:	fe 2f       	mov	r31, r30
 4b0:	29 d0       	rcall	.+82     	; 0x504 <__divsf3_pse+0x92>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	bb 1f       	adc	r27, r27
 4ba:	26 17       	cp	r18, r22
 4bc:	37 07       	cpc	r19, r23
 4be:	48 07       	cpc	r20, r24
 4c0:	ab 07       	cpc	r26, r27
 4c2:	b0 e8       	ldi	r27, 0x80	; 128
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__divsf3_pse+0x56>
 4c6:	bb 0b       	sbc	r27, r27
 4c8:	80 2d       	mov	r24, r0
 4ca:	bf 01       	movw	r22, r30
 4cc:	ff 27       	eor	r31, r31
 4ce:	93 58       	subi	r25, 0x83	; 131
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	3a f0       	brmi	.+14     	; 0x4e2 <__divsf3_pse+0x70>
 4d4:	9e 3f       	cpi	r25, 0xFE	; 254
 4d6:	51 05       	cpc	r21, r1
 4d8:	78 f0       	brcs	.+30     	; 0x4f8 <__divsf3_pse+0x86>
 4da:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_inf>
 4de:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>
 4e2:	5f 3f       	cpi	r21, 0xFF	; 255
 4e4:	e4 f3       	brlt	.-8      	; 0x4de <__divsf3_pse+0x6c>
 4e6:	98 3e       	cpi	r25, 0xE8	; 232
 4e8:	d4 f3       	brlt	.-12     	; 0x4de <__divsf3_pse+0x6c>
 4ea:	86 95       	lsr	r24
 4ec:	77 95       	ror	r23
 4ee:	67 95       	ror	r22
 4f0:	b7 95       	ror	r27
 4f2:	f7 95       	ror	r31
 4f4:	9f 5f       	subi	r25, 0xFF	; 255
 4f6:	c9 f7       	brne	.-14     	; 0x4ea <__divsf3_pse+0x78>
 4f8:	88 0f       	add	r24, r24
 4fa:	91 1d       	adc	r25, r1
 4fc:	96 95       	lsr	r25
 4fe:	87 95       	ror	r24
 500:	97 f9       	bld	r25, 7
 502:	08 95       	ret
 504:	e1 e0       	ldi	r30, 0x01	; 1
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	88 1f       	adc	r24, r24
 50c:	bb 1f       	adc	r27, r27
 50e:	62 17       	cp	r22, r18
 510:	73 07       	cpc	r23, r19
 512:	84 07       	cpc	r24, r20
 514:	ba 07       	cpc	r27, r26
 516:	20 f0       	brcs	.+8      	; 0x520 <__divsf3_pse+0xae>
 518:	62 1b       	sub	r22, r18
 51a:	73 0b       	sbc	r23, r19
 51c:	84 0b       	sbc	r24, r20
 51e:	ba 0b       	sbc	r27, r26
 520:	ee 1f       	adc	r30, r30
 522:	88 f7       	brcc	.-30     	; 0x506 <__divsf3_pse+0x94>
 524:	e0 95       	com	r30
 526:	08 95       	ret

00000528 <__fixsfsi>:
 528:	0e 94 9b 02 	call	0x536	; 0x536 <__fixunssfsi>
 52c:	68 94       	set
 52e:	b1 11       	cpse	r27, r1
 530:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>
 534:	08 95       	ret

00000536 <__fixunssfsi>:
 536:	0e 94 37 03 	call	0x66e	; 0x66e <__fp_splitA>
 53a:	88 f0       	brcs	.+34     	; 0x55e <__fixunssfsi+0x28>
 53c:	9f 57       	subi	r25, 0x7F	; 127
 53e:	98 f0       	brcs	.+38     	; 0x566 <__fixunssfsi+0x30>
 540:	b9 2f       	mov	r27, r25
 542:	99 27       	eor	r25, r25
 544:	b7 51       	subi	r27, 0x17	; 23
 546:	b0 f0       	brcs	.+44     	; 0x574 <__fixunssfsi+0x3e>
 548:	e1 f0       	breq	.+56     	; 0x582 <__fixunssfsi+0x4c>
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	88 1f       	adc	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	1a f0       	brmi	.+6      	; 0x55a <__fixunssfsi+0x24>
 554:	ba 95       	dec	r27
 556:	c9 f7       	brne	.-14     	; 0x54a <__fixunssfsi+0x14>
 558:	14 c0       	rjmp	.+40     	; 0x582 <__fixunssfsi+0x4c>
 55a:	b1 30       	cpi	r27, 0x01	; 1
 55c:	91 f0       	breq	.+36     	; 0x582 <__fixunssfsi+0x4c>
 55e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_zero>
 562:	b1 e0       	ldi	r27, 0x01	; 1
 564:	08 95       	ret
 566:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_zero>
 56a:	67 2f       	mov	r22, r23
 56c:	78 2f       	mov	r23, r24
 56e:	88 27       	eor	r24, r24
 570:	b8 5f       	subi	r27, 0xF8	; 248
 572:	39 f0       	breq	.+14     	; 0x582 <__fixunssfsi+0x4c>
 574:	b9 3f       	cpi	r27, 0xF9	; 249
 576:	cc f3       	brlt	.-14     	; 0x56a <__fixunssfsi+0x34>
 578:	86 95       	lsr	r24
 57a:	77 95       	ror	r23
 57c:	67 95       	ror	r22
 57e:	b3 95       	inc	r27
 580:	d9 f7       	brne	.-10     	; 0x578 <__fixunssfsi+0x42>
 582:	3e f4       	brtc	.+14     	; 0x592 <__fixunssfsi+0x5c>
 584:	90 95       	com	r25
 586:	80 95       	com	r24
 588:	70 95       	com	r23
 58a:	61 95       	neg	r22
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	8f 4f       	sbci	r24, 0xFF	; 255
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	08 95       	ret

00000594 <__floatunsisf>:
 594:	e8 94       	clt
 596:	09 c0       	rjmp	.+18     	; 0x5aa <__floatsisf+0x12>

00000598 <__floatsisf>:
 598:	97 fb       	bst	r25, 7
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__floatsisf+0x12>
 59c:	90 95       	com	r25
 59e:	80 95       	com	r24
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	99 23       	and	r25, r25
 5ac:	a9 f0       	breq	.+42     	; 0x5d8 <__floatsisf+0x40>
 5ae:	f9 2f       	mov	r31, r25
 5b0:	96 e9       	ldi	r25, 0x96	; 150
 5b2:	bb 27       	eor	r27, r27
 5b4:	93 95       	inc	r25
 5b6:	f6 95       	lsr	r31
 5b8:	87 95       	ror	r24
 5ba:	77 95       	ror	r23
 5bc:	67 95       	ror	r22
 5be:	b7 95       	ror	r27
 5c0:	f1 11       	cpse	r31, r1
 5c2:	f8 cf       	rjmp	.-16     	; 0x5b4 <__floatsisf+0x1c>
 5c4:	fa f4       	brpl	.+62     	; 0x604 <__floatsisf+0x6c>
 5c6:	bb 0f       	add	r27, r27
 5c8:	11 f4       	brne	.+4      	; 0x5ce <__floatsisf+0x36>
 5ca:	60 ff       	sbrs	r22, 0
 5cc:	1b c0       	rjmp	.+54     	; 0x604 <__floatsisf+0x6c>
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	8f 4f       	sbci	r24, 0xFF	; 255
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	16 c0       	rjmp	.+44     	; 0x604 <__floatsisf+0x6c>
 5d8:	88 23       	and	r24, r24
 5da:	11 f0       	breq	.+4      	; 0x5e0 <__floatsisf+0x48>
 5dc:	96 e9       	ldi	r25, 0x96	; 150
 5de:	11 c0       	rjmp	.+34     	; 0x602 <__floatsisf+0x6a>
 5e0:	77 23       	and	r23, r23
 5e2:	21 f0       	breq	.+8      	; 0x5ec <__floatsisf+0x54>
 5e4:	9e e8       	ldi	r25, 0x8E	; 142
 5e6:	87 2f       	mov	r24, r23
 5e8:	76 2f       	mov	r23, r22
 5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <__floatsisf+0x5e>
 5ec:	66 23       	and	r22, r22
 5ee:	71 f0       	breq	.+28     	; 0x60c <__floatsisf+0x74>
 5f0:	96 e8       	ldi	r25, 0x86	; 134
 5f2:	86 2f       	mov	r24, r22
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	2a f0       	brmi	.+10     	; 0x604 <__floatsisf+0x6c>
 5fa:	9a 95       	dec	r25
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	da f7       	brpl	.-10     	; 0x5fa <__floatsisf+0x62>
 604:	88 0f       	add	r24, r24
 606:	96 95       	lsr	r25
 608:	87 95       	ror	r24
 60a:	97 f9       	bld	r25, 7
 60c:	08 95       	ret

0000060e <__fp_inf>:
 60e:	97 f9       	bld	r25, 7
 610:	9f 67       	ori	r25, 0x7F	; 127
 612:	80 e8       	ldi	r24, 0x80	; 128
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	08 95       	ret

0000061a <__fp_nan>:
 61a:	9f ef       	ldi	r25, 0xFF	; 255
 61c:	80 ec       	ldi	r24, 0xC0	; 192
 61e:	08 95       	ret

00000620 <__fp_pscA>:
 620:	00 24       	eor	r0, r0
 622:	0a 94       	dec	r0
 624:	16 16       	cp	r1, r22
 626:	17 06       	cpc	r1, r23
 628:	18 06       	cpc	r1, r24
 62a:	09 06       	cpc	r0, r25
 62c:	08 95       	ret

0000062e <__fp_pscB>:
 62e:	00 24       	eor	r0, r0
 630:	0a 94       	dec	r0
 632:	12 16       	cp	r1, r18
 634:	13 06       	cpc	r1, r19
 636:	14 06       	cpc	r1, r20
 638:	05 06       	cpc	r0, r21
 63a:	08 95       	ret

0000063c <__fp_round>:
 63c:	09 2e       	mov	r0, r25
 63e:	03 94       	inc	r0
 640:	00 0c       	add	r0, r0
 642:	11 f4       	brne	.+4      	; 0x648 <__fp_round+0xc>
 644:	88 23       	and	r24, r24
 646:	52 f0       	brmi	.+20     	; 0x65c <__fp_round+0x20>
 648:	bb 0f       	add	r27, r27
 64a:	40 f4       	brcc	.+16     	; 0x65c <__fp_round+0x20>
 64c:	bf 2b       	or	r27, r31
 64e:	11 f4       	brne	.+4      	; 0x654 <__fp_round+0x18>
 650:	60 ff       	sbrs	r22, 0
 652:	04 c0       	rjmp	.+8      	; 0x65c <__fp_round+0x20>
 654:	6f 5f       	subi	r22, 0xFF	; 255
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	8f 4f       	sbci	r24, 0xFF	; 255
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	08 95       	ret

0000065e <__fp_split3>:
 65e:	57 fd       	sbrc	r21, 7
 660:	90 58       	subi	r25, 0x80	; 128
 662:	44 0f       	add	r20, r20
 664:	55 1f       	adc	r21, r21
 666:	59 f0       	breq	.+22     	; 0x67e <__fp_splitA+0x10>
 668:	5f 3f       	cpi	r21, 0xFF	; 255
 66a:	71 f0       	breq	.+28     	; 0x688 <__fp_splitA+0x1a>
 66c:	47 95       	ror	r20

0000066e <__fp_splitA>:
 66e:	88 0f       	add	r24, r24
 670:	97 fb       	bst	r25, 7
 672:	99 1f       	adc	r25, r25
 674:	61 f0       	breq	.+24     	; 0x68e <__fp_splitA+0x20>
 676:	9f 3f       	cpi	r25, 0xFF	; 255
 678:	79 f0       	breq	.+30     	; 0x698 <__fp_splitA+0x2a>
 67a:	87 95       	ror	r24
 67c:	08 95       	ret
 67e:	12 16       	cp	r1, r18
 680:	13 06       	cpc	r1, r19
 682:	14 06       	cpc	r1, r20
 684:	55 1f       	adc	r21, r21
 686:	f2 cf       	rjmp	.-28     	; 0x66c <__fp_split3+0xe>
 688:	46 95       	lsr	r20
 68a:	f1 df       	rcall	.-30     	; 0x66e <__fp_splitA>
 68c:	08 c0       	rjmp	.+16     	; 0x69e <__fp_splitA+0x30>
 68e:	16 16       	cp	r1, r22
 690:	17 06       	cpc	r1, r23
 692:	18 06       	cpc	r1, r24
 694:	99 1f       	adc	r25, r25
 696:	f1 cf       	rjmp	.-30     	; 0x67a <__fp_splitA+0xc>
 698:	86 95       	lsr	r24
 69a:	71 05       	cpc	r23, r1
 69c:	61 05       	cpc	r22, r1
 69e:	08 94       	sec
 6a0:	08 95       	ret

000006a2 <__fp_zero>:
 6a2:	e8 94       	clt

000006a4 <__fp_szero>:
 6a4:	bb 27       	eor	r27, r27
 6a6:	66 27       	eor	r22, r22
 6a8:	77 27       	eor	r23, r23
 6aa:	cb 01       	movw	r24, r22
 6ac:	97 f9       	bld	r25, 7
 6ae:	08 95       	ret

000006b0 <__mulsf3>:
 6b0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3x>
 6b4:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_round>
 6b8:	0e 94 10 03 	call	0x620	; 0x620 <__fp_pscA>
 6bc:	38 f0       	brcs	.+14     	; 0x6cc <__mulsf3+0x1c>
 6be:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_pscB>
 6c2:	20 f0       	brcs	.+8      	; 0x6cc <__mulsf3+0x1c>
 6c4:	95 23       	and	r25, r21
 6c6:	11 f0       	breq	.+4      	; 0x6cc <__mulsf3+0x1c>
 6c8:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_inf>
 6cc:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_nan>
 6d0:	11 24       	eor	r1, r1
 6d2:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>

000006d6 <__mulsf3x>:
 6d6:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_split3>
 6da:	70 f3       	brcs	.-36     	; 0x6b8 <__mulsf3+0x8>

000006dc <__mulsf3_pse>:
 6dc:	95 9f       	mul	r25, r21
 6de:	c1 f3       	breq	.-16     	; 0x6d0 <__mulsf3+0x20>
 6e0:	95 0f       	add	r25, r21
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	55 1f       	adc	r21, r21
 6e6:	62 9f       	mul	r22, r18
 6e8:	f0 01       	movw	r30, r0
 6ea:	72 9f       	mul	r23, r18
 6ec:	bb 27       	eor	r27, r27
 6ee:	f0 0d       	add	r31, r0
 6f0:	b1 1d       	adc	r27, r1
 6f2:	63 9f       	mul	r22, r19
 6f4:	aa 27       	eor	r26, r26
 6f6:	f0 0d       	add	r31, r0
 6f8:	b1 1d       	adc	r27, r1
 6fa:	aa 1f       	adc	r26, r26
 6fc:	64 9f       	mul	r22, r20
 6fe:	66 27       	eor	r22, r22
 700:	b0 0d       	add	r27, r0
 702:	a1 1d       	adc	r26, r1
 704:	66 1f       	adc	r22, r22
 706:	82 9f       	mul	r24, r18
 708:	22 27       	eor	r18, r18
 70a:	b0 0d       	add	r27, r0
 70c:	a1 1d       	adc	r26, r1
 70e:	62 1f       	adc	r22, r18
 710:	73 9f       	mul	r23, r19
 712:	b0 0d       	add	r27, r0
 714:	a1 1d       	adc	r26, r1
 716:	62 1f       	adc	r22, r18
 718:	83 9f       	mul	r24, r19
 71a:	a0 0d       	add	r26, r0
 71c:	61 1d       	adc	r22, r1
 71e:	22 1f       	adc	r18, r18
 720:	74 9f       	mul	r23, r20
 722:	33 27       	eor	r19, r19
 724:	a0 0d       	add	r26, r0
 726:	61 1d       	adc	r22, r1
 728:	23 1f       	adc	r18, r19
 72a:	84 9f       	mul	r24, r20
 72c:	60 0d       	add	r22, r0
 72e:	21 1d       	adc	r18, r1
 730:	82 2f       	mov	r24, r18
 732:	76 2f       	mov	r23, r22
 734:	6a 2f       	mov	r22, r26
 736:	11 24       	eor	r1, r1
 738:	9f 57       	subi	r25, 0x7F	; 127
 73a:	50 40       	sbci	r21, 0x00	; 0
 73c:	9a f0       	brmi	.+38     	; 0x764 <__mulsf3_pse+0x88>
 73e:	f1 f0       	breq	.+60     	; 0x77c <__mulsf3_pse+0xa0>
 740:	88 23       	and	r24, r24
 742:	4a f0       	brmi	.+18     	; 0x756 <__mulsf3_pse+0x7a>
 744:	ee 0f       	add	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	bb 1f       	adc	r27, r27
 74a:	66 1f       	adc	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	91 50       	subi	r25, 0x01	; 1
 752:	50 40       	sbci	r21, 0x00	; 0
 754:	a9 f7       	brne	.-22     	; 0x740 <__mulsf3_pse+0x64>
 756:	9e 3f       	cpi	r25, 0xFE	; 254
 758:	51 05       	cpc	r21, r1
 75a:	80 f0       	brcs	.+32     	; 0x77c <__mulsf3_pse+0xa0>
 75c:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_inf>
 760:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>
 764:	5f 3f       	cpi	r21, 0xFF	; 255
 766:	e4 f3       	brlt	.-8      	; 0x760 <__mulsf3_pse+0x84>
 768:	98 3e       	cpi	r25, 0xE8	; 232
 76a:	d4 f3       	brlt	.-12     	; 0x760 <__mulsf3_pse+0x84>
 76c:	86 95       	lsr	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f7 95       	ror	r31
 776:	e7 95       	ror	r30
 778:	9f 5f       	subi	r25, 0xFF	; 255
 77a:	c1 f7       	brne	.-16     	; 0x76c <__mulsf3_pse+0x90>
 77c:	fe 2b       	or	r31, r30
 77e:	88 0f       	add	r24, r24
 780:	91 1d       	adc	r25, r1
 782:	96 95       	lsr	r25
 784:	87 95       	ror	r24
 786:	97 f9       	bld	r25, 7
 788:	08 95       	ret

0000078a <__udivmodsi4>:
 78a:	a1 e2       	ldi	r26, 0x21	; 33
 78c:	1a 2e       	mov	r1, r26
 78e:	aa 1b       	sub	r26, r26
 790:	bb 1b       	sub	r27, r27
 792:	fd 01       	movw	r30, r26
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <__udivmodsi4_ep>

00000796 <__udivmodsi4_loop>:
 796:	aa 1f       	adc	r26, r26
 798:	bb 1f       	adc	r27, r27
 79a:	ee 1f       	adc	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	a2 17       	cp	r26, r18
 7a0:	b3 07       	cpc	r27, r19
 7a2:	e4 07       	cpc	r30, r20
 7a4:	f5 07       	cpc	r31, r21
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__udivmodsi4_ep>
 7a8:	a2 1b       	sub	r26, r18
 7aa:	b3 0b       	sbc	r27, r19
 7ac:	e4 0b       	sbc	r30, r20
 7ae:	f5 0b       	sbc	r31, r21

000007b0 <__udivmodsi4_ep>:
 7b0:	66 1f       	adc	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	1a 94       	dec	r1
 7ba:	69 f7       	brne	.-38     	; 0x796 <__udivmodsi4_loop>
 7bc:	60 95       	com	r22
 7be:	70 95       	com	r23
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	9b 01       	movw	r18, r22
 7c6:	ac 01       	movw	r20, r24
 7c8:	bd 01       	movw	r22, r26
 7ca:	cf 01       	movw	r24, r30
 7cc:	08 95       	ret

000007ce <__tablejump2__>:
 7ce:	ee 0f       	add	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	05 90       	lpm	r0, Z+
 7d4:	f4 91       	lpm	r31, Z
 7d6:	e0 2d       	mov	r30, r0
 7d8:	09 94       	ijmp

000007da <snprintf>:
 7da:	ae e0       	ldi	r26, 0x0E	; 14
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e3 ef       	ldi	r30, 0xF3	; 243
 7e0:	f3 e0       	ldi	r31, 0x03	; 3
 7e2:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__prologue_saves__+0x1c>
 7e6:	0d 89       	ldd	r16, Y+21	; 0x15
 7e8:	1e 89       	ldd	r17, Y+22	; 0x16
 7ea:	8f 89       	ldd	r24, Y+23	; 0x17
 7ec:	98 8d       	ldd	r25, Y+24	; 0x18
 7ee:	26 e0       	ldi	r18, 0x06	; 6
 7f0:	2c 83       	std	Y+4, r18	; 0x04
 7f2:	1a 83       	std	Y+2, r17	; 0x02
 7f4:	09 83       	std	Y+1, r16	; 0x01
 7f6:	97 ff       	sbrs	r25, 7
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <snprintf+0x24>
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	90 e8       	ldi	r25, 0x80	; 128
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	9e 83       	std	Y+6, r25	; 0x06
 802:	8d 83       	std	Y+5, r24	; 0x05
 804:	ae 01       	movw	r20, r28
 806:	45 5e       	subi	r20, 0xE5	; 229
 808:	5f 4f       	sbci	r21, 0xFF	; 255
 80a:	69 8d       	ldd	r22, Y+25	; 0x19
 80c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 80e:	ce 01       	movw	r24, r28
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	0e 94 1d 04 	call	0x83a	; 0x83a <vfprintf>
 816:	4d 81       	ldd	r20, Y+5	; 0x05
 818:	5e 81       	ldd	r21, Y+6	; 0x06
 81a:	57 fd       	sbrc	r21, 7
 81c:	0a c0       	rjmp	.+20     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 81e:	2f 81       	ldd	r18, Y+7	; 0x07
 820:	38 85       	ldd	r19, Y+8	; 0x08
 822:	42 17       	cp	r20, r18
 824:	53 07       	cpc	r21, r19
 826:	0c f4       	brge	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 828:	9a 01       	movw	r18, r20
 82a:	f8 01       	movw	r30, r16
 82c:	e2 0f       	add	r30, r18
 82e:	f3 1f       	adc	r31, r19
 830:	10 82       	st	Z, r1
 832:	2e 96       	adiw	r28, 0x0e	; 14
 834:	e4 e0       	ldi	r30, 0x04	; 4
 836:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__epilogue_restores__+0x1c>

0000083a <vfprintf>:
 83a:	ab e0       	ldi	r26, 0x0B	; 11
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	e3 e2       	ldi	r30, 0x23	; 35
 840:	f4 e0       	ldi	r31, 0x04	; 4
 842:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__prologue_saves__>
 846:	6c 01       	movw	r12, r24
 848:	7b 01       	movw	r14, r22
 84a:	8a 01       	movw	r16, r20
 84c:	fc 01       	movw	r30, r24
 84e:	17 82       	std	Z+7, r1	; 0x07
 850:	16 82       	std	Z+6, r1	; 0x06
 852:	83 81       	ldd	r24, Z+3	; 0x03
 854:	81 ff       	sbrs	r24, 1
 856:	cc c1       	rjmp	.+920    	; 0xbf0 <__stack+0x2f1>
 858:	ce 01       	movw	r24, r28
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	3c 01       	movw	r6, r24
 85e:	f6 01       	movw	r30, r12
 860:	93 81       	ldd	r25, Z+3	; 0x03
 862:	f7 01       	movw	r30, r14
 864:	93 fd       	sbrc	r25, 3
 866:	85 91       	lpm	r24, Z+
 868:	93 ff       	sbrs	r25, 3
 86a:	81 91       	ld	r24, Z+
 86c:	7f 01       	movw	r14, r30
 86e:	88 23       	and	r24, r24
 870:	09 f4       	brne	.+2      	; 0x874 <vfprintf+0x3a>
 872:	ba c1       	rjmp	.+884    	; 0xbe8 <__stack+0x2e9>
 874:	85 32       	cpi	r24, 0x25	; 37
 876:	39 f4       	brne	.+14     	; 0x886 <vfprintf+0x4c>
 878:	93 fd       	sbrc	r25, 3
 87a:	85 91       	lpm	r24, Z+
 87c:	93 ff       	sbrs	r25, 3
 87e:	81 91       	ld	r24, Z+
 880:	7f 01       	movw	r14, r30
 882:	85 32       	cpi	r24, 0x25	; 37
 884:	29 f4       	brne	.+10     	; 0x890 <vfprintf+0x56>
 886:	b6 01       	movw	r22, r12
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 88e:	e7 cf       	rjmp	.-50     	; 0x85e <vfprintf+0x24>
 890:	91 2c       	mov	r9, r1
 892:	21 2c       	mov	r2, r1
 894:	31 2c       	mov	r3, r1
 896:	ff e1       	ldi	r31, 0x1F	; 31
 898:	f3 15       	cp	r31, r3
 89a:	d8 f0       	brcs	.+54     	; 0x8d2 <vfprintf+0x98>
 89c:	8b 32       	cpi	r24, 0x2B	; 43
 89e:	79 f0       	breq	.+30     	; 0x8be <vfprintf+0x84>
 8a0:	38 f4       	brcc	.+14     	; 0x8b0 <vfprintf+0x76>
 8a2:	80 32       	cpi	r24, 0x20	; 32
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <vfprintf+0x8a>
 8a6:	83 32       	cpi	r24, 0x23	; 35
 8a8:	a1 f4       	brne	.+40     	; 0x8d2 <vfprintf+0x98>
 8aa:	23 2d       	mov	r18, r3
 8ac:	20 61       	ori	r18, 0x10	; 16
 8ae:	1d c0       	rjmp	.+58     	; 0x8ea <vfprintf+0xb0>
 8b0:	8d 32       	cpi	r24, 0x2D	; 45
 8b2:	61 f0       	breq	.+24     	; 0x8cc <vfprintf+0x92>
 8b4:	80 33       	cpi	r24, 0x30	; 48
 8b6:	69 f4       	brne	.+26     	; 0x8d2 <vfprintf+0x98>
 8b8:	23 2d       	mov	r18, r3
 8ba:	21 60       	ori	r18, 0x01	; 1
 8bc:	16 c0       	rjmp	.+44     	; 0x8ea <vfprintf+0xb0>
 8be:	83 2d       	mov	r24, r3
 8c0:	82 60       	ori	r24, 0x02	; 2
 8c2:	38 2e       	mov	r3, r24
 8c4:	e3 2d       	mov	r30, r3
 8c6:	e4 60       	ori	r30, 0x04	; 4
 8c8:	3e 2e       	mov	r3, r30
 8ca:	2a c0       	rjmp	.+84     	; 0x920 <__stack+0x21>
 8cc:	f3 2d       	mov	r31, r3
 8ce:	f8 60       	ori	r31, 0x08	; 8
 8d0:	1d c0       	rjmp	.+58     	; 0x90c <__stack+0xd>
 8d2:	37 fc       	sbrc	r3, 7
 8d4:	2d c0       	rjmp	.+90     	; 0x930 <__stack+0x31>
 8d6:	20 ed       	ldi	r18, 0xD0	; 208
 8d8:	28 0f       	add	r18, r24
 8da:	2a 30       	cpi	r18, 0x0A	; 10
 8dc:	40 f0       	brcs	.+16     	; 0x8ee <vfprintf+0xb4>
 8de:	8e 32       	cpi	r24, 0x2E	; 46
 8e0:	b9 f4       	brne	.+46     	; 0x910 <__stack+0x11>
 8e2:	36 fc       	sbrc	r3, 6
 8e4:	81 c1       	rjmp	.+770    	; 0xbe8 <__stack+0x2e9>
 8e6:	23 2d       	mov	r18, r3
 8e8:	20 64       	ori	r18, 0x40	; 64
 8ea:	32 2e       	mov	r3, r18
 8ec:	19 c0       	rjmp	.+50     	; 0x920 <__stack+0x21>
 8ee:	36 fe       	sbrs	r3, 6
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <vfprintf+0xc4>
 8f2:	8a e0       	ldi	r24, 0x0A	; 10
 8f4:	98 9e       	mul	r9, r24
 8f6:	20 0d       	add	r18, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	92 2e       	mov	r9, r18
 8fc:	11 c0       	rjmp	.+34     	; 0x920 <__stack+0x21>
 8fe:	ea e0       	ldi	r30, 0x0A	; 10
 900:	2e 9e       	mul	r2, r30
 902:	20 0d       	add	r18, r0
 904:	11 24       	eor	r1, r1
 906:	22 2e       	mov	r2, r18
 908:	f3 2d       	mov	r31, r3
 90a:	f0 62       	ori	r31, 0x20	; 32
 90c:	3f 2e       	mov	r3, r31
 90e:	08 c0       	rjmp	.+16     	; 0x920 <__stack+0x21>
 910:	8c 36       	cpi	r24, 0x6C	; 108
 912:	21 f4       	brne	.+8      	; 0x91c <__stack+0x1d>
 914:	83 2d       	mov	r24, r3
 916:	80 68       	ori	r24, 0x80	; 128
 918:	38 2e       	mov	r3, r24
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x21>
 91c:	88 36       	cpi	r24, 0x68	; 104
 91e:	41 f4       	brne	.+16     	; 0x930 <__stack+0x31>
 920:	f7 01       	movw	r30, r14
 922:	93 fd       	sbrc	r25, 3
 924:	85 91       	lpm	r24, Z+
 926:	93 ff       	sbrs	r25, 3
 928:	81 91       	ld	r24, Z+
 92a:	7f 01       	movw	r14, r30
 92c:	81 11       	cpse	r24, r1
 92e:	b3 cf       	rjmp	.-154    	; 0x896 <vfprintf+0x5c>
 930:	98 2f       	mov	r25, r24
 932:	9f 7d       	andi	r25, 0xDF	; 223
 934:	95 54       	subi	r25, 0x45	; 69
 936:	93 30       	cpi	r25, 0x03	; 3
 938:	28 f4       	brcc	.+10     	; 0x944 <__stack+0x45>
 93a:	0c 5f       	subi	r16, 0xFC	; 252
 93c:	1f 4f       	sbci	r17, 0xFF	; 255
 93e:	9f e3       	ldi	r25, 0x3F	; 63
 940:	99 83       	std	Y+1, r25	; 0x01
 942:	0d c0       	rjmp	.+26     	; 0x95e <__stack+0x5f>
 944:	83 36       	cpi	r24, 0x63	; 99
 946:	31 f0       	breq	.+12     	; 0x954 <__stack+0x55>
 948:	83 37       	cpi	r24, 0x73	; 115
 94a:	71 f0       	breq	.+28     	; 0x968 <__stack+0x69>
 94c:	83 35       	cpi	r24, 0x53	; 83
 94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0x53>
 950:	59 c0       	rjmp	.+178    	; 0xa04 <__stack+0x105>
 952:	21 c0       	rjmp	.+66     	; 0x996 <__stack+0x97>
 954:	f8 01       	movw	r30, r16
 956:	80 81       	ld	r24, Z
 958:	89 83       	std	Y+1, r24	; 0x01
 95a:	0e 5f       	subi	r16, 0xFE	; 254
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	88 24       	eor	r8, r8
 960:	83 94       	inc	r8
 962:	91 2c       	mov	r9, r1
 964:	53 01       	movw	r10, r6
 966:	13 c0       	rjmp	.+38     	; 0x98e <__stack+0x8f>
 968:	28 01       	movw	r4, r16
 96a:	f2 e0       	ldi	r31, 0x02	; 2
 96c:	4f 0e       	add	r4, r31
 96e:	51 1c       	adc	r5, r1
 970:	f8 01       	movw	r30, r16
 972:	a0 80       	ld	r10, Z
 974:	b1 80       	ldd	r11, Z+1	; 0x01
 976:	36 fe       	sbrs	r3, 6
 978:	03 c0       	rjmp	.+6      	; 0x980 <__stack+0x81>
 97a:	69 2d       	mov	r22, r9
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x85>
 980:	6f ef       	ldi	r22, 0xFF	; 255
 982:	7f ef       	ldi	r23, 0xFF	; 255
 984:	c5 01       	movw	r24, r10
 986:	0e 94 09 06 	call	0xc12	; 0xc12 <strnlen>
 98a:	4c 01       	movw	r8, r24
 98c:	82 01       	movw	r16, r4
 98e:	f3 2d       	mov	r31, r3
 990:	ff 77       	andi	r31, 0x7F	; 127
 992:	3f 2e       	mov	r3, r31
 994:	16 c0       	rjmp	.+44     	; 0x9c2 <__stack+0xc3>
 996:	28 01       	movw	r4, r16
 998:	22 e0       	ldi	r18, 0x02	; 2
 99a:	42 0e       	add	r4, r18
 99c:	51 1c       	adc	r5, r1
 99e:	f8 01       	movw	r30, r16
 9a0:	a0 80       	ld	r10, Z
 9a2:	b1 80       	ldd	r11, Z+1	; 0x01
 9a4:	36 fe       	sbrs	r3, 6
 9a6:	03 c0       	rjmp	.+6      	; 0x9ae <__stack+0xaf>
 9a8:	69 2d       	mov	r22, r9
 9aa:	70 e0       	ldi	r23, 0x00	; 0
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	6f ef       	ldi	r22, 0xFF	; 255
 9b0:	7f ef       	ldi	r23, 0xFF	; 255
 9b2:	c5 01       	movw	r24, r10
 9b4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <strnlen_P>
 9b8:	4c 01       	movw	r8, r24
 9ba:	f3 2d       	mov	r31, r3
 9bc:	f0 68       	ori	r31, 0x80	; 128
 9be:	3f 2e       	mov	r3, r31
 9c0:	82 01       	movw	r16, r4
 9c2:	33 fc       	sbrc	r3, 3
 9c4:	1b c0       	rjmp	.+54     	; 0x9fc <__stack+0xfd>
 9c6:	82 2d       	mov	r24, r2
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	88 16       	cp	r8, r24
 9cc:	99 06       	cpc	r9, r25
 9ce:	b0 f4       	brcc	.+44     	; 0x9fc <__stack+0xfd>
 9d0:	b6 01       	movw	r22, r12
 9d2:	80 e2       	ldi	r24, 0x20	; 32
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 9da:	2a 94       	dec	r2
 9dc:	f4 cf       	rjmp	.-24     	; 0x9c6 <__stack+0xc7>
 9de:	f5 01       	movw	r30, r10
 9e0:	37 fc       	sbrc	r3, 7
 9e2:	85 91       	lpm	r24, Z+
 9e4:	37 fe       	sbrs	r3, 7
 9e6:	81 91       	ld	r24, Z+
 9e8:	5f 01       	movw	r10, r30
 9ea:	b6 01       	movw	r22, r12
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 9f2:	21 10       	cpse	r2, r1
 9f4:	2a 94       	dec	r2
 9f6:	21 e0       	ldi	r18, 0x01	; 1
 9f8:	82 1a       	sub	r8, r18
 9fa:	91 08       	sbc	r9, r1
 9fc:	81 14       	cp	r8, r1
 9fe:	91 04       	cpc	r9, r1
 a00:	71 f7       	brne	.-36     	; 0x9de <__stack+0xdf>
 a02:	e8 c0       	rjmp	.+464    	; 0xbd4 <__stack+0x2d5>
 a04:	84 36       	cpi	r24, 0x64	; 100
 a06:	11 f0       	breq	.+4      	; 0xa0c <__stack+0x10d>
 a08:	89 36       	cpi	r24, 0x69	; 105
 a0a:	41 f5       	brne	.+80     	; 0xa5c <__stack+0x15d>
 a0c:	f8 01       	movw	r30, r16
 a0e:	37 fe       	sbrs	r3, 7
 a10:	07 c0       	rjmp	.+14     	; 0xa20 <__stack+0x121>
 a12:	60 81       	ld	r22, Z
 a14:	71 81       	ldd	r23, Z+1	; 0x01
 a16:	82 81       	ldd	r24, Z+2	; 0x02
 a18:	93 81       	ldd	r25, Z+3	; 0x03
 a1a:	0c 5f       	subi	r16, 0xFC	; 252
 a1c:	1f 4f       	sbci	r17, 0xFF	; 255
 a1e:	08 c0       	rjmp	.+16     	; 0xa30 <__stack+0x131>
 a20:	60 81       	ld	r22, Z
 a22:	71 81       	ldd	r23, Z+1	; 0x01
 a24:	07 2e       	mov	r0, r23
 a26:	00 0c       	add	r0, r0
 a28:	88 0b       	sbc	r24, r24
 a2a:	99 0b       	sbc	r25, r25
 a2c:	0e 5f       	subi	r16, 0xFE	; 254
 a2e:	1f 4f       	sbci	r17, 0xFF	; 255
 a30:	f3 2d       	mov	r31, r3
 a32:	ff 76       	andi	r31, 0x6F	; 111
 a34:	3f 2e       	mov	r3, r31
 a36:	97 ff       	sbrs	r25, 7
 a38:	09 c0       	rjmp	.+18     	; 0xa4c <__stack+0x14d>
 a3a:	90 95       	com	r25
 a3c:	80 95       	com	r24
 a3e:	70 95       	com	r23
 a40:	61 95       	neg	r22
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	f0 68       	ori	r31, 0x80	; 128
 a4a:	3f 2e       	mov	r3, r31
 a4c:	2a e0       	ldi	r18, 0x0A	; 10
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	a3 01       	movw	r20, r6
 a52:	0e 94 50 06 	call	0xca0	; 0xca0 <__ultoa_invert>
 a56:	88 2e       	mov	r8, r24
 a58:	86 18       	sub	r8, r6
 a5a:	45 c0       	rjmp	.+138    	; 0xae6 <__stack+0x1e7>
 a5c:	85 37       	cpi	r24, 0x75	; 117
 a5e:	31 f4       	brne	.+12     	; 0xa6c <__stack+0x16d>
 a60:	23 2d       	mov	r18, r3
 a62:	2f 7e       	andi	r18, 0xEF	; 239
 a64:	b2 2e       	mov	r11, r18
 a66:	2a e0       	ldi	r18, 0x0A	; 10
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	25 c0       	rjmp	.+74     	; 0xab6 <__stack+0x1b7>
 a6c:	93 2d       	mov	r25, r3
 a6e:	99 7f       	andi	r25, 0xF9	; 249
 a70:	b9 2e       	mov	r11, r25
 a72:	8f 36       	cpi	r24, 0x6F	; 111
 a74:	c1 f0       	breq	.+48     	; 0xaa6 <__stack+0x1a7>
 a76:	18 f4       	brcc	.+6      	; 0xa7e <__stack+0x17f>
 a78:	88 35       	cpi	r24, 0x58	; 88
 a7a:	79 f0       	breq	.+30     	; 0xa9a <__stack+0x19b>
 a7c:	b5 c0       	rjmp	.+362    	; 0xbe8 <__stack+0x2e9>
 a7e:	80 37       	cpi	r24, 0x70	; 112
 a80:	19 f0       	breq	.+6      	; 0xa88 <__stack+0x189>
 a82:	88 37       	cpi	r24, 0x78	; 120
 a84:	21 f0       	breq	.+8      	; 0xa8e <__stack+0x18f>
 a86:	b0 c0       	rjmp	.+352    	; 0xbe8 <__stack+0x2e9>
 a88:	e9 2f       	mov	r30, r25
 a8a:	e0 61       	ori	r30, 0x10	; 16
 a8c:	be 2e       	mov	r11, r30
 a8e:	b4 fe       	sbrs	r11, 4
 a90:	0d c0       	rjmp	.+26     	; 0xaac <__stack+0x1ad>
 a92:	fb 2d       	mov	r31, r11
 a94:	f4 60       	ori	r31, 0x04	; 4
 a96:	bf 2e       	mov	r11, r31
 a98:	09 c0       	rjmp	.+18     	; 0xaac <__stack+0x1ad>
 a9a:	34 fe       	sbrs	r3, 4
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <__stack+0x1b3>
 a9e:	29 2f       	mov	r18, r25
 aa0:	26 60       	ori	r18, 0x06	; 6
 aa2:	b2 2e       	mov	r11, r18
 aa4:	06 c0       	rjmp	.+12     	; 0xab2 <__stack+0x1b3>
 aa6:	28 e0       	ldi	r18, 0x08	; 8
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__stack+0x1b7>
 aac:	20 e1       	ldi	r18, 0x10	; 16
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__stack+0x1b7>
 ab2:	20 e1       	ldi	r18, 0x10	; 16
 ab4:	32 e0       	ldi	r19, 0x02	; 2
 ab6:	f8 01       	movw	r30, r16
 ab8:	b7 fe       	sbrs	r11, 7
 aba:	07 c0       	rjmp	.+14     	; 0xaca <__stack+0x1cb>
 abc:	60 81       	ld	r22, Z
 abe:	71 81       	ldd	r23, Z+1	; 0x01
 ac0:	82 81       	ldd	r24, Z+2	; 0x02
 ac2:	93 81       	ldd	r25, Z+3	; 0x03
 ac4:	0c 5f       	subi	r16, 0xFC	; 252
 ac6:	1f 4f       	sbci	r17, 0xFF	; 255
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <__stack+0x1d7>
 aca:	60 81       	ld	r22, Z
 acc:	71 81       	ldd	r23, Z+1	; 0x01
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 5f       	subi	r16, 0xFE	; 254
 ad4:	1f 4f       	sbci	r17, 0xFF	; 255
 ad6:	a3 01       	movw	r20, r6
 ad8:	0e 94 50 06 	call	0xca0	; 0xca0 <__ultoa_invert>
 adc:	88 2e       	mov	r8, r24
 ade:	86 18       	sub	r8, r6
 ae0:	fb 2d       	mov	r31, r11
 ae2:	ff 77       	andi	r31, 0x7F	; 127
 ae4:	3f 2e       	mov	r3, r31
 ae6:	36 fe       	sbrs	r3, 6
 ae8:	0d c0       	rjmp	.+26     	; 0xb04 <__stack+0x205>
 aea:	23 2d       	mov	r18, r3
 aec:	2e 7f       	andi	r18, 0xFE	; 254
 aee:	a2 2e       	mov	r10, r18
 af0:	89 14       	cp	r8, r9
 af2:	58 f4       	brcc	.+22     	; 0xb0a <__stack+0x20b>
 af4:	34 fe       	sbrs	r3, 4
 af6:	0b c0       	rjmp	.+22     	; 0xb0e <__stack+0x20f>
 af8:	32 fc       	sbrc	r3, 2
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <__stack+0x20f>
 afc:	83 2d       	mov	r24, r3
 afe:	8e 7e       	andi	r24, 0xEE	; 238
 b00:	a8 2e       	mov	r10, r24
 b02:	05 c0       	rjmp	.+10     	; 0xb0e <__stack+0x20f>
 b04:	b8 2c       	mov	r11, r8
 b06:	a3 2c       	mov	r10, r3
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <__stack+0x211>
 b0a:	b8 2c       	mov	r11, r8
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <__stack+0x211>
 b0e:	b9 2c       	mov	r11, r9
 b10:	a4 fe       	sbrs	r10, 4
 b12:	0f c0       	rjmp	.+30     	; 0xb32 <__stack+0x233>
 b14:	fe 01       	movw	r30, r28
 b16:	e8 0d       	add	r30, r8
 b18:	f1 1d       	adc	r31, r1
 b1a:	80 81       	ld	r24, Z
 b1c:	80 33       	cpi	r24, 0x30	; 48
 b1e:	21 f4       	brne	.+8      	; 0xb28 <__stack+0x229>
 b20:	9a 2d       	mov	r25, r10
 b22:	99 7e       	andi	r25, 0xE9	; 233
 b24:	a9 2e       	mov	r10, r25
 b26:	09 c0       	rjmp	.+18     	; 0xb3a <__stack+0x23b>
 b28:	a2 fe       	sbrs	r10, 2
 b2a:	06 c0       	rjmp	.+12     	; 0xb38 <__stack+0x239>
 b2c:	b3 94       	inc	r11
 b2e:	b3 94       	inc	r11
 b30:	04 c0       	rjmp	.+8      	; 0xb3a <__stack+0x23b>
 b32:	8a 2d       	mov	r24, r10
 b34:	86 78       	andi	r24, 0x86	; 134
 b36:	09 f0       	breq	.+2      	; 0xb3a <__stack+0x23b>
 b38:	b3 94       	inc	r11
 b3a:	a3 fc       	sbrc	r10, 3
 b3c:	11 c0       	rjmp	.+34     	; 0xb60 <__stack+0x261>
 b3e:	a0 fe       	sbrs	r10, 0
 b40:	06 c0       	rjmp	.+12     	; 0xb4e <__stack+0x24f>
 b42:	b2 14       	cp	r11, r2
 b44:	88 f4       	brcc	.+34     	; 0xb68 <__stack+0x269>
 b46:	28 0c       	add	r2, r8
 b48:	92 2c       	mov	r9, r2
 b4a:	9b 18       	sub	r9, r11
 b4c:	0e c0       	rjmp	.+28     	; 0xb6a <__stack+0x26b>
 b4e:	b2 14       	cp	r11, r2
 b50:	60 f4       	brcc	.+24     	; 0xb6a <__stack+0x26b>
 b52:	b6 01       	movw	r22, r12
 b54:	80 e2       	ldi	r24, 0x20	; 32
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 b5c:	b3 94       	inc	r11
 b5e:	f7 cf       	rjmp	.-18     	; 0xb4e <__stack+0x24f>
 b60:	b2 14       	cp	r11, r2
 b62:	18 f4       	brcc	.+6      	; 0xb6a <__stack+0x26b>
 b64:	2b 18       	sub	r2, r11
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <__stack+0x26d>
 b68:	98 2c       	mov	r9, r8
 b6a:	21 2c       	mov	r2, r1
 b6c:	a4 fe       	sbrs	r10, 4
 b6e:	10 c0       	rjmp	.+32     	; 0xb90 <__stack+0x291>
 b70:	b6 01       	movw	r22, r12
 b72:	80 e3       	ldi	r24, 0x30	; 48
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 b7a:	a2 fe       	sbrs	r10, 2
 b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x2ad>
 b7e:	a1 fc       	sbrc	r10, 1
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <__stack+0x289>
 b82:	88 e7       	ldi	r24, 0x78	; 120
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <__stack+0x28d>
 b88:	88 e5       	ldi	r24, 0x58	; 88
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	b6 01       	movw	r22, r12
 b8e:	0c c0       	rjmp	.+24     	; 0xba8 <__stack+0x2a9>
 b90:	8a 2d       	mov	r24, r10
 b92:	86 78       	andi	r24, 0x86	; 134
 b94:	59 f0       	breq	.+22     	; 0xbac <__stack+0x2ad>
 b96:	a1 fe       	sbrs	r10, 1
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <__stack+0x29f>
 b9a:	8b e2       	ldi	r24, 0x2B	; 43
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <__stack+0x2a1>
 b9e:	80 e2       	ldi	r24, 0x20	; 32
 ba0:	a7 fc       	sbrc	r10, 7
 ba2:	8d e2       	ldi	r24, 0x2D	; 45
 ba4:	b6 01       	movw	r22, r12
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 bac:	89 14       	cp	r8, r9
 bae:	38 f4       	brcc	.+14     	; 0xbbe <__stack+0x2bf>
 bb0:	b6 01       	movw	r22, r12
 bb2:	80 e3       	ldi	r24, 0x30	; 48
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 bba:	9a 94       	dec	r9
 bbc:	f7 cf       	rjmp	.-18     	; 0xbac <__stack+0x2ad>
 bbe:	8a 94       	dec	r8
 bc0:	f3 01       	movw	r30, r6
 bc2:	e8 0d       	add	r30, r8
 bc4:	f1 1d       	adc	r31, r1
 bc6:	80 81       	ld	r24, Z
 bc8:	b6 01       	movw	r22, r12
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 bd0:	81 10       	cpse	r8, r1
 bd2:	f5 cf       	rjmp	.-22     	; 0xbbe <__stack+0x2bf>
 bd4:	22 20       	and	r2, r2
 bd6:	09 f4       	brne	.+2      	; 0xbda <__stack+0x2db>
 bd8:	42 ce       	rjmp	.-892    	; 0x85e <vfprintf+0x24>
 bda:	b6 01       	movw	r22, r12
 bdc:	80 e2       	ldi	r24, 0x20	; 32
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	0e 94 14 06 	call	0xc28	; 0xc28 <fputc>
 be4:	2a 94       	dec	r2
 be6:	f6 cf       	rjmp	.-20     	; 0xbd4 <__stack+0x2d5>
 be8:	f6 01       	movw	r30, r12
 bea:	86 81       	ldd	r24, Z+6	; 0x06
 bec:	97 81       	ldd	r25, Z+7	; 0x07
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <__stack+0x2f5>
 bf0:	8f ef       	ldi	r24, 0xFF	; 255
 bf2:	9f ef       	ldi	r25, 0xFF	; 255
 bf4:	2b 96       	adiw	r28, 0x0b	; 11
 bf6:	e2 e1       	ldi	r30, 0x12	; 18
 bf8:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__epilogue_restores__>

00000bfc <strnlen_P>:
 bfc:	fc 01       	movw	r30, r24
 bfe:	05 90       	lpm	r0, Z+
 c00:	61 50       	subi	r22, 0x01	; 1
 c02:	70 40       	sbci	r23, 0x00	; 0
 c04:	01 10       	cpse	r0, r1
 c06:	d8 f7       	brcc	.-10     	; 0xbfe <strnlen_P+0x2>
 c08:	80 95       	com	r24
 c0a:	90 95       	com	r25
 c0c:	8e 0f       	add	r24, r30
 c0e:	9f 1f       	adc	r25, r31
 c10:	08 95       	ret

00000c12 <strnlen>:
 c12:	fc 01       	movw	r30, r24
 c14:	61 50       	subi	r22, 0x01	; 1
 c16:	70 40       	sbci	r23, 0x00	; 0
 c18:	01 90       	ld	r0, Z+
 c1a:	01 10       	cpse	r0, r1
 c1c:	d8 f7       	brcc	.-10     	; 0xc14 <strnlen+0x2>
 c1e:	80 95       	com	r24
 c20:	90 95       	com	r25
 c22:	8e 0f       	add	r24, r30
 c24:	9f 1f       	adc	r25, r31
 c26:	08 95       	ret

00000c28 <fputc>:
 c28:	0f 93       	push	r16
 c2a:	1f 93       	push	r17
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	fb 01       	movw	r30, r22
 c32:	23 81       	ldd	r18, Z+3	; 0x03
 c34:	21 fd       	sbrc	r18, 1
 c36:	03 c0       	rjmp	.+6      	; 0xc3e <fputc+0x16>
 c38:	8f ef       	ldi	r24, 0xFF	; 255
 c3a:	9f ef       	ldi	r25, 0xFF	; 255
 c3c:	2c c0       	rjmp	.+88     	; 0xc96 <fputc+0x6e>
 c3e:	22 ff       	sbrs	r18, 2
 c40:	16 c0       	rjmp	.+44     	; 0xc6e <fputc+0x46>
 c42:	46 81       	ldd	r20, Z+6	; 0x06
 c44:	57 81       	ldd	r21, Z+7	; 0x07
 c46:	24 81       	ldd	r18, Z+4	; 0x04
 c48:	35 81       	ldd	r19, Z+5	; 0x05
 c4a:	42 17       	cp	r20, r18
 c4c:	53 07       	cpc	r21, r19
 c4e:	44 f4       	brge	.+16     	; 0xc60 <fputc+0x38>
 c50:	a0 81       	ld	r26, Z
 c52:	b1 81       	ldd	r27, Z+1	; 0x01
 c54:	9d 01       	movw	r18, r26
 c56:	2f 5f       	subi	r18, 0xFF	; 255
 c58:	3f 4f       	sbci	r19, 0xFF	; 255
 c5a:	31 83       	std	Z+1, r19	; 0x01
 c5c:	20 83       	st	Z, r18
 c5e:	8c 93       	st	X, r24
 c60:	26 81       	ldd	r18, Z+6	; 0x06
 c62:	37 81       	ldd	r19, Z+7	; 0x07
 c64:	2f 5f       	subi	r18, 0xFF	; 255
 c66:	3f 4f       	sbci	r19, 0xFF	; 255
 c68:	37 83       	std	Z+7, r19	; 0x07
 c6a:	26 83       	std	Z+6, r18	; 0x06
 c6c:	14 c0       	rjmp	.+40     	; 0xc96 <fputc+0x6e>
 c6e:	8b 01       	movw	r16, r22
 c70:	ec 01       	movw	r28, r24
 c72:	fb 01       	movw	r30, r22
 c74:	00 84       	ldd	r0, Z+8	; 0x08
 c76:	f1 85       	ldd	r31, Z+9	; 0x09
 c78:	e0 2d       	mov	r30, r0
 c7a:	09 95       	icall
 c7c:	89 2b       	or	r24, r25
 c7e:	e1 f6       	brne	.-72     	; 0xc38 <fputc+0x10>
 c80:	d8 01       	movw	r26, r16
 c82:	16 96       	adiw	r26, 0x06	; 6
 c84:	8d 91       	ld	r24, X+
 c86:	9c 91       	ld	r25, X
 c88:	17 97       	sbiw	r26, 0x07	; 7
 c8a:	01 96       	adiw	r24, 0x01	; 1
 c8c:	17 96       	adiw	r26, 0x07	; 7
 c8e:	9c 93       	st	X, r25
 c90:	8e 93       	st	-X, r24
 c92:	16 97       	sbiw	r26, 0x06	; 6
 c94:	ce 01       	movw	r24, r28
 c96:	df 91       	pop	r29
 c98:	cf 91       	pop	r28
 c9a:	1f 91       	pop	r17
 c9c:	0f 91       	pop	r16
 c9e:	08 95       	ret

00000ca0 <__ultoa_invert>:
 ca0:	fa 01       	movw	r30, r20
 ca2:	aa 27       	eor	r26, r26
 ca4:	28 30       	cpi	r18, 0x08	; 8
 ca6:	51 f1       	breq	.+84     	; 0xcfc <__ultoa_invert+0x5c>
 ca8:	20 31       	cpi	r18, 0x10	; 16
 caa:	81 f1       	breq	.+96     	; 0xd0c <__ultoa_invert+0x6c>
 cac:	e8 94       	clt
 cae:	6f 93       	push	r22
 cb0:	6e 7f       	andi	r22, 0xFE	; 254
 cb2:	6e 5f       	subi	r22, 0xFE	; 254
 cb4:	7f 4f       	sbci	r23, 0xFF	; 255
 cb6:	8f 4f       	sbci	r24, 0xFF	; 255
 cb8:	9f 4f       	sbci	r25, 0xFF	; 255
 cba:	af 4f       	sbci	r26, 0xFF	; 255
 cbc:	b1 e0       	ldi	r27, 0x01	; 1
 cbe:	3e d0       	rcall	.+124    	; 0xd3c <__ultoa_invert+0x9c>
 cc0:	b4 e0       	ldi	r27, 0x04	; 4
 cc2:	3c d0       	rcall	.+120    	; 0xd3c <__ultoa_invert+0x9c>
 cc4:	67 0f       	add	r22, r23
 cc6:	78 1f       	adc	r23, r24
 cc8:	89 1f       	adc	r24, r25
 cca:	9a 1f       	adc	r25, r26
 ccc:	a1 1d       	adc	r26, r1
 cce:	68 0f       	add	r22, r24
 cd0:	79 1f       	adc	r23, r25
 cd2:	8a 1f       	adc	r24, r26
 cd4:	91 1d       	adc	r25, r1
 cd6:	a1 1d       	adc	r26, r1
 cd8:	6a 0f       	add	r22, r26
 cda:	71 1d       	adc	r23, r1
 cdc:	81 1d       	adc	r24, r1
 cde:	91 1d       	adc	r25, r1
 ce0:	a1 1d       	adc	r26, r1
 ce2:	20 d0       	rcall	.+64     	; 0xd24 <__ultoa_invert+0x84>
 ce4:	09 f4       	brne	.+2      	; 0xce8 <__ultoa_invert+0x48>
 ce6:	68 94       	set
 ce8:	3f 91       	pop	r19
 cea:	2a e0       	ldi	r18, 0x0A	; 10
 cec:	26 9f       	mul	r18, r22
 cee:	11 24       	eor	r1, r1
 cf0:	30 19       	sub	r19, r0
 cf2:	30 5d       	subi	r19, 0xD0	; 208
 cf4:	31 93       	st	Z+, r19
 cf6:	de f6       	brtc	.-74     	; 0xcae <__ultoa_invert+0xe>
 cf8:	cf 01       	movw	r24, r30
 cfa:	08 95       	ret
 cfc:	46 2f       	mov	r20, r22
 cfe:	47 70       	andi	r20, 0x07	; 7
 d00:	40 5d       	subi	r20, 0xD0	; 208
 d02:	41 93       	st	Z+, r20
 d04:	b3 e0       	ldi	r27, 0x03	; 3
 d06:	0f d0       	rcall	.+30     	; 0xd26 <__ultoa_invert+0x86>
 d08:	c9 f7       	brne	.-14     	; 0xcfc <__ultoa_invert+0x5c>
 d0a:	f6 cf       	rjmp	.-20     	; 0xcf8 <__ultoa_invert+0x58>
 d0c:	46 2f       	mov	r20, r22
 d0e:	4f 70       	andi	r20, 0x0F	; 15
 d10:	40 5d       	subi	r20, 0xD0	; 208
 d12:	4a 33       	cpi	r20, 0x3A	; 58
 d14:	18 f0       	brcs	.+6      	; 0xd1c <__ultoa_invert+0x7c>
 d16:	49 5d       	subi	r20, 0xD9	; 217
 d18:	31 fd       	sbrc	r19, 1
 d1a:	40 52       	subi	r20, 0x20	; 32
 d1c:	41 93       	st	Z+, r20
 d1e:	02 d0       	rcall	.+4      	; 0xd24 <__ultoa_invert+0x84>
 d20:	a9 f7       	brne	.-22     	; 0xd0c <__ultoa_invert+0x6c>
 d22:	ea cf       	rjmp	.-44     	; 0xcf8 <__ultoa_invert+0x58>
 d24:	b4 e0       	ldi	r27, 0x04	; 4
 d26:	a6 95       	lsr	r26
 d28:	97 95       	ror	r25
 d2a:	87 95       	ror	r24
 d2c:	77 95       	ror	r23
 d2e:	67 95       	ror	r22
 d30:	ba 95       	dec	r27
 d32:	c9 f7       	brne	.-14     	; 0xd26 <__ultoa_invert+0x86>
 d34:	00 97       	sbiw	r24, 0x00	; 0
 d36:	61 05       	cpc	r22, r1
 d38:	71 05       	cpc	r23, r1
 d3a:	08 95       	ret
 d3c:	9b 01       	movw	r18, r22
 d3e:	ac 01       	movw	r20, r24
 d40:	0a 2e       	mov	r0, r26
 d42:	06 94       	lsr	r0
 d44:	57 95       	ror	r21
 d46:	47 95       	ror	r20
 d48:	37 95       	ror	r19
 d4a:	27 95       	ror	r18
 d4c:	ba 95       	dec	r27
 d4e:	c9 f7       	brne	.-14     	; 0xd42 <__ultoa_invert+0xa2>
 d50:	62 0f       	add	r22, r18
 d52:	73 1f       	adc	r23, r19
 d54:	84 1f       	adc	r24, r20
 d56:	95 1f       	adc	r25, r21
 d58:	a0 1d       	adc	r26, r0
 d5a:	08 95       	ret

00000d5c <__prologue_saves__>:
 d5c:	2f 92       	push	r2
 d5e:	3f 92       	push	r3
 d60:	4f 92       	push	r4
 d62:	5f 92       	push	r5
 d64:	6f 92       	push	r6
 d66:	7f 92       	push	r7
 d68:	8f 92       	push	r8
 d6a:	9f 92       	push	r9
 d6c:	af 92       	push	r10
 d6e:	bf 92       	push	r11
 d70:	cf 92       	push	r12
 d72:	df 92       	push	r13
 d74:	ef 92       	push	r14
 d76:	ff 92       	push	r15
 d78:	0f 93       	push	r16
 d7a:	1f 93       	push	r17
 d7c:	cf 93       	push	r28
 d7e:	df 93       	push	r29
 d80:	cd b7       	in	r28, 0x3d	; 61
 d82:	de b7       	in	r29, 0x3e	; 62
 d84:	ca 1b       	sub	r28, r26
 d86:	db 0b       	sbc	r29, r27
 d88:	0f b6       	in	r0, 0x3f	; 63
 d8a:	f8 94       	cli
 d8c:	de bf       	out	0x3e, r29	; 62
 d8e:	0f be       	out	0x3f, r0	; 63
 d90:	cd bf       	out	0x3d, r28	; 61
 d92:	09 94       	ijmp

00000d94 <__epilogue_restores__>:
 d94:	2a 88       	ldd	r2, Y+18	; 0x12
 d96:	39 88       	ldd	r3, Y+17	; 0x11
 d98:	48 88       	ldd	r4, Y+16	; 0x10
 d9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 d9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 d9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 da0:	8c 84       	ldd	r8, Y+12	; 0x0c
 da2:	9b 84       	ldd	r9, Y+11	; 0x0b
 da4:	aa 84       	ldd	r10, Y+10	; 0x0a
 da6:	b9 84       	ldd	r11, Y+9	; 0x09
 da8:	c8 84       	ldd	r12, Y+8	; 0x08
 daa:	df 80       	ldd	r13, Y+7	; 0x07
 dac:	ee 80       	ldd	r14, Y+6	; 0x06
 dae:	fd 80       	ldd	r15, Y+5	; 0x05
 db0:	0c 81       	ldd	r16, Y+4	; 0x04
 db2:	1b 81       	ldd	r17, Y+3	; 0x03
 db4:	aa 81       	ldd	r26, Y+2	; 0x02
 db6:	b9 81       	ldd	r27, Y+1	; 0x01
 db8:	ce 0f       	add	r28, r30
 dba:	d1 1d       	adc	r29, r1
 dbc:	0f b6       	in	r0, 0x3f	; 63
 dbe:	f8 94       	cli
 dc0:	de bf       	out	0x3e, r29	; 62
 dc2:	0f be       	out	0x3f, r0	; 63
 dc4:	cd bf       	out	0x3d, r28	; 61
 dc6:	ed 01       	movw	r28, r26
 dc8:	08 95       	ret

00000dca <_exit>:
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>
