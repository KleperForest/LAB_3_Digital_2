
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d8  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000792  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f4  00000000  00000000  000013b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b2  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 92 00 	call	0x124	; 0x124 <main>
  88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
  96:	ae e7       	ldi	r26, 0x7E	; 126
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
  a0:	8c 91       	ld	r24, X
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8c 93       	st	X, r24


	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  a6:	80 81       	ld	r24, Z
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <SPI_init>:
	/*	Pines de control para esclavos
		PB2: Esclavo 1
	*/
	
	
	DDRB |= (1<<DDB4);  //MISO COMO SALIDA
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1<<DDB2) | (1<<DDB3) | (1<<DDB5));   //SS, MOSI, and SCK OUTPUT in master mode
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	83 7d       	andi	r24, 0xD3	; 211
  da:	84 b9       	out	0x04, r24	; 4

	/*	Orden de salida de los datos 
		DORD = 0, El bit más significativo (MSB) es enviado primero
		DORD = 1, El bit menos significativo (LSB) es enviado primero
	*/
	SPCR &=~ (1<<DORD);
  dc:	8c b5       	in	r24, 0x2c	; 44
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	8c bd       	out	0x2c, r24	; 44
		  0	  |   0    |  Clock inactivo en bajo, detección de bits en flanco de subida
		  0	  |   1    |  Clock inactivo en bajo, detección de bits en flanco de bajada
		  1	  |   0    |  Clock inactivo en alto, detección de bits en flanco de bajada
		  1	  |   1    |  Clock inactivo en alto, detección de bits en flanco de subida			
	*/
	SPCR &=~ (1<<CPOL);
  e2:	8c b5       	in	r24, 0x2c	; 44
  e4:	87 7f       	andi	r24, 0xF7	; 247
  e6:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<CPHA);
  e8:	8c b5       	in	r24, 0x2c	; 44
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	8c bd       	out	0x2c, r24	; 44
		1	  | 1	 |	0	|	32
		1	  | 1	 |	1	|	64
		
		F_CPU=16MHz -> F_SPI= F_CPU/16= 1MHz		 
	*/
	SPCR |=  (1<<SPR0);
  ee:	8c b5       	in	r24, 0x2c	; 44
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR1);
  f4:	8c b5       	in	r24, 0x2c	; 44
  f6:	8d 7f       	andi	r24, 0xFD	; 253
  f8:	8c bd       	out	0x2c, r24	; 44
	SPSR &=~ (1<<SPI2X);
  fa:	8d b5       	in	r24, 0x2d	; 45
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	8d bd       	out	0x2d, r24	; 45

	/*	Modo de funcionamiento 
		MSTR = 0, SPI como esclavo
		MSTR = 1; SPI como maestro
	*/
	SPCR &= ~(1<<MSTR);
 100:	8c b5       	in	r24, 0x2c	; 44
 102:	8f 7e       	andi	r24, 0xEF	; 239
 104:	8c bd       	out	0x2c, r24	; 44

	/* Activar SPI 
		SPE = 0, SPI desactivado
		SPE = |, SPI activado
	*/
	SPCR |= (1<<SPE);
 106:	8c b5       	in	r24, 0x2c	; 44
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	8c bd       	out	0x2c, r24	; 44
 10c:	08 95       	ret

0000010e <setup>:
/////////////////////////////////////////////
//Función de configuración (setup)
/////////////////////////////////////////////
void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 10e:	f8 94       	cli
	DDRC =0;  //Puerto C como entrada
 110:	17 b8       	out	0x07, r1	; 7
	
	SPI_init();
 112:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_init>
	SPCR |= (1<<SPIE); //Activar interrupcion SPI
 116:	8c b5       	in	r24, 0x2c	; 44
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8c bd       	out	0x2c, r24	; 44
	
	initADC(); //Iniciar ADC
 11c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	sei(); //Activar interrupciones
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <main>:
//Función principal (main)
/////////////////////////////////////////////

int main(void)
{
	setup();
 124:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
	
	while (1)
	{
		
		ADCSRA |=(1<<ADSC);  //Leer ADC
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 ef       	ldi	r24, 0xF9	; 249
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x14>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x1e>
 142:	00 00       	nop
 144:	f1 cf       	rjmp	.-30     	; 0x128 <main+0x4>

00000146 <__vector_21>:

/////////////////////////////////////////////
//Interrupción del ADC (ISR(ADC_vect))
/////////////////////////////////////////////

ISR(ADC_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	
	switch (case_spi){
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	88 23       	and	r24, r24
 15c:	19 f0       	breq	.+6      	; 0x164 <__vector_21+0x1e>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	71 f0       	breq	.+28     	; 0x17e <__vector_21+0x38>
 162:	1b c0       	rjmp	.+54     	; 0x19a <__vector_21+0x54>
		case 0:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0)); //Borrar configuracion actual y poner ADC0
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 7f       	andi	r24, 0xF8	; 248
 16c:	80 83       	st	Z, r24
		value_1 = ADCH;
 16e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 172:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <value_1>
		case_spi = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 17c:	0e c0       	rjmp	.+28     	; 0x19a <__vector_21+0x54>
		
		case 1:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC1
 17e:	ec e7       	ldi	r30, 0x7C	; 124
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 188:	80 81       	ld	r24, Z
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	80 83       	st	Z, r24
		value_2 = ADCH;
 18e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 192:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <value_2>
		case_spi = 0;
 196:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}
	
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 19a:	ea e7       	ldi	r30, 0x7A	; 122
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	80 83       	st	Z, r24

}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_17>:

/////////////////////////////////////////////
//Interrupción SPI (ISR(SPI_STC_vect))
/////////////////////////////////////////////

ISR(SPI_STC_vect){
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
	uint8_t SPIVALOR = SPDR;
 1c2:	8e b5       	in	r24, 0x2e	; 46

	
	if (SPIVALOR == 1)  //Si el maestro quiere ver el valor de los potenciometros
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	19 f4       	brne	.+6      	; 0x1ce <__vector_17+0x1a>
	{
		SPDR = value_2;
 1c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <value_2>
 1cc:	9e bd       	out	0x2e, r25	; 46
	}
	
	if (SPIVALOR == 2)  //Si el maestro quiere ver el valor de los potenciometros
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <__vector_17+0x24>
	{
		SPDR = value_1;
 1d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <value_1>
 1d6:	8e bd       	out	0x2e, r24	; 46
	}

 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
