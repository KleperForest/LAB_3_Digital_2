
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ace  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000547  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b3  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000382  00000000  00000000  000022a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002629  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	83 00       	.word	0x0083	; ????
  6a:	8a 00       	.word	0x008a	; ????
  6c:	91 00       	.word	0x0091	; ????
  6e:	9b 00       	.word	0x009b	; ????
  70:	a5 00       	.word	0x00a5	; ????
  72:	af 00       	.word	0x00af	; ????
  74:	b9 00       	.word	0x00b9	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  96:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  a4:	87 e8       	ldi	r24, 0x87	; 135
  a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	08 95       	ret

000000ac <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	98 7f       	andi	r25, 0xF8	; 248
  b4:	87 70       	andi	r24, 0x07	; 7
  b6:	89 2b       	or	r24, r25
  b8:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c8:	86 fd       	sbrc	r24, 6
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  d4:	08 95       	ret

000000d6 <SPI_init>:
#define F_CPU 16000000UL
#include "SPI.h"

void SPI_init(SPI_TYPE sType, SPI_Data_Order sDataOrder, SPI_Clock_Polarity sClockPolarity, SPI_Clock_Phase sClockPhase) {
  d6:	e8 2f       	mov	r30, r24
	//PB2 -> SS
	//PB3 -> SS
	//PB4 -> SS
	//PB5 -> SS
	
	if (sType & 0x10) { //Verificar si se configura como maestro..
  d8:	84 ff       	sbrs	r24, 4
  da:	52 c0       	rjmp	.+164    	; 0x180 <SPI_init+0xaa>
		// Configurar como maestro
		DDRB |= (1 << DDB3) | (1 << DDB5) | (1 << DDB2); // MOSI, SCK, SS como salidas
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8c 62       	ori	r24, 0x2C	; 44
  e0:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << DDB4); // MISO como entrada
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1 << MSTR); // Habilitar modo maestro
  e8:	8c b5       	in	r24, 0x2c	; 44
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
  ee:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
  f0:	8e 2f       	mov	r24, r30
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	87 30       	cpi	r24, 0x07	; 7
  f6:	91 05       	cpc	r25, r1
  f8:	08 f0       	brcs	.+2      	; 0xfc <SPI_init+0x26>
  fa:	4b c0       	rjmp	.+150    	; 0x192 <SPI_init+0xbc>
  fc:	fc 01       	movw	r30, r24
  fe:	ec 5c       	subi	r30, 0xCC	; 204
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__tablejump2__>
			case 0: //DIV2
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 106:	8c b5       	in	r24, 0x2c	; 44
 108:	8c 7f       	andi	r24, 0xFC	; 252
 10a:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 10c:	8d b5       	in	r24, 0x2d	; 45
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8d bd       	out	0x2d, r24	; 45
			break;
 112:	3f c0       	rjmp	.+126    	; 0x192 <SPI_init+0xbc>
			case 1: //DIV4
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 114:	8c b5       	in	r24, 0x2c	; 44
 116:	8c 7f       	andi	r24, 0xFC	; 252
 118:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 11a:	8d b5       	in	r24, 0x2d	; 45
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	8d bd       	out	0x2d, r24	; 45
			break;
 120:	38 c0       	rjmp	.+112    	; 0x192 <SPI_init+0xbc>
			case 2: //DIV8
				SPCR |= (1<<SPR0);
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	81 60       	ori	r24, 0x01	; 1
 126:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 128:	8c b5       	in	r24, 0x2c	; 44
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 12e:	8d b5       	in	r24, 0x2d	; 45
 130:	81 60       	ori	r24, 0x01	; 1
 132:	8d bd       	out	0x2d, r24	; 45
			break;
 134:	2e c0       	rjmp	.+92     	; 0x192 <SPI_init+0xbc>
			case 3: //DIV16
				SPCR |= (1<<SPR0);
 136:	8c b5       	in	r24, 0x2c	; 44
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 13c:	8c b5       	in	r24, 0x2c	; 44
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 142:	8d b5       	in	r24, 0x2d	; 45
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	8d bd       	out	0x2d, r24	; 45
			break;
 148:	24 c0       	rjmp	.+72     	; 0x192 <SPI_init+0xbc>
			case 4: //DIV32
				SPCR &= ~(1<<SPR0);
 14a:	8c b5       	in	r24, 0x2c	; 44
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 150:	8c b5       	in	r24, 0x2c	; 44
 152:	82 60       	ori	r24, 0x02	; 2
 154:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 156:	8d b5       	in	r24, 0x2d	; 45
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	8d bd       	out	0x2d, r24	; 45
			break;
 15c:	1a c0       	rjmp	.+52     	; 0x192 <SPI_init+0xbc>
			case 5: //DIV64
				SPCR &= ~(1<<SPR0);
 15e:	8c b5       	in	r24, 0x2c	; 44
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 164:	8c b5       	in	r24, 0x2c	; 44
 166:	82 60       	ori	r24, 0x02	; 2
 168:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 16a:	8d b5       	in	r24, 0x2d	; 45
 16c:	8e 7f       	andi	r24, 0xFE	; 254
 16e:	8d bd       	out	0x2d, r24	; 45
			break;
 170:	10 c0       	rjmp	.+32     	; 0x192 <SPI_init+0xbc>
			case 6: //DIV128
				SPCR |= (1<<SPR0)|(1<<SPR1);
 172:	8c b5       	in	r24, 0x2c	; 44
 174:	83 60       	ori	r24, 0x03	; 3
 176:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 178:	8d b5       	in	r24, 0x2d	; 45
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	8d bd       	out	0x2d, r24	; 45
			break;
 17e:	09 c0       	rjmp	.+18     	; 0x192 <SPI_init+0xbc>
		}
		
		} else {
		// Configurar como esclavo
		DDRB |= (1 << DDB4); // MISO como salida
 180:	84 b1       	in	r24, 0x04	; 4
 182:	80 61       	ori	r24, 0x10	; 16
 184:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1 << DDB3) | (1 << DDB5) | (1 << DDB2)); // MOSI, SCK, SS como entradas
 186:	84 b1       	in	r24, 0x04	; 4
 188:	83 7d       	andi	r24, 0xD3	; 211
 18a:	84 b9       	out	0x04, r24	; 4
		
		SPCR &= ~(1 << MSTR); // Habilitar SPI, modo esclavo
 18c:	8c b5       	in	r24, 0x2c	; 44
 18e:	8f 7e       	andi	r24, 0xEF	; 239
 190:	8c bd       	out	0x2c, r24	; 44
	}
	// Habilitar Data Order, Clock Polarity, Clock Phase
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 192:	8c b5       	in	r24, 0x2c	; 44
 194:	46 2b       	or	r20, r22
 196:	24 2b       	or	r18, r20
 198:	28 2b       	or	r18, r24
 19a:	20 64       	ori	r18, 0x40	; 64
 19c:	2c bd       	out	0x2c, r18	; 44
 19e:	08 95       	ret

000001a0 <SPI_send>:
}

void SPI_send(uint8_t data) {
	SPDR = data;
 1a0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Esperar a que la transmisión termine
 1a2:	0d b4       	in	r0, 0x2d	; 45
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <SPI_send+0x2>
}
 1a8:	08 95       	ret

000001aa <main>:
void refreshPORT(uint8_t valor);

int main(void)
{
	// Configurar Pines como salida
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7);
 1aa:	8a b1       	in	r24, 0x0a	; 10
 1ac:	8c 6f       	ori	r24, 0xFC	; 252
 1ae:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB0)|(1<<DDB1);
 1b0:	84 b1       	in	r24, 0x04	; 4
 1b2:	83 60       	ori	r24, 0x03	; 3
 1b4:	84 b9       	out	0x04, r24	; 4
	
	PORTD &= ~((1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	83 70       	andi	r24, 0x03	; 3
 1ba:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1<<DDB0)|(1<<DDB1));
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8c 7f       	andi	r24, 0xFC	; 252
 1c0:	85 b9       	out	0x05, r24	; 5
	
	SPI_init(SPI_SLAVE_SS,SPI_Data_Order_MSB,SPI_Clock_IDLE_LOW,SPI_clock_First_EDGE);
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_init>
	ADC_Init();
 1ce:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Init>
	SPCR |= (1<<SPIE); // Activar ISR SPI
 1d2:	8c b5       	in	r24, 0x2c	; 44
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	8c bd       	out	0x2c, r24	; 44
	sei();
 1d8:	78 94       	sei
	
	while (1)
	{
		adc_value_1 = ADC_Read(7);
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	0e 94 56 00 	call	0xac	; 0xac <ADC_Read>
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e4:	fa cf       	rjmp	.-12     	; 0x1da <main+0x30>

000001e6 <__vector_17>:
	}
}

ISR(SPI_STC_vect) {
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	valorSPI = SPDR;
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <valorSPI>
	if (valorSPI == 'c') {
 20e:	83 36       	cpi	r24, 0x63	; 99
 210:	21 f4       	brne	.+8      	; 0x21a <__vector_17+0x34>
		SPI_send(adc_value_1);
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 216:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SPI_send>
		} 
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__tablejump2__>:
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	05 90       	lpm	r0, Z+
 242:	f4 91       	lpm	r31, Z
 244:	e0 2d       	mov	r30, r0
 246:	09 94       	ijmp

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
