
LAB_3_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a40  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f9  00000000  00000000  0000165a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e6  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000214  00000000  00000000  00002336  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_21>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	87 00       	.word	0x0087	; ????
  6a:	8e 00       	.word	0x008e	; ????
  6c:	95 00       	.word	0x0095	; ????
  6e:	9f 00       	.word	0x009f	; ????
  70:	a9 00       	.word	0x00a9	; ????
  72:	b3 00       	.word	0x00b3	; ????
  74:	bd 00       	.word	0x00bd	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a3 30       	cpi	r26, 0x03	; 3
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  96:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <initADC>:
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
  a4:	ae e7       	ldi	r26, 0x7E	; 126
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	8c 91       	ld	r24, X
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
  ae:	8c 91       	ld	r24, X
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8c 93       	st	X, r24


	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  b4:	80 81       	ld	r24, Z
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  c0:	80 81       	ld	r24, Z
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
  d6:	80 81       	ld	r24, Z
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <SPI_init>:
 #include "SPI.h"


void SPI_init()
  de:	e8 2f       	mov	r30, r24
{
	/*	Pines de la interface de comunicación
		PB3: MOSI
		PB4: MISO
		PB5: SCK
	*/
  e0:	84 ff       	sbrs	r24, 4
  e2:	52 c0       	rjmp	.+164    	; 0x188 <SPI_init+0xaa>

	/*	Pines de control para esclavos
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8c 62       	ori	r24, 0x2C	; 44
  e8:	84 b9       	out	0x04, r24	; 4
		PB2: Esclavo 1
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	8f 7e       	andi	r24, 0xEF	; 239
  ee:	84 b9       	out	0x04, r24	; 4
	*/
  f0:	8c b5       	in	r24, 0x2c	; 44
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	8c bd       	out	0x2c, r24	; 44
	
	
  f6:	e7 70       	andi	r30, 0x07	; 7
	DDRB |= (1<<DDB4);  //MISO COMO SALIDA
  f8:	8e 2f       	mov	r24, r30
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	87 30       	cpi	r24, 0x07	; 7
  fe:	91 05       	cpc	r25, r1
 100:	08 f0       	brcs	.+2      	; 0x104 <SPI_init+0x26>
 102:	4b c0       	rjmp	.+150    	; 0x19a <SPI_init+0xbc>
 104:	fc 01       	movw	r30, r24
 106:	ec 5c       	subi	r30, 0xCC	; 204
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	0c 94 40 01 	jmp	0x280	; 0x280 <__tablejump2__>
	DDRB &= ~((1<<DDB2) | (1<<DDB3) | (1<<DDB5));   //SS, MOSI, and SCK OUTPUT in master mode

 10e:	8c b5       	in	r24, 0x2c	; 44
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	8c bd       	out	0x2c, r24	; 44
	/*	Orden de salida de los datos 
 114:	8d b5       	in	r24, 0x2d	; 45
 116:	81 60       	ori	r24, 0x01	; 1
 118:	8d bd       	out	0x2d, r24	; 45
		DORD = 0, El bit más significativo (MSB) es enviado primero
 11a:	3f c0       	rjmp	.+126    	; 0x19a <SPI_init+0xbc>
		DORD = 1, El bit menos significativo (LSB) es enviado primero
	*/
 11c:	8c b5       	in	r24, 0x2c	; 44
 11e:	8c 7f       	andi	r24, 0xFC	; 252
 120:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<DORD);
 122:	8d b5       	in	r24, 0x2d	; 45
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	8d bd       	out	0x2d, r24	; 45

 128:	38 c0       	rjmp	.+112    	; 0x19a <SPI_init+0xbc>
	/*  Configuración de polaridad y fase (Modo de comunicación)
		 CPOL |  CPHA  |                           MODO	
 12a:	8c b5       	in	r24, 0x2c	; 44
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	8c bd       	out	0x2c, r24	; 44
		------|--------|---------------------------------------------------------------
 130:	8c b5       	in	r24, 0x2c	; 44
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8c bd       	out	0x2c, r24	; 44
		  0	  |   0    |  Clock inactivo en bajo, detección de bits en flanco de subida
 136:	8d b5       	in	r24, 0x2d	; 45
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8d bd       	out	0x2d, r24	; 45
		  0	  |   1    |  Clock inactivo en bajo, detección de bits en flanco de bajada
 13c:	2e c0       	rjmp	.+92     	; 0x19a <SPI_init+0xbc>
		  1	  |   0    |  Clock inactivo en alto, detección de bits en flanco de bajada
		  1	  |   1    |  Clock inactivo en alto, detección de bits en flanco de subida			
 13e:	8c b5       	in	r24, 0x2c	; 44
 140:	81 60       	ori	r24, 0x01	; 1
 142:	8c bd       	out	0x2c, r24	; 44
	*/
 144:	8c b5       	in	r24, 0x2c	; 44
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<CPOL);
 14a:	8d b5       	in	r24, 0x2d	; 45
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	8d bd       	out	0x2d, r24	; 45
	SPCR &=~ (1<<CPHA);
 150:	24 c0       	rjmp	.+72     	; 0x19a <SPI_init+0xbc>

	/*	Pre-escalador  (Divisor de Frecuencia)
 152:	8c b5       	in	r24, 0x2c	; 44
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	8c bd       	out	0x2c, r24	; 44
		SPI2X | SPR1 | SPR0 | Pre-escalador
 158:	8c b5       	in	r24, 0x2c	; 44
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	8c bd       	out	0x2c, r24	; 44
		------|------|------|----------------
 15e:	8d b5       	in	r24, 0x2d	; 45
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8d bd       	out	0x2d, r24	; 45
		0     | 0	 |	0	|	4
 164:	1a c0       	rjmp	.+52     	; 0x19a <SPI_init+0xbc>
		0	  | 0	 |	1	|	16
		0	  | 1	 |	0	|	64
 166:	8c b5       	in	r24, 0x2c	; 44
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	8c bd       	out	0x2c, r24	; 44
		0	  | 1	 |	1	|	128
 16c:	8c b5       	in	r24, 0x2c	; 44
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	8c bd       	out	0x2c, r24	; 44
		1	  | 0	 |	0	|	2
 172:	8d b5       	in	r24, 0x2d	; 45
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	8d bd       	out	0x2d, r24	; 45
		1	  | 0	 |	1	|	8
 178:	10 c0       	rjmp	.+32     	; 0x19a <SPI_init+0xbc>
		1	  | 1	 |	0	|	32
		1	  | 1	 |	1	|	64
 17a:	8c b5       	in	r24, 0x2c	; 44
 17c:	83 60       	ori	r24, 0x03	; 3
 17e:	8c bd       	out	0x2c, r24	; 44
		
 180:	8d b5       	in	r24, 0x2d	; 45
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	8d bd       	out	0x2d, r24	; 45
		F_CPU=16MHz -> F_SPI= F_CPU/16= 1MHz		 
 186:	09 c0       	rjmp	.+18     	; 0x19a <SPI_init+0xbc>
	*/
	SPCR |=  (1<<SPR0);
	SPCR &=~ (1<<SPR1);
	SPSR &=~ (1<<SPI2X);

 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	84 b9       	out	0x04, r24	; 4
	/*	Modo de funcionamiento 
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	83 7d       	andi	r24, 0xD3	; 211
 192:	84 b9       	out	0x04, r24	; 4
		MSTR = 0, SPI como esclavo
		MSTR = 1; SPI como maestro
 194:	8c b5       	in	r24, 0x2c	; 44
 196:	8f 7e       	andi	r24, 0xEF	; 239
 198:	8c bd       	out	0x2c, r24	; 44
	*/
	SPCR &= ~(1<<MSTR);

 19a:	8c b5       	in	r24, 0x2c	; 44
 19c:	46 2b       	or	r20, r22
 19e:	24 2b       	or	r18, r20
 1a0:	28 2b       	or	r18, r24
 1a2:	20 64       	ori	r18, 0x40	; 64
 1a4:	2c bd       	out	0x2c, r18	; 44
 1a6:	08 95       	ret

000001a8 <setup>:
/////////////////////////////////////////////
//Función de configuración (setup)
/////////////////////////////////////////////
void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 1a8:	f8 94       	cli
	DDRC =0;  //Puerto C como entrada
 1aa:	17 b8       	out	0x07, r1	; 7
	
	SPI_init();
 1ac:	0e 94 6f 00 	call	0xde	; 0xde <SPI_init>
	SPCR |= (1<<SPIE); //Activar interrupcion SPI
 1b0:	8c b5       	in	r24, 0x2c	; 44
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8c bd       	out	0x2c, r24	; 44
	
	initADC(); //Iniciar ADC
 1b6:	0e 94 4f 00 	call	0x9e	; 0x9e <initADC>
	
	sei(); //Activar interrupciones
 1ba:	78 94       	sei
 1bc:	08 95       	ret

000001be <main>:
//Función principal (main)
/////////////////////////////////////////////

int main(void)
{
	setup();
 1be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <setup>
	
	while (1)
	{
		
		ADCSRA |=(1<<ADSC);  //Leer ADC
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	89 ef       	ldi	r24, 0xF9	; 249
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x14>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x1e>
 1dc:	00 00       	nop
 1de:	f1 cf       	rjmp	.-30     	; 0x1c2 <main+0x4>

000001e0 <__vector_21>:

/////////////////////////////////////////////
//Interrupción del ADC (ISR(ADC_vect))
/////////////////////////////////////////////

ISR(ADC_vect){
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	
	switch (case_spi){
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <__vector_21+0x1e>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	71 f0       	breq	.+28     	; 0x218 <__vector_21+0x38>
 1fc:	1b c0       	rjmp	.+54     	; 0x234 <__vector_21+0x54>
		case 0:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0)); //Borrar configuracion actual y poner ADC0
 1fe:	ec e7       	ldi	r30, 0x7C	; 124
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	88 7f       	andi	r24, 0xF8	; 248
 206:	80 83       	st	Z, r24
		value_1 = ADCH;
 208:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 20c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <value_1>
		case_spi = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 216:	0e c0       	rjmp	.+28     	; 0x234 <__vector_21+0x54>
		
		case 1:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC1
 218:	ec e7       	ldi	r30, 0x7C	; 124
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 222:	80 81       	ld	r24, Z
 224:	81 60       	ori	r24, 0x01	; 1
 226:	80 83       	st	Z, r24
		value_2 = ADCH;
 228:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 22c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <value_2>
		case_spi = 0;
 230:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}
	
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 234:	ea e7       	ldi	r30, 0x7A	; 122
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	80 83       	st	Z, r24

}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_17>:

/////////////////////////////////////////////
//Interrupción SPI (ISR(SPI_STC_vect))
/////////////////////////////////////////////

ISR(SPI_STC_vect){
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
	uint8_t SPIVALOR = SPDR;
 25c:	8e b5       	in	r24, 0x2e	; 46

	
	if (SPIVALOR == 1)  //Si el maestro quiere ver el valor de los potenciometros
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	19 f4       	brne	.+6      	; 0x268 <__vector_17+0x1a>
	{
		SPDR = value_2;
 262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <value_2>
 266:	9e bd       	out	0x2e, r25	; 46
	}
	
	if (SPIVALOR == 2)  //Si el maestro quiere ver el valor de los potenciometros
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	19 f4       	brne	.+6      	; 0x272 <__vector_17+0x24>
	{
		SPDR = value_1;
 26c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <value_1>
 270:	8e bd       	out	0x2e, r24	; 46
	}

 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__tablejump2__>:
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	05 90       	lpm	r0, Z+
 286:	f4 91       	lpm	r31, Z
 288:	e0 2d       	mov	r30, r0
 28a:	09 94       	ijmp

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
